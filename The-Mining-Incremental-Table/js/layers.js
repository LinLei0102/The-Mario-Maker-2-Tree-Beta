//v0.6需要检查的东西：更严谨的高炉结构检测、金升级9，贯穿全游戏的时间墙长度，优化下一步做什么提醒，奇点可聚合提醒
//准备长期停更，顺便回到马造树重新优化
//v0.6准备更新8层
//最后重玩一遍调整平衡减少不必要的墙，进一步优化显示

console.log(`挖矿增量页 by AngryStar6K`)

const ENMSI = ExpantaNum(Number.MAX_SAFE_INTEGER)
const ExpantaNumInfinity = ExpantaNum(Number.MAX_VALUE)

const tick = ExpantaNum(20)

function d(EN) {
    return ExpantaNum(EN)
}

function f(num, precision) {
    return format(num, precision)
}

function fw(num) {
    return formatWhole(num)
}

function autobuyBuyables1perTick(layer, id) {
    if (tmp[layer].buyables[id].canAfford) setBuyableAmount(layer, id, getBuyableAmount(layer, id).add(1))
}

function getEveryGridIDArray(row, col) {
    if (col > 100) col = 100
    if (row > 100) row = 100
    let arr = []
    let r = 0
    for (r = 0; r < row; r++) {
        for (c = 0; c < col; c++) {
            arr.splice(arr.length, 0, 1 + c + (100 * (r + 1)))
        }
    }
    return arr
}

addLayer("0layer", {
    name: "sideLayer0",
    position: -7,
    row: 1,
    symbol() { return '↓ 杂项 ↓' },
    small: true,// Set true to generate a slightly different layer
    nodeStyle: { "font-size": "15px", "height": "30px" },// Change layer button' style
    startData() {
        return {
            unlocked: true,
            points: new ExpantaNum(0),// This actually does nothing, but you have to write this. (Unless you want add something in this layer. #Todo, might change that later.)
        }
    },
    color: "#fefefe",
    type: "none",
    tooltip() { return false },
    layerShown() { return true },// If any layer in the array is unlocked, it will returns true. Otherwise it will return false.
    update() {
        levelUpdating()
        tiersUpdating(1)
    },
    tabFormat: [
        ["display-text", function () { return getPointsDisplay() }]
    ],
})

function EN_compare(num) {
    num = ExpantaNum(num)
    if (num.gte(0) && num.lt(1)) return format(num)
    if (num.gte(1) && num.lt("1e3003")) return `Googol<sup>${format(num.log10().div(100), 4)}</sup>`
    if (num.gte("1e3003") && num.lt("1e3000003")) return `Millillion<sup>${format(num.log10().div(3003), 4)}</sup>`
    if (num.gte("1e3000003") && num.lt("e1e10")) return `Micrillion<sup>${format(num.log10().div(3000003), 4)}</sup>`
    if (num.gte("e1e10") && num.lt("e1e100")) return `Trialogue<sup>${format(num.log10().div(1e10), 3)}</sup>`
    if (num.gte("e1e100") && num.lt("e3e3000")) return `Googolplex<sup>${format(num.log10().div(1e100), 3)}</sup>`
    if (num.gte("e3e3000") && num.lt("e3e3000000")) return `Killillion<sup>${format(num.log10().div("3e3000"), 3)}</sup>`
    if (num.gte("e3e3000000") && num.lt("ee1e10")) return `Megillion<sup>${format(num.log10().div("3e3000000"), 3)}</sup>`
    if (num.gte("ee1e10") && num.lt("ee1e100")) return `Tetralogue<sup>10<sup>${format(num.log10().log10().div("1e10"), 3)}</sup></sup>`
    if (num.gte("ee1e100") && num.lt("eee1e10")) return `Googolduplex<sup>10<sup>${format(num.log10().log10().div("1e100"), 3)}</sup></sup>`
    if (num.gte("eee1e10") && num.lt("10^^6")) return `Pentalogue<sup>10<sup>10<sup>${format(num.log10().log10().log10().div("1e10"), 3)}</sup></sup></sup>`
    if (num.gte("10^^6") && num.lt("10^^10")) return `Hexalogue<sup>10<sup>10<sup>10<sup>${format(num.log10().log10().log10().log10().div("1e10"), 3)}</sup></sup></sup></sup>`
    if (num.gte("10^^10") && num.lt("10^^100")) return `Decker^^${format(num.slog(10).div(10), 4)}`
    if (num.gte("10^^100") && num.lt("10^^1e10")) return `Giggol^^${format(num.slog(10).div(100), 4)}`
    if (num.gte("10^^1e10") && num.lt("10^^1e100")) return `Dialogialogue^^${format(num.slog(10).div(1e10), 3)}`
    if (num.gte("10^^1e100") && num.lt("10^^e1e10")) return `Googologue^^${format(num.slog(10).div(1e100), 3)}`
    if (num.gte("10^^e1e10") && num.lt("10^^ee1e10")) return `Trialogialogue^^10^${format(num.slog(10).log(10).div(1e10), 3)}`
    if (num.gte("10^^ee1e10") && num.lt("10^^10^^10")) return `Tetralogialogue^^10^10^${format(num.slog(10).log10().log10().div(1e10), 3)}`
    if (num.gte("10^^10^^10") && num.lt("10^^10^^10^^10")) return `Tria-taxis^^10^^${format(num.slog(10).slog(10).div(10), 4)}`
    if (num.gte("10^^10^^10^^10") && num.lt("10^^^5")) return `Tetra-taxis^^10^^10^^${format(num.slog(10).slog(10).slog(10).div(10), 4)}`
    if (num.gte("10^^10^^10^^10") && num.lt("10^^^10")) return `Penta-taxis^^10^^10^^10^^${format(num.slog(10).slog(10).slog(10).slog(10).div(10), 4)}`
    if (num.gte("10^^^10") && num.lt("10^^^100")) return `Deka-taxis^^^${format(d(polarize(num.array).bottom).log10().add(d(polarize(num.array).top)).div(10), 4)}`
    if (num.gte("10^^^100") && num.lt("10^^^10^^^10")) {
        if (num.lt(d(10).pentate(ENMSI))) return `Gaggol^^^${format(d(polarize(num.array).bottom).log10().add(d(polarize(num.array).top)).div(100), 4)}`
        let pentlog = num
        if (num.array.length == 3 && num.gte(d(10).pentate(ENMSI))) pentlog.array = [num.array[0], num.array[1]]
        if (num.array.length == 4) pentlog.array = [num.array[0], num.array[1], num.array[2]]
        return `Gaggol^^^${format(pentlog.div(100), 4)}`
    }
    if (num.gte("10^^^10^^^10") && num.lt("10^^^^10")) {
        if (num.lt(d(10).pentate(d(10).pentate(ENMSI)))) {
            let pentlog = num
            if (num.array.length == 3) pentlog.array = [pentlog.array[0], pentlog.array[1]]
            if (num.array.length == 4) pentlog.array = [pentlog.array[0], pentlog.array[1], pentlog.array[2]];
            return `Tria-petaxis^^^10^^^${format(d(polarize(pentlog.array).bottom).log10().add(d(polarize(pentlog.array).top)).div(10), 4)}`
        }
        if (num.lt(d(10).pentate(d(10).pentate(d(10).pentate(ENMSI))))) {
            let pentlog = num
            if (num.array.length == 3) pentlog.array = [pentlog.array[0], pentlog.array[1]]
            if (num.array.length == 4) pentlog.array = [pentlog.array[0], pentlog.array[1], pentlog.array[2]];
            return `Tria-petaxis^^^10^^^${format(pentlog.div(100), 4)}`
        }
        if (num.lt(d("10^^^^10"))) {
            let pentlog = num
            if (num.array.length == 3) pentlog.array[2][1] -= 2
            if (num.array.length == 4) pentlog.array[3][1] -= 2;
            return `Tria-petaxis^^^10^^^${format(pentlog.div(100), 4)}`
        }
    }
    if (num.gte("10^^^^10") && num.lt("10{10}10")) {
        if (num.lt("10^^^^9e15")) {
            return `Deka-petaxis^^^^${format(d(polarize(num.array).bottom).log10().add(d(polarize(num.array).top)).div(10), 4)}`
        }
        let pol = polarize(num.array, true)
        let Jx = d(pol.height).add(d(pol.bottom).log10().add(d(pol.top)).div(2).logBase(5))
        if (num.lt("10{5}10")) {
            return `{10, 10, ${format(Jx, 5)}} (Deka-exaxis>x>Deka-petaxis)`
        }
        if (num.lt("10{6}10")) {
            return `{10, 10, ${format(Jx, 5)}} (Deka-eptaxis>x>Deka-exaxis)`
        }
        if (num.lt("10{7}10")) {
            return `{10, 10, ${format(Jx, 5)}} (Deka-octaxis>x>Deka-eptaxis)`
        }
        if (num.lt("10{8}10")) {
            return `{10, 10, ${format(Jx, 5)}} (Deka-ennaxis>x>Deka-octaxis)`
        }
        if (num.lt("10{9}10")) {
            return `{10, 10, ${format(Jx, 5)}} (Deka-dekaxis>x>Deka-ennaxis)`
        }
        if (num.lt("10{10}10")) {
            return `{10, 10, ${format(Jx, 5)}} (Tridecal>x>Deka-dekaxis)`
        }
    }
    if (num.gte("10{10}10") && num.lt("10{100}10")) {
        let pol = polarize(num.array, true)
        let Jx = d(pol.height).add(d(pol.bottom).log10().add(d(pol.top)).div(2).logBase(5))
        return `Tridecal↑<sup>ω</sup>${format(Jx.div(10), 5)}`
    }
    if (num.gte("10{100}10") && num.lt(ExpantaNum.GRAHAMS_NUMBER)) {
        if (num.lt("10{9007199254740991}10")) {
            let pol = polarize(num.array, true)
            let Jx = d(pol.height).add(d(pol.bottom).log10().add(d(pol.top)).div(2).logBase(5))
            return `Boogol↑<sup>ω</sup>${format(Jx.div(100), 5)}`
        }
        if (num.lt(ExpantaNum.GRAHAMS_NUMBER)) {
            let expand = num
            expand.layer = num.layer - 1
            return `Boogol↑<sup>ω</sup>${format(expand.div(100), 4)}`
        }
    }
    if (num.gte(ExpantaNum.GRAHAMS_NUMBER)) {
        let pol = polarize(num.array, true)
        let Jx = d(pol.height).add(d(pol.bottom).log10().add(d(pol.top)).div(2).logBase(5))
        let Kx = Jx.log10().add(d(num.layer + 1))
        return `Graham's Number{{1}}${format(Kx.div(64.49189761102771), 5)}`
    }
    //...
}

//杂项层1：统计
addLayer("statistics", {
    name: "statistics",
    position: -6,
    row: 1,
    symbol() { return '统计' },// Set true to generate a slightly different layer
    // Change layer button' style
    startData() {
        return {
            unlocked: true,
            points: new ExpantaNum(0),// This actually does nothing, but you have to write this. (Unless you want add something in this layer. #Todo, might change that later.)
        }
    },
    color: "#fefefe",
    type: "none",
    tooltip() { return false },
    layerShown() { return true },// If any layer in the array is unlocked, it will returns true. Otherwise it will return false.
    tabFormat: [
        ["display-text", function () { return getPointsDisplay() }],
        "blank",
        ["display-text", () => `这里可以显示所有已解锁的资源数量`],
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "xp": {
                unlocked() { return true },
                name() { return '经验' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { return `你有${textStyle_h3(format(player.points), 'ffffff')}经验` }],
                    ["display-text", function () { return `等级${textStyle_h3(formatWhole(player.level), 'ffffff')}` }],
                    ["display-text", function () { if (player.points.lt('ee12')) return `等级${textStyle_h3(formatWhole(player.level.add(1)), 'ffffff')}需要${textStyle_h3(format(nextLevelReq()), 'ffffff')}经验` }],
                    ["display-text", function () { if (hasAchievement('achievements', 123)) return `二阶等级${textStyle_h3(formatWhole(player.tiers[0]), 'ffffff')}` }],
                    ["display-text", function () { if (hasAchievement('achievements', 123)) return `二阶等级${textStyle_h3(formatWhole(player.tiers[0].add(1)), 'ffffff')}需要${textStyle_h3(format(nextTiersReq(1)), 'ffffff')}等级` }],
                    "blank",
                    "blank",
                    "blank",
                    "blank",
                    "blank",
                    ["display-text", function () { return `你的经验相当于${textStyle_h3(EN_compare(player.points), 'ffffff')}` }],
                    ["display-text", function () { return `如果你每秒写3个数字，那么你需要${textStyle_h3(ftl(player.points.max(1).log10().add(1).div(3)), 'ffffff')}来写完你的经验数量` }],
                ]
            },
            "world1": {
                unlocked() { return true },
                name() { return '世界1' },
                content: [
                    ["blank", "15px"],
                    ["microtabs", "world1"],
                ]
            },
            "world2": {
                unlocked() { return hasNormalAchievement(145) },
                name() { return '世界2' },
                content: [
                    ["blank", "15px"],
                    ["microtabs", "world2"],
                ]
            },
            "craft": {
                unlocked() { return hasNormalAchievement(12) },
                name() { return '制造' },
                content: [
                    ["blank", "15px"],
                    ["microtabs", "craft"],
                ]
            },
            "energy": {
                unlocked() { return hasNormalAchievement(33) },
                name() { return '能源' },
                content: [
                    ["blank", "15px"],
                    ["microtabs", "energy"],
                ]
            },
        },
        world1: {
            "wood": {
                unlocked() { return tmp.wood.layerShown },
                name() { return '木头' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { if (tmp.wood.layerShown) return `你有${textStyle_h3(formatWhole(player.wood.points), 'b8945e')}木头` }],
                    ["display-text", function () { if (hasUpgrade(rf, 92)) return `你有${textStyle_h3(format(player.wood.chips), 'b8945e')}木屑` }],
                    "blank",
                    ["display-text", function () { if (hasUpgrade(wood, 23)) return `你有${textStyle_h3(formatWhole(player.wood.oak), 'b8945e')}橡木原木` }],
                    ["display-text", function () { if (hasUpgrade(wood, 31)) return `你有${textStyle_h3(formatWhole(player.wood.spruce), '826038')}云杉原木` }],
                    ["display-text", function () { if (hasMilestone(wood, 2)) return `你有${textStyle_h3(formatWhole(player.wood.birch), 'ceb77c')}白桦原木` }],
                    ["display-text", function () { if (hasUpgrade(bronze, 23)) return `你有${textStyle_h3(formatWhole(player.wood.jungle), '9f844d')}丛林原木` }],
                    ["display-text", function () { if (hasCraftingItem(152)) return `你有${textStyle_h3(formatWhole(player.wood.acacia), 'ba5d3b')}金合欢原木` }],
                    ["display-text", function () { if (hasCraftingItem(412)) return `你有${textStyle_h3(formatWhole(player.wood.darkOak), '5b4830')}深色橡木原木` }],
                ],
                buttonStyle() {
                    return {
                        'background-color': '#b8945e'
                    }
                },
            },
            "stone": {
                unlocked() { return tmp.stone.layerShown },
                name() { return '石头' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { if (tmp.stone.layerShown) return `你有${textStyle_h3(formatWhole(player.stone.points), '4a4a4a')}石头` }],
                    "blank",
                    ["display-text", function () { if (hasUpgrade(stone, 23)) return `你有${textStyle_h3(formatWhole(player.stone.dirt), '5f452f')}泥土` }],
                    ["display-text", function () { if (hasUpgrade(stone, 23) && hasMilestone(stone, 0)) return `你有${textStyle_h3(formatWhole(player.stone.sand), 'd6cf97')}沙子` }],
                    ["display-text", function () { if (hasUpgrade(stone, 35) && hasUpgrade(stone, 23)) return `你有 ${textStyle_h3(formatWhole(player.stone.coal), '2e2e2e', 'ffffff')} 煤炭` }],
                    ["display-text", function () { if (hasMilestone(brass, 1)) return `你有${textStyle_h3(formatWhole(player.stone.clay), '8890a9')}粘土球` }],
                    ["display-text", function () { if (hasUpgrade(diamond, 33)) return `你有${textStyle_h3(formatWhole(player.stone.basalt), '5b5b5b')}玄武岩` }],
                    "blank",
                    ["display-text", function () { if (hasNormalAchievement(63)) return `你有${textStyle_h3(fw(player.stone.singularity), '4a4a4a')}石头奇点` }],
                ],
                buttonStyle() {
                    return {
                        'background-color': '#4a4a4a'
                    }
                },
            },
            "copper": {
                unlocked() { return tmp.copper.layerShown },
                name() { return '铜' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { if (tmp.copper.layerShown) return `你有${textStyle_h3(formatWhole(player.copper.ore), 'ffb41d')}铜矿石` }],
                    ["display-text", function () { if (tmp.copper.layerShown) return `你有${textStyle_h3(formatWhole(player.copper.points), 'ffb41d')}铜锭` }],
                    "blank",
                    ["display-text", function () { if (hasNormalAchievement(73)) return `你有${textStyle_h3(fw(singularity(copper)), 'ffb41d')}铜奇点` }],
                ],
                buttonStyle() {
                    return {
                        'background-color': '#ffb41d',
                        'color': '#cd7602',
                    }
                },
            },
            "tin": {
                unlocked() { return tmp.tin.layerShown },
                name() { return '锡' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { if (tmp.tin.layerShown) return `你有${textStyle_h3(formatWhole(player.tin.ore), 'c4dce1')}锡矿石` }],
                    ["display-text", function () { if (tmp.tin.layerShown) return `你有${textStyle_h3(formatWhole(player.tin.points), 'c4dce1')}锡锭` }],
                    "blank",
                    ["display-text", function () { if (hasMilestone(sing_fus, 1)) return `你有${textStyle_h3(fw(singularity(tin)), 'c4dce1')}锡奇点` }],
                ],
                buttonStyle() {
                    return {
                        'background-color': '#c4dce1',
                        'color': '#647a8e',
                    }
                },
            },
            "bronze": {
                unlocked() { return tmp.bronze.layerShown },
                name() { return '青铜' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { if (tmp.bronze.layerShown) return `你有${textStyle_h3(formatWhole(player.bronze.points), 'ffd7a1')}青铜锭` }],
                    "blank",
                    ["display-text", function () { if (hasCraftingItem(92)) return `你有${textStyle_h3(format(player.bronze.power), 'ffd7a1')}青铜力量` }],
                ],
                buttonStyle() {
                    return {
                        'background-color': '#ffd7a1',
                        'color': '#b77b2f',
                    }
                },
            },
            "iron": {
                unlocked() { return tmp.iron.layerShown },
                name() { return '铁' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { if (tmp.iron.layerShown) return `你有${textStyle_h3(formatWhole(player.iron.ore), 'd8d8d8')}铁矿石` }],
                    ["display-text", function () { if (tmp.iron.layerShown) return `你有${textStyle_h3(formatWhole(player.iron.points), 'd8d8d8')}铁锭` }],
                    "blank",
                    ["display-text", function () { return `你有${textStyle_h3(formatWhole(player.iron.water) + " mB", '2b3cf4')}水` }],
                    ["display-text", function () { return `你有${textStyle_h3(formatWhole(player.iron.lava) + " mB", 'd76013')}熔岩` }],
                    "blank",
                    ["display-text", function () { if (hasMilestone(sing_fus, 2)) return `你有${textStyle_h3(fw(singularity(iron)), 'd8d8d8')}铁奇点` }],
                ],
                buttonStyle() {
                    return {
                        'background-color': '#d8d8d8',
                        'color': '#5e5e5e'
                    }
                },
            },
            "nickel": {
                unlocked() { return tmp.nickel.layerShown },
                name() { return '镍' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { if (tmp.nickel.layerShown) return `你有${textStyle_h3(formatWhole(player.nickel.ore), 'fffcc0')}镍矿石` }],
                    ["display-text", function () { if (tmp.nickel.layerShown) return `你有${textStyle_h3(formatWhole(player.nickel.points), 'fffcc0')}镍锭` }],
                    "blank",
                    ["display-text", function () { if (hasMilestone(sing_fus, 3)) return `你有${textStyle_h3(fw(singularity(nickel)), 'fffcc0')}镍奇点` }],
                ],
                buttonStyle() {
                    return {
                        'background-color': '#fffcc0',
                        'color': '#8b8566'
                    }
                },
            },
            "aluminum": {
                unlocked() { return tmp.aluminum.layerShown },
                name() { return '铝' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { if (tmp.aluminum.layerShown) return `你有${textStyle_h3(formatWhole(player.aluminum.ore), 'e2e3ee')}铝矿石` }],
                    ["display-text", function () { if (tmp.aluminum.layerShown) return `你有${textStyle_h3(formatWhole(player.aluminum.points), 'e2e3ee')}铝锭` }],
                    "blank",
                    ["display-text", function () { if (hasMilestone(sing_fus, 4)) return `你有${textStyle_h3(fw(singularity(aluminum)), 'e2e3ee')}铝奇点` }],
                ],
                buttonStyle() {
                    return {
                        'background-color': '#e2e3ee',
                        'color': '#45464b'
                    }
                },
            },
            "lead": {
                unlocked() { return tmp.lead.layerShown },
                name() { return '铅' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { if (tmp.lead.layerShown) return `你有${textStyle_h3(formatWhole(player.lead.ore), '97a9e0')}铅矿石` }],
                    ["display-text", function () { if (tmp.lead.layerShown) return `你有${textStyle_h3(formatWhole(player.lead.points), '97a9e0')}铅锭` }],
                    "blank",
                    ["display-text", function () { if (hasMilestone(sing_fus, 5)) return `你有${textStyle_h3(fw(singularity(lead)), '97a9e0')}铅奇点` }],
                ],
                buttonStyle() {
                    return {
                        'background-color': '#97a9e0',
                        'color': '#667397'
                    }
                },
            },
            "more1": {
                unlocked() { return tmp.lead.layerShown },
                name() { return '更多' },
                content: [
                    ["blank", "15px"],
                    ["microtabs", "world1more1"],
                ],
            },
        },
        world1more1: {
            "constantan": {
                unlocked() { return tmp.constantan.layerShown },
                name() { return '康铜' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { if (tmp.constantan.layerShown) return `你有${textStyle_h3(formatWhole(player.constantan.points), 'eeba4f')}康铜锭` }],
                    "blank",
                    ["display-text", function () { if (hasCraftingItem(202)) return `你有${textStyle_h3(f(player.constantan.essence), 'eeba4f')}康铜精华` }],
                ],
                buttonStyle() {
                    return {
                        'background-color': '#eeba4f',
                        'color': '#7d6233',
                    }
                },
            },
            "invar": {
                unlocked() { return tmp.invar.layerShown },
                name() { return '殷钢' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { if (tmp.invar.layerShown) return `你有${textStyle_h3(formatWhole(player.invar.points), '95a7a1')}殷钢锭` }],
                    "blank",
                    ["display-text", function () { if (hasNormalAchievement(85)) return `你有${textStyle_h3(f(player.invar.energy), '95a7a1')}殷钢能量` }]
                ],
                buttonStyle() {
                    return {
                        'background-color': '#95a7a1',
                        'color': '#697672',
                    }
                },
            },
            "alumbrass": {
                unlocked() { return tmp.alumbrass.layerShown },
                name() { return '铝黄铜' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { if (tmp.alumbrass.layerShown) return `你有${textStyle_h3(formatWhole(player.alumbrass.points), 'f0d467')}铝黄铜锭` }],
                ],
                buttonStyle() {
                    return {
                        'background-color': '#f0d467',
                        'color': '#ab7d1b',
                    }
                },
            },
            "zinc": {
                unlocked() { return tmp.zinc.layerShown },
                name() { return '锌' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { if (tmp.zinc.layerShown) return `你有${textStyle_h3(formatWhole(player.zinc.ore), 'b7e6bf')}锌矿石` }],
                    ["display-text", function () { if (tmp.zinc.layerShown) return `你有${textStyle_h3(formatWhole(player.zinc.points), 'b7e6bf')}锌锭` }],
                    "blank",
                    ["display-text", function () { if (hasMilestone(sing_fus, 6)) return `你有${textStyle_h3(fw(singularity(zinc)), 'b7e6bf')}锌奇点` }],
                ],
                buttonStyle() {
                    return {
                        'background-color': '#b7e6bf',
                        'color': '#4f6c62',
                    }
                },
            },
            "brass": {
                unlocked() { return tmp.brass.layerShown },
                name() { return '黄铜' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { if (tmp.brass.layerShown) return `你有${textStyle_h3(formatWhole(player.brass.points), 'f8ac67')}黄铜锭` }],
                    "blank",
                    ["display-text", function () { if (hasNormalAchievement(103)) return `你有${textStyle_h3(f(tmp.brass.suCur) + "/" + f(tmp.brass.suGain.max(player.brass.max_su)), 'f8ac67')}应力` }],
                ],
                buttonStyle() {
                    return {
                        'background-color': '#f8ac67',
                        'color': '#75452c',
                    }
                },
            },
            "steel": {
                unlocked() { return tmp.steel.layerShown },
                name() { return '钢' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { if (tmp.steel.layerShown) return `你有${textStyle_h3(formatWhole(player.steel.molten) + ' mB', 'a4a4a4')}熔融钢` }],
                    ["display-text", function () { if (tmp.steel.layerShown) return `你有${textStyle_h3(formatWhole(player.steel.points), 'a4a4a4')}钢锭` }],
                ],
                buttonStyle() {
                    return {
                        'background-color': '#a4a4a4',
                        'color': '#414141',
                    }
                },
            },
            "silver": {
                unlocked() { return tmp.silver.layerShown },
                name() { return '银' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { if (tmp.silver.layerShown) return `你有${textStyle_h3(formatWhole(player.silver.ore), 'ddf2f5')}银矿石` }],
                    ["display-text", function () { if (tmp.silver.layerShown) return `你有${textStyle_h3(formatWhole(player.silver.points), 'ddf2f5')}银锭` }],
                    "blank",
                    ["display-text", function () { if (hasCraftingItem(312)) return `你挖掘了${textStyle_h3(formatWhole(player.silver.vein), 'ddf2f5')}个银矿脉` }],
                    "blank",
                    ["display-text", function () { if (hasMilestone(sing_fus, 7)) return `你有${textStyle_h3(fw(singularity(silver)), 'ddf2f5')}银奇点` }],
                ],
                buttonStyle() {
                    return {
                        'background-color': '#ddf2f5',
                        'color': '#5f6465'
                    }
                },
            },
            "gold": {
                unlocked() { return tmp.gold.layerShown },
                name() { return '金' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { if (tmp.gold.layerShown) return `你有${textStyle_h3(formatWhole(player.gold.ore), 'fdf55f')}金矿石` }],
                    ["display-text", function () { if (tmp.gold.layerShown) return `你有${textStyle_h3(formatWhole(player.gold.points), 'fdf55f')}金锭` }],
                    "blank",
                    ["display-text", function () { if (hasCraftingItem(332)) return `你的时钟已经储存了 ${textStyle_h3(ftl(player.gold.stored_time), 'fdf55f')}` }],

                    ["display-text", function () { if (hasMilestone(sing_fus, 8)) return `你有${textStyle_h3(fw(singularity(gold)), 'fdf55f')}金奇点` }],
                ],
                buttonStyle() {
                    return {
                        'background-color': '#fdf55f',
                        'color': '#b26411'
                    }
                },
            },
            "more2": {
                unlocked() { return tmp.gold.layerShown },
                name() { return '更多' },
                content: [
                    ["blank", "15px"],
                    ["microtabs", "world1more2"],
                ],
            },
        },
        world1more2: {
            "electrum": {
                unlocked() { return tmp.electrum.layerShown },
                name() { return '琥珀金' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { if (tmp.electrum.layerShown) return `你有${textStyle_h3(formatWhole(player.electrum.points), 'fffcbc')}琥珀金锭` }],
                ],
                buttonStyle() {
                    return {
                        'background-color': '#fffcbc',
                        'color': '#6c5e23'
                    }
                },
            },
            "redstone": {
                unlocked() { return tmp.redstone.layerShown },
                name() { return '红石' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { if (tmp.redstone.layerShown) return `你有${textStyle_h3(formatWhole(player.redstone.ore), 'fc0000')}红石矿石` }],
                    ["display-text", function () { if (tmp.redstone.layerShown) return `你有${textStyle_h3(formatWhole(player.redstone.points), 'fc0000')}红石粉` }],
                    ["display-text", function () { if (hasUpgrade(redstone, 52)) return `你有${textStyle_h3(formatWhole(player.redstone.molten) + ' mB', 'fc0000')}熔融红石` }],
                    "blank",
                    ["display-text", function () { if (hasUpgrade(redstone, 13)) return `你释放了强度${textStyle_h3(fw(player.redstone.signal), 'fc0000')}的红石信号` }],
                    "blank",
                    ["display-text", function () { if (hasUpgrade(redstone, 21)) return `你最高有${textStyle_h3("时运 " + roman(tmp.redstone.highestFortuneLv), 'fc0000')}` }],
                    "blank",
                    ["display-text", function () { return `你有${textStyle_h3(formatWhole(player.redstone.destabilized), 'fc0000')}不稳红石矿石` }],
                    ["display-text", function () { return `你有${textStyle_h3(formatWhole(player.redstone.destabilized_clathrate), 'fc0000')}不稳红石络合物` }],
                    "blank",
                    ["display-text", function () { if (hasMilestone(sing_fus, 9)) return `你有${textStyle_h3(fw(singularity(redstone)), 'fc0000')}红石奇点` }],
                ],
                buttonStyle() {
                    return {
                        'background-color': '#fc0000',
                        'color': '#710000'
                    }
                },
            },
            "red_ele": {
                unlocked() { return tmp.red_ele.layerShown },
                name() { return '红石琥珀金' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { if (tmp.red_ele.layerShown) return `你有${textResourceStyle(formatWhole(player.red_ele.points), 'text-redstoneElectrum', 'h3')}红石琥珀金锭` }],
                    "blank",
                    ["display-text", function () { if (hasNormalAchievement(137)) return `你有${textResourceStyle(formatWhole(player.red_ele.charged), 'text-redstoneElectrum', 'h3')}充能红石琥珀金锭` }],
                ],
                buttonStyle() {
                    return {
                        'background-color': '#fffcbc',
                        'color': '#fc0000'
                    }
                },
            },
            "platinum": {
                unlocked() { return tmp.platinum.layerShown },
                name() { return '铂' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { if (tmp.platinum.layerShown) return `你有${textResourceStyle(formatWhole(player.platinum.ore), 'text-platinum', 'h3')}铂矿石` }],
                    ["display-text", function () { if (tmp.platinum.layerShown) return `你有${textResourceStyle(formatWhole(player.platinum.points), 'text-platinum', 'h3')}铂锭` }],
                    "blank",
                    ["display-text", function () { if (hasMilestone(sing_fus, 10)) return `你有${textResourceStyle(formatWhole(singularity(platinum)), 'text-platinum', 'h3')}铂奇点` }],
                ],
                buttonStyle() {
                    return {
                        'background-color': '#c8fbff',
                        'color': '#476fbe'
                    }
                },
            },
            "diamond": {
                unlocked() { return tmp.diamond.layerShown },
                name() { return '钻石' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { if (tmp.diamond.layerShown) return `你有${textStyle_h3(formatWhole(player.diamond.ore), 'a2fbea')}钻石矿石` }],
                    ["display-text", function () { if (tmp.diamond.layerShown) return `你有${textStyle_h3(formatWhole(player.diamond.points), 'a2fbea')}钻石` }],
                    "blank",
                    ["display-text", function () { if (hasCraftingItem(431)) return `你有${textStyle_h3(formatWhole(player.diamond.flawless), 'a2fbea')}无暇钻石` }],
                ],
                buttonStyle() {
                    return {
                        'background-color': '#a2fbea',
                        'color': '#137274'
                    }
                },
            },
            "obsidian": {
                unlocked() { return tmp.obsidian.layerShown },
                name() { return '黑曜石' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { if (tmp.obsidian.layerShown) return `你有${textStyle_h3(formatWhole(player.obsidian.points), '392a50')}黑曜石` }],
                    ["display-text", function () { if (hasCraftingItem(451)) return `你有${textStyle_h3(format(player.obsidian.dust), '392a50')}黑曜石粉` }],

                ],
                buttonStyle() {
                    return {
                        'background-color': '#392a50',
                        'color': '#0d0c15'
                    }
                },
            },
            "emerald": {
                unlocked() { return tmp.emerald.layerShown },
                name() { return '绿宝石' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { if (tmp.emerald.layerShown) return `你有${textStyle_h3(formatWhole(player.emerald.ore), '17dd61')}绿宝石矿石` }],
                    ["display-text", function () { if (tmp.emerald.layerShown) return `你有${textStyle_h3(formatWhole(player.emerald.points), '17dd61')}绿宝石` }],
                    "blank",
                    ["display-text", function () { if (hasCraftingItem(472)) return `你有${textStyle_h3(formatWhole(player.emerald.holy), '17dd61')}神圣绿宝石` }],
                ],
                buttonStyle() {
                    return {
                        'background-color': '#17dd61',
                        'color': '#005400'
                    }
                },
            },
            "more3": {
                unlocked() { return tmp.emerald.layerShown },
                name() { return '更多' },
                content: [
                    ["blank", "15px"],
                    ["microtabs", "world1more3"],
                ],
            },
        },
        world1more3: {
            "experience": {
                unlocked() { return tmp.experience.layerShown },
                name() { return '知识精华' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { if (tmp.experience.layerShown) return `你有${textStyle_h3(formatWhole(player.experience.points), 'b2ff59')}知识精华锭` }],
                    "blank",
                    ["display-text", function () { if (hasUpgrade(experience, 12)) return `你有${textStyle_h3(formatWhole(player.experience.crystal), 'b2ff59')}知识水晶` }],
                    ["display-text", function () { if (hasUpgrade(experience, 12)) return `你有${textStyle_h3(format(player.experience.knowledge), 'b2ff59')}知识点数` }],
                ],
                buttonStyle() {
                    return {
                        'background-color': '#b2ff59',
                        'color': '#00000080'
                    }
                },
            },
        },
        craft: {
            "crafting_table": {
                unlocked() { return tmp.crafting_table.layerShown },
                name() { return '合成台' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { if (tmp.crafting_table.layerShown) return `你有${textStyle_h3(formatWhole(player.crafting_table.points), 'b8945e')}合成台` }],
                    "blank",
                ],
                buttonStyle() {
                    return {
                        'background-color': '#b8945e'
                    }
                },
            },
            "furnace": {
                unlocked() { return tmp.furnace.layerShown },
                name() { return '熔炉' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { if (tmp.furnace.layerShown) return `你有${textStyle_h3(formatWhole(player.furnace.points), '4a4a4a')}熔炉` }],
                    "blank",
                    ["display-text", function () { if (hasUpgrade(furnace, 11)) return `你有${textStyle_h3(formatWhole(player.furnace.glass), 'a2cfd6')}玻璃` }],
                    ["display-text", function () { if (hasUpgrade(furnace, 13)) return `你有${textStyle_h3(formatWhole(player.furnace.charcoal), '2b261d', 'ffffff')}木炭` }],
                    ["display-text", function () { if (hasUpgrade(furnace, 24)) return `你有${textStyle_h3(formatWhole(player.furnace.brick), 'c2664f')}红砖` }],
                    ["display-text", function () { if (hasUpgrade(furnace, 25)) return `你有${textStyle_h3(formatWhole(player.furnace.scorched_brick), '3a2f18')}高炉砖` }],
                ],
                buttonStyle() {
                    return {
                        'background-color': '#4a4a4a'
                    }
                },
            },
            "alloy_s": {
                unlocked() { return tmp.alloy_s.layerShown },
                name() { return '合金炉' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { if (tmp.alloy_s.layerShown) return `你有${textStyle_h3(formatWhole(player.alloy_s.points), '40464d')}合金炉` }],
                    "blank",
                    ["display-text", function () { if (hasUpgrade(alloy_s, 23)) return `你有${textStyle_h3(formatWhole(player.alloy_s.hardenedGlass), 'ffffff')}硬化玻璃` }],
                ],
                buttonStyle() {
                    return {
                        'background-color': '#40464d'
                    }
                },
            },
            "blast_furnace": {
                unlocked() { return tmp.blast_furnace.layerShown },
                name() { return '高炉' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { if (tmp.blast_furnace.layerShown) return `高炉建造${textStyle_h3(player.blast_furnace.built ? "已完成" : "未完成", '3a2f18')}` }],
                    "blank",
                ],
                buttonStyle() {
                    return {
                        'background-color': '#3a2f18'
                    }
                },
            },
            "botania": {
                unlocked() { return tmp.botania.layerShown },
                name() { return '植物魔法' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () {
                        return `你有${textStyle_h3(fw(player.botania.pure_daisy), 'ddeaea')}白雏菊`
                    }],
                    ["display-text", function () {
                        return `你有${textStyle_h3(fw(player.botania.endoflame), 'b87c00')}火红莲`
                    }],
                    ["display-text", function () {
                        if (hasUpgrade(experience, 25)) return `你有${textStyle_h3(fw(player.botania.rosa_arcana), 'ff02ff')}阿卡纳蔷薇`
                    }],
                    "blank",
                    ["display-text", function () {
                        if (player.botania.pure_daisy.gte(1)) return `你有${textStyle_h3(fw(player.botania.livingwood), '40190b')}活木`
                    }],
                    ["display-text", function () {
                        if (player.botania.pure_daisy.gte(1)) return `你有${textStyle_h3(fw(player.botania.livingrock), 'c0bca2')}活石`
                    }],
                    ["display-text", function () {
                        if (hasUpgrade(manasteel, 33)) return `你有${textStyle_h3(fw(player.botania.mana_diamond), 'a0f8ff')}魔力钻石`
                    }],
                    ["display-text", function () {
                        if (hasUpgrade(manasteel, 33)) return `你有${textStyle_h3(fw(player.botania.mana_pearl), '0095bc')}魔力珍珠`
                    }],
                ],
                buttonStyle() {
                    return {
                        background: "repeating-linear-gradient(90deg, #1f9000 0%, #1f9000 20%, #80ff00 20%, #80ff00 40%, #1f9000 40%)",
                        color: "#113003",
                    }
                },
            },
        },
        energy: {
            "rf": {
                unlocked() { return tmp.rf.layerShown },
                name() { return '红石通量' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { if (tmp.rf.layerShown) return `你有${textStyle_h3(formatWhole(player.rf.points), 'fc0000')}RF` }],
                    "blank",
                ],
                buttonStyle() {
                    return {
                        'background-color': '#fc0000'
                    }
                },
            },
            "mana": {
                unlocked() { return tmp.mana.layerShown },
                name() { return '魔力' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { if (tmp.mana.layerShown) return `你有${textStyle_h3(formatWhole(player.mana.points), '00bce2')}魔力` }],
                    "blank",
                ],
                buttonStyle() {
                    return {
                        'background-color': '#00bce2'
                    }
                },
            },
        },
        world2: {
            "manasteel": {
                unlocked() { return tmp.manasteel.layerShown },
                name() { return '魔力钢' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { if (tmp.manasteel.layerShown) return `你有${textResourceStyle(formatWhole(player.manasteel.points), 'text-manasteel', 'h3')}魔力钢锭` }],
                ],
                buttonStyle() {
                    return {
                        'background-color': '#005ee0',
                        'color': '#7db4ff'
                    }
                },
            },
            "terrasteel": {
                unlocked() { return tmp.terrasteel.layerShown },
                name() { return '泰拉钢' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { if (tmp.terrasteel.layerShown) return `你有${textResourceStyle(formatWhole(player.terrasteel.points), 'text-terrasteel', 'h3')}泰拉钢锭` }],
                ],
                buttonStyle() {
                    return {
                        'background-color': '#53f900',
                        'color': '#00000080'
                    }
                },
            },
        },
    },
})

function getSafeAsciiChars() {
    let safeChars = '';
    for (let i = 0x21; i <= 0x7f; i++) {
        const char = String.fromCharCode(i);
        // 排除 <, >, &, ", '
        if (!['<', '>', '&', '"', "'"].includes(char)) {
            safeChars += char;
        }
    }
    return safeChars;
}

const safeAsciiChars = getSafeAsciiChars(); // 安全的 ASCII 字符集

function minecraftAsciiGlitch(originalText, possibility) {
    let glitchedText = ""
    for (let i = 0; i < originalText.length; i++) {
        glitchedText += Math.random() < possibility
            ? safeAsciiChars[Math.floor(Math.random() * safeAsciiChars.length)]
            : originalText[i];
    }
    return glitchedText
}

const gameStories = {
    1() {
        return textStyle_story(`你想在自己的宇宙中独立发展探索的愿望实现了。你带了一本书，出现在了一片陌生的平原，同时你的脑海响起了不知为谁的声音：“你来了，挖掘者#${player.stories.glitch[1]}。在这个宇宙中，你需要通过『挖掘』提升自己的能力，在不断发展的时候探索这个宇宙直到终点。”`, 'fcfdf5') + '<br>' +
            textStyle_story('“你在所有的挖掘者中最有希望能到达终点。挖掘者们来自不同的多元宇宙，但是你的能力远远超过其他所有的挖掘者。此后的发展你都可以在书上查阅！从平原上的几棵树开始吧！”', 'fcfdf5') + '<br>' +
            textStyle_story('“此外，看到你的经验值了吗？那就是你进展的最好体现！”于是你的挖掘历程开始了，你向着树走去……', 'fcfdf5')
    },
    2() {
        return textStyle_story(`你开始挖掘树木，获得了木头。你用木头制作了一个合成台，然后你尝试进行合成。`, 'fcfdf5') + '<br>' +
            textStyle_story(`可惜的是，你只能合成木斧，其他的物品比如木镐，你怎么尝试都无法合成。`, 'fcfdf5') + '<br>' +
            textStyle_story(`“想要合成物品，你必须需要拥有对应的图纸，图纸可以使用资源购买。包括后续的资源也需要解锁，比如石头。你现在直接挖掘它是不会产生掉落物的”脑海中响起了一段话`, 'fcfdf5') + '<br>' +
            textStyle_story(`你认识到了这个宇宙的规则，准备进行合成。`, 'fcfdf5')
    },
    3() {
        return textStyle_story(`自从合成木镐之后，地下的探索便有了意义。`, 'fcfdf5') + '<br>' +
            textStyle_story(`但是地下矿洞里几乎全是石头，偶尔有时夹杂着泥土。随着指引，你购买了花费${f(15000)}石头的升级。`, 'fcfdf5') + '<br>' +
            textStyle_story(`购买的升级的一瞬间，眼前的石头竟然有一部分发生了变化！矿石在你的宇宙中生成了。`, 'fcfdf5')
    },
    4() {
        return textStyle_story(`你把挖掘到的铜矿石放入熔炉中熔炼，获得了铜锭。`, 'fcfdf5') + '<br>' +
            textStyle_story(`“在一般情况下挖掘的矿石需要熔炼熔炼矿锭，但是随着进度推进，你会遇到更多获取方式的矿锭。”`, 'fcfdf5') + '<br>' +
            textStyle_story(`锡现已解锁。就和铜矿石一样，部分石头被替换成了锡矿石。`, 'fcfdf5')
    },
    5() {
        return textStyle_story(`将3个铜锭与1个锡锭放入合金炉，你得到了青铜锭。`, 'fcfdf5') + '<br>' +
            textStyle_story(`“挖矿宇宙并非只有挖掘。冒险、科技和魔法，都是发展中必不可少的一部分。你想，要是只有挖矿，岂不是很枯燥？”`, 'fcfdf5') + '<br>' +
            textStyle_story(`“当你第一次合金得到青铜锭，你就已经是前0.1%的挖掘者了。而且，你到此所花费的时间是最短的。”`, 'fcfdf5')
    },
    6() {
        return textStyle_story(`随着进度的推进，矿洞中矿石的种类越来越丰富。并且最开始的矿物已经基本达成自由获取的状态。`, 'fcfdf5') + '<br>' +
            textStyle_story(`你通过记忆尝试让水接触熔岩源头。可惜的是，熔岩源头变成了一个问号方块。你知道这个东西是黑曜石，但是你无法挖掘或者使用。`, 'fcfdf5') + '<br>' +
            textStyle_story(`通过奇点凝聚器，你聚合了奇点。它们进一步提升了你的资源数量。`, 'fcfdf5')
    },
    7() {
        return textStyle_story(`不是所有资源都能通过单方块来制作。`, 'fcfdf5') + '<br>' +
            textStyle_story(`下一个目标是铸造钢铁，但是钢不能通过合金炉获取，你需要高炉。`, 'fcfdf5') + '<br>' +
            textStyle_story(`没有什么难事，不过是一个多方块结构。`, 'fcfdf5')
    },
    8() {
        return textStyle_story(`你通过铜和锌合金出黄铜，`, 'fcfdf5') + '<br>' +
            textStyle_story(`你通过水车、风车和蒸汽轮机产生应力。`, 'fcfdf5') + '<br>' +
            textStyle_story(`现在，金、银矿石出现在你的宇宙中。`, 'fcfdf5') + '<br>' +
            textStyle_story(`你想前往下界和猪灵交易，但是回去造下界传送门的时候你发现自己的那块黑曜石还是六面问号。`, 'fcfdf5')
    },
    9() {
        return textStyle_story(`和往常一样进入矿洞，你发现了一个红色的，微微冒光的矿石。`, 'fcfdf5') + '<br>' +
            textStyle_story(`挖掉它不会保留原矿，但是掉落出了一撮红色的粉。`, 'fcfdf5') + '<br>' +
            textStyle_story(`“红石信号，红石机械，生存电路。毫无疑问，红石的出现是伟大的。”`, 'fcfdf5')
    },
    10() {
        return textStyle_story(`液态红石和琥珀金形成的合金有优秀的导电性。`, 'fcfdf5') + '<br>' +
            textStyle_story(`你甚至可以在含有红石琥珀金材料的工具上消耗RF来代替耐久。`, 'fcfdf5') + '<br>' +
            textStyle_story(`因此，太阳能板能保证这些工具近似达到“不可破坏”。`, 'fcfdf5')
    },
    11() {
        return textStyle_story(`你从未走出过这片平原，因为外界有着很强大的怪物。`, 'fcfdf5') + '<br>' +
            textStyle_story(`你合成了RF生物群系指南针。你选择了神秘森林。指针开始运转，它向你指明了前往神秘森林的一条安全路线。`, 'fcfdf5') + '<br>' +
            textStyle_story(`最终，你到达了神秘森林。在那里，你发现了……`, 'fcfdf5')
    },
    12() {
        return textStyle_story(`神秘森林弥漫着魔力的气息。你采集了一些魔力花。`, 'fcfdf5') + '<br>' +
            textStyle_story(`随着指引，你一系列地制造了部分植物魔法器具，创造出了火红莲。`, 'fcfdf5') + '<br>' +
            textStyle_story(`你现在有能力生产魔力了。随后，你在魔力池中积累了${f(3000)}魔力，你将一块铁锭投入魔力池，不可思议的一幕发生了……`, 'fcfdf5')
    },
    13() {
        return textStyle_story(`魔力钢也只是魔力合金的起点。`, 'fcfdf5') + '<br>' +
            textStyle_story(`钻石也开始在你的宇宙中生成了。`, 'fcfdf5') + '<br>' +
            textStyle_story(`“得到钻石，你就已经是前0.00000001%的挖掘者了。更直观的话，${fesn(1e8)}%。别忘了，挖掘者们来自不同的多元宇宙。数量远比你想象的多。”`, 'fcfdf5')
    },
    14() {
        return textStyle_story(`终于，你在合成钻石镐后挖下了第一块黑曜石，它第一次以物品形式出现在你的背包里。`, 'fcfdf5') + '<br>' +
            textStyle_story(`你立刻挖掘了10个黑曜石并摆出下界传送门的形状。点火却发现传送门并没有亮起。`, 'fcfdf5') + '<br>' +
            textStyle_story(`“很遗憾，进入下界之前，你需要合成一个叫做‘暮色之庇护’的东西。这对你的进度来说还远。”`, 'fcfdf5') + '<br>' +
            textStyle_story(`“既然那个指南针将你指引向高山群系的村庄，那就去吧！以你的资源和村民们讲价没有什么问题的！”`, 'fcfdf5')
    },
    15() {
        return textStyle_story(`你拥有了固化经验的能力。`, 'fcfdf5') + '<br>' +
            textStyle_story(`你发现它能够带你突破${f(d(10).pow(Number.MAX_VALUE))}经验。`, 'fcfdf5') + '<br>' +
            textStyle_story(`经验的二重数量级在它的帮助之下疯狂增长。`, 'fcfdf5') + '<br>' +
            textStyle_story(`最终，你通过魔力发现还有一个叫“泰拉凝聚板”的东西，能够合成出比魔力钢锭更强的合金`, 'fcfdf5') + '<br>' +
            textStyle_story(`但是你发现，为了合成它，而必须要去战斗了……`, 'fcfdf5')
    },
}

const actTitle = {
    1: "挖掘之始",
    2: "流程与解锁",
    3: "深入地下",
    4: "熔炼和锻造",
    5: "合金！",
    6: "矿物多样性",
    7: "多方块搭建",
    8: "白银和黄金",
    9: "初遇红石",
    10: "红石兵工厂",
    11: "冒险旅途",
    12: "初探魔力",
    13: "闪耀的宝石",
    14: "下界的拒绝",
    15: "必需的战斗",
}

function gameStory() {
    player.stories.newStory = false
    Modal.show({
        color: '#fcfdf5',
        title() { return `<text style='color:#fcfdf5'> 主线剧情 > 第 ` + player.stories.storyShowing + ` 幕</text>` },
        text() { return gameStories[player.stories.storyShowing]() },
        buttons: {
            1: {
                text: `01`,
                onClick() {
                    player.stories.storyShowing = 1
                },
                unlocked() { return true }
            },
            2: {
                text: `02`,
                onClick() {
                    player.stories.storyShowing = 2
                },
                unlocked() { return player.stories.storyUnlocked >= 2 }
            },
            3: {
                text: `03`,
                onClick() {
                    player.stories.storyShowing = 3
                },
                unlocked() { return player.stories.storyUnlocked >= 3 }
            },
            4: {
                text: `04`,
                onClick() {
                    player.stories.storyShowing = 4
                },
                unlocked() { return player.stories.storyUnlocked >= 4 }
            },
            5: {
                text: `05`,
                onClick() {
                    player.stories.storyShowing = 5
                },
                unlocked() { return player.stories.storyUnlocked >= 5 }
            },
            6: {
                text: `06`,
                onClick() {
                    player.stories.storyShowing = 6
                },
                unlocked() { return player.stories.storyUnlocked >= 6 }
            },
            7: {
                text: `07`,
                onClick() {
                    player.stories.storyShowing = 7
                },
                unlocked() { return player.stories.storyUnlocked >= 7 }
            },
            8: {
                text: `08`,
                onClick() {
                    player.stories.storyShowing = 8
                },
                unlocked() { return player.stories.storyUnlocked >= 8 }
            },
            9: {
                text: `09`,
                onClick() {
                    player.stories.storyShowing = 9
                },
                unlocked() { return player.stories.storyUnlocked >= 9 }
            },
            10: {
                text: `10`,
                onClick() {
                    player.stories.storyShowing = 10
                },
                unlocked() { return player.stories.storyUnlocked >= 10 }
            },
            11: {
                text: `11`,
                onClick() {
                    player.stories.storyShowing = 11
                },
                unlocked() { return player.stories.storyUnlocked >= 11 }
            },
            12: {
                text: `12`,
                onClick() {
                    player.stories.storyShowing = 12
                },
                unlocked() { return player.stories.storyUnlocked >= 12 }
            },
            13: {
                text: `13`,
                onClick() {
                    player.stories.storyShowing = 13
                },
                unlocked() { return player.stories.storyUnlocked >= 13 }
            },
            14: {
                text: `14`,
                onClick() {
                    player.stories.storyShowing = 14
                },
                unlocked() { return player.stories.storyUnlocked >= 14 }
            },
            15: {
                text: `15`,
                onClick() {
                    player.stories.storyShowing = 15
                },
                unlocked() { return player.stories.storyUnlocked >= 15 }
            },
        }
    })
}

//杂项层2：故事
addLayer("stories", {
    name: "stories",
    position: -5,
    row: 1,
    symbol() { return '故事' },// Set true to generate a slightly different layer
    // Change layer button' style
    startData() {
        return {
            unlocked: true,
            points: new ExpantaNum(0),// This actually does nothing, but you have to write this. (Unless you want add something in this layer. #Todo, might change that later.)
            newStory: false,
            storyShowing: 1,
            storyUnlocked: 1,
            glitch: {
                1: "",
                2: "",
                3: "",
                4: "",
                5: "",
                6: "",
                7: "",
                8: "",
                9: "",
                10: "",
            }
        }
    },
    resource: "",
    color: "#fcfdf5",
    type: "none",
    tooltip() { return false },
    layerShown() { return true },// If any layer in the array is unlocked, it will returns true. Otherwise it will return false.

    doReset() { return undefined },

    storyPending() {
        let condition = [true,
            hasCraftingItem(11),
            tmp.copper.layerShown,
            (player.tin.found || player.tin.ore.gte(1) || hasNormalAchievement(36)),
            player.bronze.best.gte(1),
            hasNormalAchievement(73),
            player.blast_furnace.built,
            player.gold.best.gte(1),
            hasUpgrade(redstone, 13),
            hasCraftingItem(352),
            hasCraftingItem(371),
            player.manasteel.best.gte(1),
            player.diamond.best.gte(1),
            hasUpgrade(emerald, 15),
            player.map.battle.drops.ender_pearl.gte(1),
        ]
        let story = 1
        for (let i = 1; i < condition.length; i++) {
            if (condition[i]) story += 1
        }

        return story
    },

    clickables: {
        11: {
            title() {
                let t = "剧情"
                return t
            },
            display() {
                let d = ""
                if (player.stories.newStory) d += "新剧情解锁！"
                return d
            },
            canClick() {
                return true
            },
            onClick() {
                gameStory()
            },
            unlocked() {
                return true
            },
            style() {
                return {
                    'border-radius': '100%',
                    'font-size': '12px',
                    width: '100px',
                    'min-height': '100px',
                }
            },
        }
    },

    update(diff) {
        if (Modal.showing && player.stories.storyShowing == 1) {
            player.stories.glitch[1] = minecraftAsciiGlitch('1.595169643e712,471,117', 0.95)
        }

        if (tmp.stories.storyPending > player.stories.storyUnlocked) {
            player.stories.storyUnlocked = tmp.stories.storyPending;
            player.stories.newStory = true
            doPopup(type = "none", text = "<br>第 " + formatWhole(player.stories.storyUnlocked) + " 幕：" + `${actTitle[player.stories.storyUnlocked]}`, title = "解锁新剧情！", timer = 5, color = "#fcfdf5")
        }
    },

    tabFormat: [
        ["display-text", function () { return getPointsDisplay() }],
        "blank",
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "stories": {
                unlocked() { return true },
                name() { return '主剧情' },
                content: [
                    ["blank", "15px"],
                    ["raw-html", function () {
                        let text = `<span>剧情</span>`
                        if (player.stories.newStory) text += `<span style='color: red; font-size: 12px'>新剧情解锁！</span>`
                        return `<div class = " upgTable upg tooltipBox can showStoryButton" onclick = "gameStory()">${text}</div>`
                    }],
                ]
            },

        },
    },
})

function hasNormalAchievement(id) {
    return hasAchievement('achievements', id)
}

//杂项层3：成就
addLayer("achievements", {
    name: "achievements",
    position: -4,
    row: 1,
    symbol() { return '成就' },// Set true to generate a slightly different layer
    // Change layer button' style
    startData() {
        return {
            unlocked: true,
            points: new ExpantaNum(0),// This actually does nothing, but you have to write this. (Unless you want add something in this layer. #Todo, might change that later.)
            secret: d(0),
            normal: [],
            SA6: false,
        }
    },
    resource: "成就点数",
    color: "#ffe125",
    type: "none",
    tooltip() { return false },
    layerShown() { return true },// If any layer in the array is unlocked, it will returns true. Otherwise it will return false.

    doReset() { return undefined },

    achievements: {
        11: {
            name: "第一步",
            tooltip: "获得1木头 <br> 奖励：1成就点数",
            done() { return player.wood.points.gte(1) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(1)
            },
        },
        12: {
            name: "手搓合成",
            tooltip: "解锁合成台 <br> 奖励：1成就点数",
            done() { return hasUpgrade(wood, 15) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(1)
            },
        },
        13: {
            name: "结束手搓",
            tooltip: "获得1合成台 <br> 奖励：1成就点数<br>现在成就点数可以倍增经验获取",
            done() { return player.crafting_table.points.gte(1) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(1)
            },
        },
        14: {
            name: "工具是必要的",
            tooltip: "合成木斧 <br> 奖励：2成就点数<br>",
            done() { return hasCraftingItem(11) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(2)
            },
        },
        15: {
            name: "叮铃铃！",
            tooltip: "到达等级5 <br> 奖励：2成就点数<br>",
            done() { return player.level.gte(5) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(2)
            },
        },
        16: {
            name: "斧头无法胜任的工作",
            tooltip: "解锁石头 <br> 奖励：3成就点数<br>",
            done() { return hasUpgrade(wood, 25) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(3)
            },
        },
        17: {
            name: "击碎岩石",
            tooltip: "合成木镐 <br> 奖励：3成就点数<br>",
            done() { return hasCraftingItem(12) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(3)
            },
        },
        21: {
            name: "获得升级",
            tooltip: "合成石镐 <br> 奖励：4成就点数<br>解锁第3排木头升级",
            done() { return hasCraftingItem(22) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(4)
            },
        },
        22: {
            name: "图纸",
            tooltip: "解锁合成台图纸 <br> 奖励：6成就点数",
            done() { return hasUpgrade(wood, 35) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(6)
            },
        },
        23: {
            name: "终极有序合成",
            tooltip: "获得81合成台 <br> 奖励：1成就点数",
            done() { return player.crafting_table.points.gte(81) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(1)
            },
        },
        24: {
            name: "Cu",
            tooltip: "解锁铜层级 <br> 奖励：10成就点数",
            done() { return hasUpgrade(stone, 25) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(10)
            },
        },
        25: {
            name: "高温熔炼",
            tooltip: "解锁熔炉 <br> 奖励：12成就点数",
            done() { return hasUpgrade(ct, 12) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(12)
            },
        },
        26: {
            name: "取其精华",
            tooltip: "获得1铜锭 <br> 奖励：14成就点数",
            done() { return player.copper.points.gte(1) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(14)
            },
        },
        27: {
            name: "获得升级^2",
            tooltip: "合成铜镐 <br> 奖励：20成就点数",
            done() { return hasCraftingItem(41) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(20)
            },
        },
        31: {
            name: "SiO<sub>2</sub>",
            tooltip: "熔炼得到1玻璃 <br> 奖励：30成就点数",
            done() { return player.furnace.glass.gte(1) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(30)
            },
        },
        32: {
            name: "不用再像无头苍蝇一样乱找了！",
            tooltip: "合成铜制探矿杖 <br> 奖励：40成就点数",
            done() { return hasCraftingItem(42) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(40)
            },
        },
        33: {
            name: "开始发电！",
            tooltip: "解锁红石通量<br> 奖励：90成就点数",
            done() { return hasCraftingItem(61) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(90)
            },
        },
        34: {
            name: "Sn",
            tooltip: "解锁锡层级 <br> 奖励：160成就点数",
            done() { return hasUpgrade(copper, 25) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(160)
            },
        },
        35: {
            name: "Googol",
            tooltip: "获得1.0000e100经验 <br> 奖励：320成就点数",
            done() { return player.points.gte(1e100) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(320)
            },
        },
        36: {
            name: "N合一",
            tooltip: "解锁合金炉 <br> 奖励：600成就点数",
            done() { return hasUpgrade(tin, 15) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(600)
            },
        },
        37: {
            name: "初级合金",
            tooltip: "解锁青铜 <br> 奖励：1,280成就点数<br>解锁石头层级前3种资源获取自动化，允许你通过RF升级倍增RF获取",
            done() { return hasUpgrade(alloy_s, 11) },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(1280)
            },
        },
        41: {
            name: "储能的用处",
            tooltip: "使得RF净增长为负数 <br> 奖励：2,025成就点数<br>解锁青铜升级",
            done() { return tmp.rf.netGrowth.lt(0) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(2025)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(21)
            },
        },
        42: {
            name: "GTNH?",
            tooltip: "制作青铜外壳 <br> 奖励：5,000成就点数<br>解锁青铜升级",
            done() { return hasCraftingItem(91) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(2000)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(21)
            },
        },
        43: {
            name: "这才是增量游戏独有的东西",
            tooltip: "获得1青铜力量 <br> 奖励：25,000成就点数<br>解锁青铜升级",
            done() { return player.bronze.power.gte(1) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(25000)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(21)
            },
        },
        44: {
            name: "增量特有的爆炸性增长",
            tooltip: "获得1.1111e111青铜力量 <br> 奖励：67,000成就点数",
            done() { return player.bronze.power.gte(1.1111e111) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(67000)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(21)
            },
        },
        45: {
            name: "叮铃铃x10",
            tooltip: "到达等级50 <br> 奖励：202,411成就点数",
            done() { return player.level.gte(50) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(202411)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(21)
            },
        },
        46: {
            name: "Fe",
            tooltip: "解锁铁层级 <br> 奖励：1,241,317成就点数<br>解锁一个RF强化和自动化",
            done() { return hasUpgrade(bronze, 25) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(1241317)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(21)
            },
        },
        47: {
            name: "前往无限！",
            tooltip: "获得1.7976e308经验 <br> 奖励：9,402,011成就点数",
            done() { return player.points.gte(d(Number.MAX_VALUE)) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(9402011)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(21)
            },
        },
        51: {
            name: "相煎何太急",
            tooltip: "获得1个木炭 <br> 奖励：20,190,628成就点数",
            done() { return player.furnace.charcoal.gte(1) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(20190628)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(21)
            },
        },
        52: {
            name: "来硬的",
            tooltip: "获得1个铁锭 <br> 奖励：123,456,789成就点数",
            done() { return player.iron.points.gte(1) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(123456789)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(21)
            },
        },
        53: {
            name: "这不是铁镐吗？",
            tooltip: "合成铁镐 <br> 奖励：1,000,000,000成就点数",
            done() { return hasCraftingItem(111) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(1e9)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(21)
            },
        },
        54: {
            name: "比经验还多？",
            tooltip: "获得1.0000e400青铜力量 <br> 奖励：7,777,777,777成就点数",
            done() { return player.bronze.power.gte('1e400') && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(7777777777)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(21)
            },
        },
        55: {
            name: "木炭自由！",
            tooltip: "开启木炭熔炼自动化 <br> 奖励：77,777,777,777成就点数",
            done() { return RFAutobuyerActivated(10003) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(77777777777)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(21)
            },
        },
        56: {
            name: "热腾腾的",
            tooltip: "用铁桶捞起第一桶熔岩(1000mB) <br> 奖励：1.0000e12成就点数<br>mB就是毫桶(millibucket)，玩整合包玩的",
            done() { return player.iron.lava.gte(1000) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(1e12)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(21)
            },
        },
        57: {
            name: "Ni",
            tooltip: "挖掘获得1个镍矿石 <br> 奖励：1.0000e13成就点数",
            done() { return player.nickel.ore.gte(1) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(1e13)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(21)
            },
        },
        61: {
            name: "机械部件",
            tooltip: "合成1个镍齿轮 <br> 奖励：1.0000e14成就点数",
            done() { return player.crafting_table.items[141].gte(1) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(1e14)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(21)
            },
        },
        62: {
            name: "挑战者",
            tooltip: "完成镍-挑战：力量削弱1次 <br> 奖励：3.0000e15成就点数",
            done() { return player.nickel.challenges[11] >= 1 && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(3e15)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(21)
            },
        },
        63: {
            name: "奇点",
            tooltip: "获得1.7976e308石头 <br> 奖励：9.0000e16成就点数<br>解锁凝聚奇点-石头",
            done() { return player.stone.points.gte(Number.MAX_VALUE) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(9e16)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(21)
            },
        },
        64: {
            name: "Al",
            tooltip: "获得1铝矿石 <br> 奖励：1.0000e20成就点数",
            done() { return player.aluminum.ore.gte(1) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(1e20)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(21)
            },
        },
        65: {
            name: "不用再来一遍了！……吗？",
            tooltip: "完成10次镍层级挑战 <br> 奖励：1.0000e25成就点数",
            done() { return d(player.nickel.challenges[11] + player.nickel.challenges[12]).gte(10) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(1e25)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(21)
            },
        },
        66: {
            name: "不用再来一遍了！",
            tooltip: "在所有青铜力量强化器总等级不超过50（免费等级不计入）的情况下，获得1.0000e299青铜力量<br> 奖励：1.0000e40成就点数",
            done() { return ((getBuyableAmount(bronze, 11).add(getBuyableAmount(bronze, 12)).add(getBuyableAmount(bronze, 13)).add(getBuyableAmount(bronze, 21)).lte(50)) && player.bronze.power.gte(1e299)) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(1e40)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(21)
            },
        },
        67: {
            name: "比铁斧更轻",
            tooltip: "合成铝斧<br> 奖励：1.0000e50成就点数",
            done() { return hasCraftingItem(152) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(1e50)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(21)
            },
        },
        71: {
            name: "Millillion",
            tooltip: "获得1.000e3,003经验<br> 奖励：1.0000e60成就点数",
            done() { return player.points.gte('1e3003') && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(1e60)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(42)
            },
        },
        72: {
            name: "Pb",
            tooltip: "获得1铅矿石<br> 奖励：1.0000e70成就点数",
            done() { return player.lead.ore.gte(1) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(1e70)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(42)
            },
        },
        73: {
            name: "“中子态素压缩机”",
            tooltip: "解锁奇点凝聚器层级<br> 奖励：1.0000e80成就点数",
            done() { return hasCraftingItem(172) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(1e80)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(42)
            },
        },
        74: {
            name: "工具2合1",
            tooltip: "合成铅锤<br> 奖励：1.0000e90成就点数",
            done() { return hasCraftingItem(181) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(1e90)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(42)
            },
        },
        75: {
            name: "另一种铜合金",
            tooltip: "解锁康铜层级<br> 奖励：1.0000e100成就点数",
            done() { return hasUpgrade(lead, 31) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(1e100)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(42)
            },
        },
        76: {
            name: "成就点数的加成占比是不是有点太多了？",
            tooltip: "到达等级725<br> 奖励：1.0000e115成就点数",
            done() { return player.level.gte(725) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(1e115)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(42)
            },
        },
        77: {
            name: "OoM暴涨？",
            tooltip: "获得第9康铜升级<br> 奖励：1.0000e125成就点数",
            done() { return hasUpgrade(constantan, 24) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(1e125)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(42)
            },
        },
        81: {
            name: "这样下去资源会无限暴涨的！",
            tooltip: "获得1.0000e214康铜精华<br> 奖励：1.0000e140成就点数",
            done() { return player.constantan.essence.gte(1e214) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(1e140)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(42)
            },
        },
        82: {
            name: "我早就设定了购买上限",
            tooltip: "取得Lv.2000的康铜精华倍增<br> 奖励：1.0000e150成就点数",
            done() { return player.constantan.buyables[11].gte(2000) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(1e150)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(42)
            },
        },
        83: {
            name: "曾经叫做……因瓦合金",
            tooltip: "获得1殷钢锭<br> 奖励：1.0000e155成就点数",
            done() { return player.invar.points.gte(1) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(1e155)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(42)
            },
        },
        84: {
            name: "熔岩之源",
            tooltip: "开启熔岩炉<br> 奖励：1.0000e160成就点数",
            done() { return RFAutobuyerActivated(62) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(1e160)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(42)
            },
        },
        85: {
            name: "维度，启动！",
            tooltip: "合成殷钢维度启动器<br> 奖励：1.0000e170成就点数",
            done() { return hasCraftingItem(251) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(1e170)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(42)
            },
        },
        86: {
            name: "维度提升都搬？",
            tooltip: "殷钢维度提升1次<br> 奖励：1.0000e180成就点数",
            done() { return getBuyableAmount(invar, 51).gte(1) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(1e180)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(42)
            },
        },
        87: {
            name: "第9维度，仍然是个谎言",
            tooltip: "殷钢维度提升5次<br> 奖励：1.0000e190成就点数",
            done() { return getBuyableAmount(invar, 51).gte(5) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(1e190)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(42)
            },
        },
        91: {
            name: "无限，意味着价格疯涨",
            tooltip: "获得1.7976e308殷钢能量<br> 奖励：1.0000e200成就点数",
            done() { return player.invar.energy.gte(Number.MAX_VALUE) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(1e200)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(42)
            },
        },
        92: {
            name: "这也是一种黄铜",
            tooltip: "解锁铝黄铜层级<br> 奖励：1.0000e205成就点数",
            done() { return hasUpgrade(invar, 42) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(1e205)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(42)
            },
        },
        93: {
            name: "匠魂浇铸",
            tooltip: "获得锭铸模<br> 奖励：1.0000e210成就点数",
            done() { return player.alumbrass.cast.ingot && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(1e210)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(42)
            },
        },
        94: {
            name: "之前的金属镐头都是硬核手搓的吗？",
            tooltip: "获得镐头铸模<br> 奖励：1.0000e215成就点数",
            done() { return player.alumbrass.cast.pickaxe_head && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(1e215)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(42)
            },
        },
        95: {
            name: "Zn",
            tooltip: "解锁锌层级<br> 奖励：1.0000e220成就点数",
            done() { return hasUpgrade(alumbrass, 31) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(1e220)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(42)
            },
        },
        96: {
            name: "增长还是不够夸张",
            tooltip: "购买第10锌升级<br> 奖励：1.0000e225成就点数",
            done() { return hasUpgrade(zinc, 25) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(1e225)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(42)
            },
        },
        97: {
            name: "机械动力常客",
            tooltip: "解锁黄铜层级<br> 奖励：1.0000e230成就点数",
            done() { return hasUpgrade(zinc, 31) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(1e230)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(42)
            },
        },
        101: {
            name: "机械化生产",
            tooltip: "合成黄铜合成站<br> 奖励：1.0000e236成就点数",
            done() { return hasCraftingItem(271) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(1e235)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(63)
            },
        },
        102: {
            name: "传递力量",
            tooltip: "合成黄铜齿轮<br> 奖励：1.0000e240成就点数<br>5倍黄铜锭合金倍率",
            done() { return hasCraftingItem(281) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(1e240)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(63)
            },
        },
        103: {
            name: "储存力量",
            tooltip: "合成应力表<br> 奖励：1.0000e243成就点数",
            done() { return hasCraftingItem(291) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(1e243)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(63)
            },
        },
        104: {
            name: "等级套娃",
            tooltip: "获得应力升级[a1]<br> 奖励：1.0000e246成就点数",
            done() { return hasUpgrade(brass, 'a1') && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(1e246)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(63)
            },
        },
        105: {
            name: "一劳永逸",
            tooltip: "获得第2黄铜里程碑<br> 奖励：1.0000e250成就点数",
            done() { return hasMilestone(brass, 1) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(1e250)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(63)
            },
        },
        106: {
            name: "并非原版高炉",
            tooltip: "解锁高炉层级<br> 奖励：1.0000e260成就点数",
            done() { return hasUpgrade(furnace, 25) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(1e260)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(63)
            },
        },
        107: {
            name: "钢铁洪流",
            tooltip: "获得1钢锭<br> 奖励：1.0000e270成就点数",
            done() { return player.steel.points.gte(1) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(1e270)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(63)
            },
        },
        111: {
            name: "真正的木炭自由",
            tooltip: "合成钢熔炉<br> 奖励：1.0000e280成就点数",
            done() { return hasCraftingItem(302) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(1e280)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(63)
            },
        },
        112: {
            name: "Maximus-million",
            tooltip: "获得1.00e1,000,000经验<br> 奖励：1.0000e290成就点数",
            done() { return player.points.gte('1e1000000') && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(1e290)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(63)
            },
        },
        113: {
            name: "Ag",
            tooltip: "解锁银层级<br> 奖励：1.0000e300成就点数",
            done() { return hasUpgrade(steel, 25) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add(1e300)
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(63)
            },
        },
        114: {
            name: "挖矿，此刻具象化了",
            tooltip: "挖掘1个银矿脉<br> 奖励：1.0000e320成就点数",
            done() { return player.silver.vein.gte(1) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add('1e320')
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(63)
            },
        },
        115: {
            name: "Au",
            tooltip: "获得1金矿石<br> 奖励：1.0000e350成就点数",
            done() { return player.gold.ore.gte(1) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add('1e350')
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(63)
            },
        },
        116: {
            name: "猪灵：Where?",
            tooltip: "获得1金锭<br> 奖励：1.0000e375成就点数",
            done() { return player.gold.points.gte(1) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add('1e375')
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(63)
            },
        },
        117: {
            name: "百爆玩家",
            tooltip: "锌矿石的连锁率到达100%<br> 奖励：1.0000e400成就点数",
            done() { return tmp.zinc.chainChance.gte(1) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add('1e400')
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(63)
            },
        },
        121: {
            name: "瞬挖，爽！",
            tooltip: "合成金镐（你不需要担心原版MC金镐的低耐久）<br> 奖励：1.0000e450成就点数",
            done() { return hasCraftingItem(322) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add('1e450')
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(63)
            },
        },
        122: {
            name: "存活千年/1000年生きてる",
            tooltip: "使时钟储存一千年时间<br> 奖励：1.0000e500成就点数",
            done() { return player.gold.stored_time.gte(3.1556952e10) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add('1e500')
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(63)
            },
        },
        123: {
            name: "传导材料",
            tooltip: "解锁琥珀金层级<br> 奖励：1.0000e600成就点数<br>解锁二阶等级",
            done() { return hasUpgrade(gold, 41) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add('1e600')
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(63)
            },
        },
        124: {
            name: "百万等级计划",
            tooltip: "到达等级1,000,000<br> 奖励：1.0000e750成就点数",
            done() { return player.level.gte(1000000) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add('1e750')
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(63)
            },
        },
        125: {
            name: "Trialogue",
            tooltip: "获得e10,000,000,000经验<br> 奖励：1.0000e900成就点数",
            done() { return player.points.gte('ee10') && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add('1e900')
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(63)
            },
        },
        126: {
            name: "科技的起源",
            tooltip: "解锁红石层级<br> 奖励：1.000e1,100成就点数",
            done() { return hasCraftingItem(351) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add('1e1100')
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(63)
            },
        },
        127: {
            name: "红石块的释放信号",
            tooltip: "释放强度至少为15的红石信号<br> 奖励：1.000e1,300成就点数",
            done() { return player.redstone.signal.gte(15) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add('1e1300')
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(63)
            },
        },
        131: {
            name: "你取得了进度 [附魔师]",
            tooltip: "进行一次时运附魔<br> 奖励：1.000e1,600成就点数",
            done() { return tmp.redstone.highestFortuneLv.gte(1) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add('1e1600')
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(84)
            },
        },
        132: {
            name: "原矿收集者",
            tooltip: "获得1个红石矿石<br> 奖励：1.000e2,000成就点数",
            done() { return player.redstone.ore.gte(1) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add('1e2000')
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(84)
            },
        },
        133: {
            name: "不稳定之物",
            tooltip: "获得1个不稳红石矿石<br> 奖励：1.000e2,500成就点数",
            done() { return player.redstone.destabilized.gte(1) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add('1e2500')
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(84)
            },
        },
        134: {
            name: "RF可充能",
            tooltip: "解锁红石琥珀金层级<br> 奖励：1.000e3,000成就点数",
            done() { return hasUpgrade(redstone, 53) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add('1e3000')
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(84)
            },
        },
        135: {
            name: "星系生成器到不了的彼岸",
            tooltip: "获得e9.0000e15经验<br> 奖励：1.000e4,000成就点数<br>第1红石升级的效果再次变为原来的^3.2",
            done() { return player.points.gte('e9e15') && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add('1e4000')
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(84)
            },
        },
        136: {
            name: "额外等级卡升级上限≠正常合成等级上限",
            tooltip: "到达最高拥有时运XXII<br> 奖励：1.000e5,000成就点数<br><br><i>“这个成就何尝不是一种提示呢？”</i>",
            done() { return tmp.redstone.highestFortuneLv.gte(22) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add('1e5000')
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(84)
            },
        },
        137: {
            name: "RF高速公路",
            tooltip: "合成1红石琥珀金传导线圈<br> 奖励：1.000e7,500成就点数",
            done() { return hasCraftingItem(362) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add('1e7500')
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(84)
            },
        },
        141: {
            name: "/locate biome",
            tooltip: "合成RF生物群系指南针<br> 奖励：1.000e10,000成就点数",
            done() { return hasCraftingItem(371) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add('1e10000')
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(84)
            },
        },
        142: {
            name: "花瓣白如雪",
            tooltip: "在神秘森林的探索中发现了白色神秘花<br> 奖励：1.000e15,000成就点数",
            done() { return player.map.botania.flower.white[0].gte(1) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add('1e15000')
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(84)
            },
        },
        143: {
            name: "~花~妖~胎~",
            tooltip: "合成花药台<br> 奖励：1.000e20,000成就点数",
            done() { return hasCraftingItem(372) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add('1e20000')
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(84)
            },
        },
        144: {
            name: "魔力也是一种能源",
            tooltip: "解锁魔力层级<br> 奖励：1.000e30,000成就点数",
            done() { return hasCraftingItem(382) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add('1e30000')
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(84)
            },
        },
        145: {
            name: "魔力灌注金属材料",
            tooltip: "解锁魔力钢层级<br> 奖励：1.000e50,000成就点数",
            done() { return hasUpgrade(mana, 11) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add('1e50000')
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(84)
            },
        },
        146: {
            name: "Pt",
            tooltip: "解锁铂层级<br> 奖励：1.00e100,000成就点数",
            done() { return hasCraftingItem(401) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add('1e100000')
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(84)
            },
        },
        147: {
            name: "不过是一块碳而已",
            tooltip: "获得1钻石<br> 奖励：1.00e180,000成就点数",
            done() { return player.diamond.points.gte(1) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add('1e180000')
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(84)
            },
        },
        151: {
            name: "冰桶挑战",
            tooltip: "获得1黑曜石<br> 奖励：1.00e360,000成就点数",
            done() { return player.obsidian.points.gte(1) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add('1e360000')
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(84)
            },
        },
        152: {
            name: "不可说不可说转",
            tooltip: "获得不可说不可说转经验（约e3.72183882e37）<br> 奖励：1.00e720,000成就点数",
            done() { return player.points.gte(d(10).pow(d(7).times(d(2).pow(122)))) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add('1e720000')
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(84)
            },
        },
        153: {
            name: "完美主义者",
            tooltip: "挖掘三阶无暇钻石<br> 奖励：1.00e1,440,000成就点数",
            done() { return player.diamond.t3flawless && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add('1e1440000')
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(84)
            },
        },
        154: {
            name: "矿锭粉末",
            tooltip: "合成磨粉机<br> 奖励：1.00e3,250,000成就点数",
            done() { return hasCraftingItem(451) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add('1e3250000')
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(84)
            },
        },
        155: {
            name: "时运 M<span style=\"text-decoration:overline\">V</span>",
            tooltip: "最高的时运附魔等级到达Lv.4,000<br> 奖励：1.0e10,000,000成就点数",
            done() { return tmp.redstone.highestFortuneLv.gte(4000) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add('ee7')
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(84)
            },
        },
        156: {
            name() { return "Be" + quickSUB('3') + 'Al' + quickSUB('2') + '(SiO' + quickSUB('3') + ')' + quickSUB('6') },
            tooltip: "解锁绿宝石层级<br> 奖励：1.0e30,000,000成就点数",
            done() { return hasUpgrade(obsidian, 35) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add('e3e7')
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(84)
            },
        },
        157: {
            name: "Googolplex",
            tooltip: "获得e1.0000e100经验<br> 奖励：1.0e100,000,000成就点数",
            done() { return player.points.gte('ee100') && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add('ee8')
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(84)
            },
        },
        161: {
            name: "成交！",
            tooltip: "通过村民交易获得绿宝石<br> 奖励：e1,000,000,000成就点数",
            done() { return hasUpgrade(emerald, 15) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add('ee9')
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(105)
            },
        },
        162: {
            name: "九九八十一网格",
            tooltip: "时运界面的版面到达9x9大小<br> 奖励：e10,000,000,000成就点数<br>自动购买最大“时运等级保底机制”",
            done() { return getBuyableAmount(redstone, 11).gte(6) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add('ee10')
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(105)
            },
        },
        163: {
            name: "break_infinity.js的上限",
            tooltip: "获得e1.7977e308经验<br> 奖励：1.0e100,000,000,000成就点数",
            done() { return player.points.gte('e1.797693e308') && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add('ee11')
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(105)
            },
        },
        164: {
            name: "经验即为知识",
            tooltip: "解锁知识精华层级<br> 奖励：e1.0000e12成就点数",
            done() { return hasUpgrade(emerald, 35) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add('ee12')
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(105)
            },
        },
        165: {
            name: "更多彩的森林",
            tooltip: "采集到紫色、粉色和黄绿色的神秘花（必须同时有至少1个，拆解就不算了）<br> 奖励：e1.0000e15成就点数",
            done() { return player.map.botania.flower.purple[0].gte(1) && player.map.botania.flower.pink[0].gte(1) && player.map.botania.flower.lime[0].gte(1) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add('ee15')
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(105)
            },
        },
        166: {
            name: "Killillion",
            tooltip: "获得e3.000e3,003经验<br> 奖励：e1.0000e20成就点数",
            done() { return player.points.gte('e3e3003') && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add('ee20')
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(105)
            },
        },
        167: {
            name: "战斗时机已至",
            tooltip: "解锁战斗<br> 奖励：e1.0000e30成就点数",
            done() { return hasCraftingItem(491) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add('ee30')
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(105)
            },
        },
        171: {
            name: "这就是植物魔法的强力合金！",
            tooltip: "解锁泰拉钢层级<br> 奖励：e1.0000e40成就点数",
            done() { return hasUpgrade(manasteel, 35) && this.unlocked() },
            onComplete() {
                return player.achievements.points = player.achievements.points.add('ee40')
            },
            unlocked() {
                return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(105)
            },
        },
        //隐藏成就
        //虽然原则上不允许偷看源代码查看怎么完成隐藏成就但是我也管不到你就是了（乐）
        100011: {
            name: "刷那么多干啥？",
            tooltip: "同时持有超过1000个青铜外壳 <br><br> <i>“这个游戏真用不到那么多，又不是什么高肝度科技整合包”</i>",
            done() { return player.crafting_table.items[91].gte(1000) },
            onComplete() {
                return player.achievements.secret = player.achievements.secret.add(1)
            },
            unlocked() { return hasAchievement('achievements', this.id) },
        },
        /*100012: {
            name: "重置眼花缭乱",
            tooltip: "在使用Emoji记数法时进行300次合成台重置 <br><br> <i>“只要用得够久，就可以阅读它”</i>",
            done() { return player.crafting_table.emojiNotationResets.gte(300) },
            onComplete() {
                return player.achievements.secret = player.achievements.secret.add(1)
            },
            unlocked() { return hasAchievement('achievements', this.id) },
        },*/
        100013: {
            name: "臭小子",
            tooltip: "尝试在导入存档处散播恶臭 <br><br> <i>“这小子在尝试导入雪（悲）”</i>",
            done() { return player.homo },
            onComplete() {
                return player.achievements.secret = player.achievements.secret.add(1)
            },
            unlocked() { return hasAchievement('achievements', this.id) },
        },
        100014: {
            name: "停下！你个作弊者！",
            tooltip: "打开控制台 <br><br> <i>“检测的是F12键，虽然你想改就随便改就是了(doge)”</i>",
            done() { return player.console },
            onComplete() {
                return player.achievements.secret = player.achievements.secret.add(1)
            },
            unlocked() { return hasAchievement('achievements', this.id) },
        },
        100015: {
            name: "钟表变色的瞬间",
            tooltip: "刚好在早上6点或者傍晚18点的瞬间看着时钟页面 <br><br> <i>“你在等待什么？”</i>",
            done() {
                let date = new Date()
                let h = date.getHours()
                let m = date.getMinutes()
                let s = date.getSeconds()
                return (h == 6 || h == 18) && m == 0 && s == 0 && player.tab == 'gold' && player.subtabs.gold.stuff == "the_clock"
            },
            onComplete() {
                return player.achievements.secret = player.achievements.secret.add(1)
            },
            unlocked() { return hasAchievement('achievements', this.id) },
        },
        100016: {
            name: "你被骗了！",
            tooltip: "你按照新闻上所写的做了，并尝试直接跳到版本终点。 <br><br> <i>“We are strangers to love...”</i>",
            done() { return player.achievements.SA6 },
            onComplete() {
                return player.achievements.secret = player.achievements.secret.add(1)
            },
            unlocked() { return hasAchievement('achievements', this.id) },
        },
        100017: {
            name: "转瞬即逝",
            tooltip: "积累了1小时的离线进度，然后开启了100x游戏速度，将离线进度瞬间花完。<br>奖励：离线时间储存的上限增加到2小时 <br><br> <i>“我刚才到底在干什么？”</i>",
            done() { return false }, //其他激活方式
            onComplete() {
                return player.achievements.secret = player.achievements.secret.add(1)
            },
            unlocked() { return hasAchievement('achievements', this.id) },
        },
        100021: {
            name: "熔岩烤鸡",
            tooltip() { return `吃掉熔岩烤鸡。<br><br> <i>“𝅘𝅥 𝅘𝅥 𝅘𝅥 La-la-la-lava, ch-ch-ch-chicken<br>Steve's Lava Chicken, yeah, it's tasty as hell<br>Ooh, mamacita, now you're ringing the bell<br>Crispy and juicy, now you're having a snack<br>Ooh, super spicy, it's a lava attack~~~ 𝅘𝅥 𝅘𝅥 𝅘𝅥”</i><br><br>总共吃掉了${textStyle_h3(fw(player.StevesLavaChicken), 'cb7c49')}只熔岩烤鸡` },
            done() { return false }, //其他激活方式
            onComplete() {
                return player.achievements.secret = player.achievements.secret.add(1)
            },
            unlocked() { return hasAchievement('achievements', this.id) },
        },
        100022: {
            name: "幸运时刻",
            tooltip: "你每秒有1/86,400的概率获得这个成就。 <br><br> <i>“换算过来就是你游玩的前24小时约有1-(1/e)的概率获得该成就”</i>",
            done() { return player.random > 0 && player.random <= 25 / 216 }, //甚至约分
            onComplete() {
                return player.achievements.secret = player.achievements.secret.add(1)
            },
            unlocked() { return hasAchievement('achievements', this.id) },
        },
    },

    effect() {
        let eff
        let stage1 = player.achievements.points.max(1)
        if (hasUpgrade(aluminum, 24)) stage1 = stage1.pow(upgradeEffect(aluminum, 24))
        if (stage1.gte('1e120000')) stage1 = stage1.div('1e120000').pow(0.25).times('1e120000') //软上限1

        let stage2 = player.achievements.points.max(10).log10().div(18000)

        eff = stage1 //钻石合成台之前：倍数加成
        if (hasCraftingItem(422)) eff = stage2
        return eff
    },

    effectDescription() {
        let des
        if (hasNormalAchievement(13)) des = `倍增经验获取 ${textStyle_h2(format(tmp.achievements.effect) + "x", 'ffe125')}`
        if (hasCraftingItem(422)) des = `第1红石升级的效果变为 ${textStyle_h2("^" + format(tmp.achievements.effect), 'ffe125')}`
        if (hasUpgrade(experience, 32)) des = `经验的硬上限变为 ${textStyle_h2("^" + format(tmp.achievements.effect), 'ffe125')}`
        return des
    },

    hotkeys: [
        { key: "w", description: "W: 切换到上一层级（区域显示层无效）", onPress() { jumpToNextLayer('up') } },
        { key: "s", description: "S: 切换到下一层级（区域显示层无效）", onPress() { jumpToNextLayer('down') } },
        { key: "F12", description: "", onPress() { player.console = true } },
        { key: "n", description: "", onPress() { if (player.devmode) player.NaNpause = d(NaN) } },
    ],

    tabFormat: [
        ["display-text", function () { return getPointsDisplay() }],
        "blank",
        "main-display",
        ["display-text", function () { if (tmp.achievements.effect.gte('1e120000') && !hasCraftingItem(422)) return `由于成就点数的效果超过了1.00e120,000，因此受软上限限制！` }],
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "normal_achievement": {
                unlocked() { return true },
                name() { return '普通成就' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { return "成就每次解锁3行，完成1~3行成就解锁4~6行成就，完成1~6行成就解锁7~9行成就，以此类推" }],
                    "blank",
                    ["achievements", [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40]],
                ]
            },
            "secret_achievement": {
                unlocked() { return true },
                name() { return '隐藏成就' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { return `你完成了 ${textStyle_h2(fw(player.achievements.secret), 'a080ff')} 个隐藏成就` }],
                    "blank",
                    ["achievements", [10001, 10002, 10003, 10004, 10005, 10006, 10007, 10008, 10009, 10010]],
                ]
            },
        },
    },
})

function locationName(name, colored = false) {
    let namesEN = ['overworld', 'nether', 'the_end', 'twilight_forest', 'aether', 'abyssal_wasteland', 'dreadlands']
    let namesZH = ['主世界', '下界', '末地', '暮色森林', '天境', '深渊荒原', '恐惧之地']
    let colors = ['548049', '', '', '', '', '', '']
    let nameZH = namesZH[namesEN.indexOf(name)]
    if (colored) return textStyle_h3(nameZH, colors[namesEN.indexOf(name)])
    else return nameZH
}

function locationName_h3(name) {
    let namesEN = ['overworld', 'nether', 'the_end', 'twilight_forest', 'aether', 'abyssal_wasteland', 'dreadlands']
    let namesZH = ['主世界', '下界', '末地', '暮色森林', '天境', '深渊荒原', '恐惧之地']
    let colors = ['548049', '', '', '', '', '', '']
    let nameZH = namesZH[namesEN.indexOf(name)]
    return textStyle_h3(nameZH, colors[namesEN.indexOf(name)])
}

function isAtLocation(location) {
    return location == player.map.location
}

//杂项层4：时间跃迁
addLayer("offline_progress", {
    name: "offline_progress",
    position: -3,
    row: 1,
    symbol() { return '时间跃迁' },// Set true to generate a slightly different layer
    // Change layer button' style
    startData() {
        return {
            unlocked: true,
            points: new ExpantaNum(0),// This actually does nothing, but you have to write this. (Unless you want add something in this layer. #Todo, might change that later.)
        }
    },
    resource: "",
    color: "#b2ff59",
    type: "none",
    tooltip() { return false },
    layerShown() { return true },// If any layer in the array is unlocked, it will returns true. Otherwise it will return false.

    doReset() { return undefined },

    clickables: {
        11: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = "恢复正常"
                return d
            },
            canClick() { return player.gameSpeed != 1 },
            onClick() {
                player.gameSpeed = 1
            },
            unlocked() { return true },
            style() {
                return {
                    'min-height': '50px',
                    'width': '120px',
                    'font-size': '20px'
                }
            },
        },
        12: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = "2x"
                return d
            },
            canClick() { return player.gameSpeed != 2 && player.offTime.remain >= 60 && options.offlineProd },
            onClick() {
                player.gameSpeed = 2
            },
            unlocked() { return true },
            style() {
                return {
                    'min-height': '50px',
                    'width': '120px',
                    'font-size': '20px'
                }
            },
        },
        13: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = "3x"
                return d
            },
            canClick() { return player.gameSpeed != 3 && player.offTime.remain >= 60 && options.offlineProd },
            onClick() {
                player.gameSpeed = 3
            },
            unlocked() { return true },
            style() {
                return {
                    'min-height': '50px',
                    'width': '120px',
                    'font-size': '20px'
                }
            },
        },
        14: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = "4x"
                return d
            },
            canClick() { return player.gameSpeed != 4 && player.offTime.remain >= 60 && options.offlineProd },
            onClick() {
                player.gameSpeed = 4
            },
            unlocked() { return true },
            style() {
                return {
                    'min-height': '50px',
                    'width': '120px',
                    'font-size': '20px'
                }
            },
        },
        21: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = "5x"
                return d
            },
            canClick() { return player.gameSpeed != 5 && player.offTime.remain >= 60 && options.offlineProd },
            onClick() {
                player.gameSpeed = 5
            },
            unlocked() { return true },
            style() {
                return {
                    'min-height': '50px',
                    'width': '120px',
                    'font-size': '20px'
                }
            },
        },
        22: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = "10x"
                return d
            },
            canClick() { return player.gameSpeed != 10 && player.offTime.remain >= 60 && options.offlineProd },
            onClick() {
                player.gameSpeed = 10
            },
            unlocked() { return true },
            style() {
                return {
                    'min-height': '50px',
                    'width': '120px',
                    'font-size': '20px'
                }
            },
        },
        23: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = "25x"
                return d
            },
            canClick() { return player.gameSpeed != 25 && player.offTime.remain >= 60 && options.offlineProd },
            onClick() {
                player.gameSpeed = 25
            },
            unlocked() { return true },
            style() {
                return {
                    'min-height': '50px',
                    'width': '120px',
                    'font-size': '20px'
                }
            },
        },
        24: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = "100x"
                return d
            },
            canClick() { return player.gameSpeed != 100 && player.offTime.remain >= 60 && options.offlineProd },
            onClick() {
                if (player.offTime.remain >= 3600 && !hasAchievement('achievements', 100017)) doPopup("achievement", tmp.achievements.achievements[100017].name, "获得成就!", 3, tmp.achievements.color),
                    player.achievements.achievements.push(100017),
                    player.achievements.secret = player.achievements.secret.add(1)
                player.gameSpeed = 100
            },
            unlocked() { return true },
            style() {
                return {
                    'min-height': '50px',
                    'width': '120px',
                    'font-size': '20px'
                }
            },
        },
    },

    update(diff) {
        if (!options.offlineProd) player.gameSpeed = 1
    },

    offlineLimit() { //将离线时间上限转到这里控制
        let limit = 1
        if (hasAchievement('achievements', 100017)) limit = 2
        return limit
    },

    tabFormat: [
        ["display-text", function () { return getPointsDisplay() }],
        "blank",
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "warp": {
                unlocked() { return true },
                name() { return '跃迁' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { return `你当前离线了${textStyle_h3(formatTime(player.offTime.remain * 1000), 'b2ff59')}` }],
                    ["display-text", function () { return `离线时间储存上限为${textStyle_h3(formatTime(tmp.offline_progress.offlineLimit * 3600000), 'b2ff59')}` }],
                    ["display-text", function () { if (player.gameSpeed > 1) return `你的游戏速度为${textStyle_h3(f(player.gameSpeed) + 'x', 'b2ff59')}，每现实一秒消耗${textStyle_h3(formatTime(gameSpeedCost() * 1000), 'b2ff59')}的离线时间` }],
                    "blank",
                    ["clickables", [1]],
                    "blank",
                    ["clickables", [2]],
                    "blank",
                    ["display-text", function () { return `你离线的时候可以储存离线时间，消耗离线时间可以给游戏加速` }],
                    ["display-text", function () { return `你需要拥有超过1分钟的离线时间才能开启时间加速` }],
                    ["display-text", function () { return `消耗离线时间的速度公式：(游戏速度-1)<sup>2</sup>秒/现实秒` }],
                    ["display-text", function () { return `提示：游戏速度会影响到限时挑战相关的计时器，进行挑战前请将游戏速度恢复正常` }],
                    ["display-text", function () { return `部分机制性计时器的速度不受游戏速度影响` }],
                    ["display-text", function () { if (!options.offlineProd) return `你关闭了离线进度，时间跃迁不可用` }],
                ]
            },

        },
    },
})

const enemies = {
    enderman: {
        name: "末影人",
        hp: d(40),
        atk: d(7),
        def: d(0),
        drops: "ender_pearl",
        dropsZH: "末影珍珠",
        drop_gain: function () {
            let gain = d(1)
            gain = gain.times(tmp.map.battle.LUCK.add(1))
            return gain
        },
        attack_time: 3, //攻击间隔时间（秒）
        appear_location: ['overworld', 'nether', 'the_end'], //出现的地点
    },
}

function startBattle(enemy) {
    if (player.map.battle.enemy) return //如果已经在战斗中则不再开始新的战斗
    if (!enemies[enemy]) return //如果敌人不存在
    player.map.battle.enemy = enemy
    player.map.battle.enemy_hp = enemies[enemy].hp
    player.map.battle.enemy_attack_time = enemies[enemy].attack_time
}

function escapeBattle() {
    player.map.battle.enemy = undefined
    player.map.battle.enemy_hp = d(-1)
    player.map.battle.enemy_attack_time = -1
}

function winBattle() {
    if (!player.map.battle.enemy) return //如果没有敌人则不进行战斗胜利处理
    let enemy = player.map.battle.enemy
    let drops = enemies[enemy].drops
    let dropsZH = enemies[enemy].dropsZH || drops //如果没有设置中文名称则使用英文名称
    let drop_gain = enemies[enemy].drop_gain()
    player.map.battle.drops[drops] = player.map.battle.drops[drops].add(drop_gain)
    player.map.battle.battleText = [`你击败了${enemies[enemy].name}，获得了${fw(drop_gain)}个${dropsZH}`].concat(player.map.battle.battleText.slice(0, 9))
    player.map.battle.enemy_hp = enemies[enemy].hp //重置敌人血量
    player.map.battle.enemy_attack_time = enemies[enemy].attack_time //重置敌人攻击间隔时间
}

function loseBattle() {
    if (!player.map.battle.enemy) return //如果没有敌人则不进行战斗失败处理
    player.map.battle.battleText = [`你被${enemies[player.map.battle.enemy].name}击败了，等待复活...`].concat(player.map.battle.battleText.slice(0, 9))
    player.map.battle.revival = d(10) //设置复活时间为10秒
    escapeBattle() //清除战斗状态
}

function enemyInfo() {
    let info = ''
    info += `<h3>${enemies[player.map.battle.enemy].name}</h3>`
    info += `<br><p>HP: ${f(player.map.battle.enemy_hp)} / ${f(enemies[player.map.battle.enemy].hp)}</p>`
    info += `<br><p>ATK: ${f(enemies[player.map.battle.enemy].atk)}</p>`
    info += `<br><p>DEF: ${f(enemies[player.map.battle.enemy].def)}</p>`
    info += `<br><p>攻击间隔: ${f(player.map.battle.enemy_attack_time)} / ${f(enemies[player.map.battle.enemy].attack_time)}秒</p>`
    info += `<br><p>掉落物: ${enemies[player.map.battle.enemy].dropsZH || enemies[player.map.battle.enemy].drops}</p>`
    info += `<br><p>掉落物获取量: ${fw(enemies[player.map.battle.enemy].drop_gain())}</p>`
    return info
}

function battleText() {
    let text = ''
    text += player.map.battle.battleText.join('<br>')
    return text
}

function enemyClickablesText(enemy) {
    let text = `<h3>${enemies[enemy].name}</h3>`
    text += `<br><br><p>HP: ${f(enemies[enemy].hp)}</p>`
    text += `<br><p>ATK: ${f(enemies[enemy].atk)}</p>`
    text += `<br><p>DEF: ${f(enemies[enemy].def)}</p>`
    text += `<br><p>攻击间隔: ${f(enemies[enemy].attack_time)} 秒</p>`
    text += `<br><p>掉落物: ${enemies[enemy].dropsZH || enemies[enemy].drops}</p>`
    text += `<br><p>掉落物获取量: ${fw(enemies[enemy].drop_gain())}</p>`
    text += `<br><p>出现地点: ${enemies[enemy].appear_location.map(l => locationName(l, false)).join(', ')}</p>`
    return text
}

//杂项层5：地图
addLayer("map", {
    name: "map",
    position: -2,
    row: 1,
    symbol() { return '地图' },// Set true to generate a slightly different layer
    // Change layer button' style
    startData() {
        return {
            unlocked: true,
            points: new ExpantaNum(0),// This actually does nothing, but you have to write this. (Unless you want add something in this layer. #Todo, might change that later.)
            location: 'overworld',
            botania: {
                explore: "empty",
                exploreCooldown: d(0),
                exploreText: ["", "", "", "", ""],
                flower: {
                    white: [d(0), d(0)], //神秘花array[0]代表花[1]代表花瓣
                    lightgray: [d(0), d(0)],
                    red: [d(0), d(0)],
                    brown: [d(0), d(0)],
                    purple: [d(0), d(0)],
                    pink: [d(0), d(0)],
                    lime: [d(0), d(0)],
                },
            },
            battle: {
                enemy: undefined,
                curHP: d(20),
                atkCooldown: d(0),
                revival: d(-1), //复活时间
                battleText: ["", "", "", "", "", "", "", "", "", ""],
                drops: {
                    ender_pearl: d(0)
                },
                enemy_hp: d(-1), //敌人当前血量
                enemy_attack_time: -1,
            },
        }
    },
    resource: "地图",
    color: "#548049",
    type: "none",
    tooltip() { return false },
    layerShown() { return true },// If any layer in the array is unlocked, it will returns true. Otherwise it will return false.

    doReset() { return undefined },

    clickables: {
        overworld: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = "主世界"
                return d
            },
            canClick() { return isAtLocation('overworld') && !player.map.battle.enemy },
            onClick() {
                player.map.location = 'overworld'
            },
            unlocked() { return true },
            styleClass() { return "background-overworld" },
            style() {
                return {
                    'min-height': '180px',
                    'width': '180px',
                    'font-size': '20px',
                    'border': 'none',
                    'border-radius': '0px',
                }
            },
        },

        //神秘森林探索
        11: {
            title() {
                let t = "探索神秘森林"
                return t
            },
            display() {
                let cd = hasUpgrade(manasteel, 23) ? 1 : 3
                let d = `探索冷却：${ftl(player.map.botania.exploreCooldown)}/${ftl(cd)}`
                return d
            },
            canClick() { return player.map.botania.exploreCooldown.eq(0) },
            onClick() {
                let range = [-1, 80, 85, 90, 95, 100]
                if (hasUpgrade(manasteel, 14)) range = [-1, 40, 55, 70, 85, 100] //魔力钢升级序号14（第4）增加神秘花获取概率
                if (hasUpgrade(experience, 25)) range = [-1, 37, 46, 55, 64, 73, 82, 91, 100] //知识精华升级序号25（第10）增加紫、粉、黄绿三种神秘花
                let found = ["", "", "white", "lightgray", "red", "brown", "purple", "pink", "lime"]
                let foundZH = ["", "", "白色神秘花", "淡灰色神秘花", "红色神秘花", "棕色神秘花", "紫色神秘花", "粉色神秘花", "黄绿色神秘花"]
                let id = 0
                let random = Math.random() * 100
                while (random > range[id]) id++
                if (id < 2) player.map.botania.exploreText = ["你在神秘森林中闲逛，什么都没有发现"].concat(player.map.botania.exploreText.slice(0, 4))
                else if (id >= 2) player.map.botania.flower[found[id]][0] = player.map.botania.flower[found[id]][0].add(tmp.map.flowerMult),
                    player.map.botania.exploreText = [`你在神秘森林中发现了${foundZH[id]}，+${fw(tmp.map.flowerMult)}${foundZH[id]}`].concat(player.map.botania.exploreText.slice(0, 4))

                let cd = hasUpgrade(manasteel, 23) ? 1 : 3
                player.map.botania.exploreCooldown = d(cd)
            },
            unlocked() { return hasCraftingItem(371) },
            style() {
                return {
                    'min-height': '100px',
                    'width': '200px',
                    'border-radius': '5px',
                }
            },
        },
        21: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = `拆解1个白色神秘花<br>获得2个白色神秘花瓣`
                return d
            },
            canClick() { return player.map.botania.flower.white[0].gte(1) },
            onClick() {
                player.map.botania.flower.white[0] = player.map.botania.flower.white[0].sub(1),
                    player.map.botania.flower.white[1] = player.map.botania.flower.white[1].add(2)
            },
            unlocked() { return hasCraftingItem(371) },
            styleClass: "mysticalFlowerClickables",
            style() {
                if (this.canClick()) return { 'background-color': '#ddeaea' }
            },
        },
        22: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = `拆解1个淡灰色神秘花<br>获得2个淡灰色神秘花瓣`
                return d
            },
            canClick() { return player.map.botania.flower.lightgray[0].gte(1) },
            onClick() {
                player.map.botania.flower.lightgray[0] = player.map.botania.flower.lightgray[0].sub(1),
                    player.map.botania.flower.lightgray[1] = player.map.botania.flower.lightgray[1].add(2)
            },
            unlocked() { return hasCraftingItem(371) },
            styleClass: "mysticalFlowerClickables",
            style() {
                if (this.canClick()) return { 'background-color': '#737373' }
            },
        },
        23: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = `拆解1个红色神秘花<br>获得2个红色神秘花瓣`
                return d
            },
            canClick() { return player.map.botania.flower.red[0].gte(1) },
            onClick() {
                player.map.botania.flower.red[0] = player.map.botania.flower.red[0].sub(1),
                    player.map.botania.flower.red[1] = player.map.botania.flower.red[1].add(2)
            },
            unlocked() { return hasCraftingItem(371) },
            styleClass: "mysticalFlowerClickables",
            style() {
                if (this.canClick()) return { 'background-color': '#a00019' }
            },
        },
        24: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = `拆解1个棕色神秘花<br>获得2个棕色神秘花瓣`
                return d
            },
            canClick() { return player.map.botania.flower.brown[0].gte(1) },
            onClick() {
                player.map.botania.flower.brown[0] = player.map.botania.flower.brown[0].sub(1),
                    player.map.botania.flower.brown[1] = player.map.botania.flower.brown[1].add(2)
            },
            unlocked() { return hasCraftingItem(371) },
            styleClass: "mysticalFlowerClickables",
            style() {
                if (this.canClick()) return { 'background-color': '#5e3c24' }
            },
        },
        31: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = `拆解1个紫色神秘花<br>获得2个紫色神秘花瓣`
                return d
            },
            canClick() { return player.map.botania.flower.purple[0].gte(1) },
            onClick() {
                player.map.botania.flower.purple[0] = player.map.botania.flower.purple[0].sub(1),
                    player.map.botania.flower.purple[1] = player.map.botania.flower.purple[1].add(2)
            },
            unlocked() { return hasUpgrade(experience, 25) },
            styleClass: "mysticalFlowerClickables",
            style() {
                if (this.canClick()) return { 'background-color': '#8932b8' }
            },
        },
        32: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = `拆解1个粉色神秘花<br>获得2个粉色神秘花瓣`
                return d
            },
            canClick() { return player.map.botania.flower.pink[0].gte(1) },
            onClick() {
                player.map.botania.flower.pink[0] = player.map.botania.flower.pink[0].sub(1),
                    player.map.botania.flower.pink[1] = player.map.botania.flower.pink[1].add(2)
            },
            unlocked() { return hasUpgrade(experience, 25) },
            styleClass: "mysticalFlowerClickables",
            style() {
                if (this.canClick()) return { 'background-color': '#f38baa' }
            },
        },
        33: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = `拆解1个黄绿色神秘花<br>获得2个黄绿色神秘花瓣`
                return d
            },
            canClick() { return player.map.botania.flower.lime[0].gte(1) },
            onClick() {
                player.map.botania.flower.lime[0] = player.map.botania.flower.lime[0].sub(1),
                    player.map.botania.flower.lime[1] = player.map.botania.flower.lime[1].add(2)
            },
            unlocked() { return hasUpgrade(experience, 25) },
            styleClass: "mysticalFlowerClickables",
            style() {
                if (this.canClick()) return { 'background-color': '#80c71f' }
            },
        },
        41: {
            title() {
                let t = "逃跑"
                return t
            },
            display() {
                return `如果你觉得打不过敌人，可以选择逃跑`
            },
            canClick() { return player.map.battle.enemy },
            onClick() {
                escapeBattle() //逃跑
            },
            unlocked() { return hasCraftingItem(491) },
            styleClass: "attackClickables",
        },
        42: {
            title() {
                let t = "攻击"
                return t
            },
            display() {
                return `攻击敌人，造成伤害`
            },
            canClick() { return player.map.battle.enemy && player.map.battle.atkCooldown.eq(0) && player.map.battle.curHP.gt(0) && player.map.battle.enemy_hp.gt(0) },
            onClick() {
                player.map.battle.enemy_hp = player.map.battle.enemy_hp.sub(tmp.map.battle.ATK.sub(enemies[player.map.battle.enemy].def)).max(0) //攻击敌人
                player.map.battle.atkCooldown = tmp.map.atkspd //设置攻击冷却
            },
            unlocked() { return hasCraftingItem(491) },
            styleClass: "attackClickables",
        },
        51: {
            title() {
                let t = ""
                return t
            },
            display() {
                return enemyClickablesText('enderman')
            },
            canClick() { return !player.map.battle.enemy && (isAtLocation('overworld') || isAtLocation('nether') || isAtLocation('the_end')) && player.map.battle.revival.eq(-1) },
            onClick() {
                startBattle('enderman')
            },
            unlocked() { return hasCraftingItem(491) },
            styleClass: "enemyClickables",
            style() {
                if (this.canClick()) return { 'background-color': '#105e51' }
            },
        },
    },

    flowerMult() {
        let m = d(1)
        if (hasUpgrade(manasteel, 23)) m = m.times(upgradeEffect(manasteel, 23))
        return m
    },

    update(diff) {
        if (player.map.botania.exploreCooldown.gt(0)) player.map.botania.exploreCooldown = player.map.botania.exploreCooldown.sub(diff).max(0)

        let pb = player.map.battle
        let tb = tmp.map.battle
        if (pb.curHP.lt(tb.HP) && pb.curHP.gt(0)) {
            if (pb.enemy) player.map.battle.curHP = player.map.battle.curHP.add(tb.HP.div(50).times(diff)).min(tb.HP) //战斗中50s回满
            else player.map.battle.curHP = player.map.battle.curHP.add(tb.HP.div(5).times(diff)).min(tb.HP) //脱战5s回满
        }
        else if (pb.curHP.lte(0)) {
            if (pb.revival.eq(-1)) loseBattle()
            else if (pb.revival.gt(0)) player.map.battle.revival = pb.revival.sub(diff).max(0)
            else if (pb.revival.eq(0)) {
                player.map.battle.curHP = tb.HP //复活后生命值回满
                player.map.battle.enemy = undefined //复活后清除敌人
                player.map.battle.atkCooldown = d(0) //复活后清除攻击冷却
                player.map.battle.revival = d(-1) //复活时间-1表示没死
            }
        }
        if (pb.atkCooldown.gt(0)) player.map.battle.atkCooldown = pb.atkCooldown.sub(diff).max(0)
        if (pb.enemy_hp.eq(0)) {
            winBattle() //如果敌人血量为0则胜利
        }
        if (pb.enemy_attack_time == 0) {
            player.map.battle.curHP = pb.curHP.sub(enemies[pb.enemy].atk.sub(tb.DEF)).max(0) //敌人攻击
            player.map.battle.enemy_attack_time = enemies[pb.enemy].attack_time //重置
        }
        if (pb.enemy_attack_time > 0) {
            player.map.battle.enemy_attack_time = Math.max(pb.enemy_attack_time - diff, 0) //减少敌人攻击时间
        }
    },

    battle: {
        HP() { //生命上限
            let hp = d(20)
            return hp
        },
        ATK() { //攻击力
            let atk = d(1)
            if (hasCraftingItem(491)) atk = atk.add(6)
            return atk
        },
        DEF() { //防御力
            let def = d(0)
            return def
        },
        LUCK() { //幸运值
            let luck = d(0)
            return luck
        },
        SPD() { //速度
            let spd = d(1.25)
            return spd
        },
    },

    atkspd() { //攻击速度
        let atkspd = d(1).div(tmp.map.battle.SPD)
        return atkspd
    },

    tabFormat: [
        ["display-text", function () { return getPointsDisplay() }],
        ["display-text", function () { return `当前位置：${locationName_h3(player.map.location)}` }],
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "map": {
                unlocked() { return true },
                name() { return '地图' },
                content: [
                    ["blank", "15px"],
                    ["clickable", 'overworld']
                ]
            },
            "mysterious_forest": {
                unlocked() { return hasCraftingItem(371) },
                name() { return '神秘森林' },
                content: [
                    ["blank", "15px"],
                    ["clickables", [1]],
                    "blank",
                    ["row", [
                        ["display-text", function () {
                            let t = player.map.botania.exploreText
                            return t.join("<br>")
                        },
                            {
                                "width": "480px",
                                "height": "125px",
                                display: "table-cell",
                                'vertical-align': 'middle',
                            }],
                        ["blank", ["60px", "100px"]],
                        ["display-text", function () {
                            let white = `你有${textStyle_h3(fw(player.map.botania.flower.white[0]), 'ddeaea')}白色神秘花`
                            let lightgray = `你有${textStyle_h3(fw(player.map.botania.flower.lightgray[0]), '737373')}淡灰色神秘花`
                            let red = `你有${textStyle_h3(fw(player.map.botania.flower.red[0]), 'a00019')}红色神秘花`
                            let brown = `你有${textStyle_h3(fw(player.map.botania.flower.brown[0]), '5e3c24')}棕色神秘花`
                            let purple = `你有${textStyle_h3(fw(player.map.botania.flower.purple[0]), '8932b8')}紫色神秘花`
                            let pink = `你有${textStyle_h3(fw(player.map.botania.flower.pink[0]), 'f38baa')}粉色神秘花`
                            let lime = `你有${textStyle_h3(fw(player.map.botania.flower.lime[0]), '80c71f')}黄绿色神秘花`
                            let br = "<br>"
                            let extra1 = hasUpgrade(experience, 25) ? br + purple + br + pink + br + lime : ''
                            return white + br + lightgray + br + red + br + brown + extra1
                        },
                            {
                                "width": "360px",
                                "min-height": "125px",
                                display: "table-cell",
                                'vertical-align': 'middle',
                            }],
                    ],
                        {
                            background: '#10180c',
                            border: '2px solid',
                            'border-color': '#548049',
                        }
                    ],
                    "blank",
                    ["clickables", [2, 3]],
                    "blank",
                    ["display-text", function () {
                        let white = `你有${textStyle_h3(fw(player.map.botania.flower.white[1]), 'ddeaea')}白色神秘花瓣`
                        let lightgray = `你有${textStyle_h3(fw(player.map.botania.flower.lightgray[1]), '737373')}淡灰色神秘花瓣`
                        let red = `你有${textStyle_h3(fw(player.map.botania.flower.red[1]), 'a00019')}红色神秘花瓣`
                        let brown = `你有${textStyle_h3(fw(player.map.botania.flower.brown[1]), '5e3c24')}棕色神秘花瓣`
                        let purple = `你有${textStyle_h3(fw(player.map.botania.flower.purple[1]), '8932b8')}紫色神秘花瓣`
                        let pink = `你有${textStyle_h3(fw(player.map.botania.flower.pink[1]), 'f38baa')}粉色神秘花瓣`
                        let lime = `你有${textStyle_h3(fw(player.map.botania.flower.lime[1]), '80c71f')}黄绿色神秘花瓣`
                        let br = "<br>"
                        let extra1 = hasUpgrade(experience, 25) ? br + purple + br + pink + br + lime : ''
                        return white + br + lightgray + br + red + br + brown + extra1
                    }],
                    "blank",
                    ["display-text", function () { return `神秘花采集倍数：${textStyle_h2(fw(tmp.map.flowerMult), '548049')}` }],
                ]
            },
            "battle": {
                unlocked() { return hasCraftingItem(491) },
                name() { return '战斗' },
                content: [
                    ["blank", "15px"],
                    ['clickables', [5, 6, 7]],
                    ["column", [
                        ["row",
                            [
                                ["raw-html", function () { return `<div class = "instant" style = "width : 350px">HP: ${textStyle_h3(f(player.map.battle.curHP) + '/' + f(tmp.map.battle.HP), 'fe1313')}</div>` }],
                                ["blank", ['20px', '60px']],
                                ["raw-html", function () { return `<div class = "instant" style = "width : 350px">ATK: ${textStyle_h3(f(tmp.map.battle.ATK), 'd8d8d8')}</div>` }],
                            ],
                            {
                                "background-color": "#00000000",
                                width: "720px",
                                height: "40px",
                                border: '2px solid',
                                'border-color': "#548049",
                                'border-top-width': "2px",
                                'border-bottom-width': "1px",
                            }
                        ],
                        ["row",
                            [
                                ["raw-html", function () { return `<div class = "instant" style = "width : 350px">DEF: ${textStyle_h3(f(tmp.map.battle.DEF), 'd8d8d8')}</div>` }],
                                ["blank", ['20px', '60px']],
                                ["raw-html", function () { return `<div class = "instant" style = "width : 350px">LUCK: ${textStyle_h3(f(tmp.map.battle.LUCK), '17dd61')}</div>` }],
                            ],
                            {
                                "background-color": "#00000000",
                                width: "720px",
                                height: "40px",
                                border: '2px solid',
                                'border-color': "#548049",
                                'border-top-width': "1px",
                                'border-bottom-width': "2px",
                            }
                        ],
                    ],
                        function () { return hasCraftingItem(491) ? {} : { visibility: 'hidden' } }
                    ],
                    "blank",
                    ["display-text", function () {
                        let t = `攻击冷却：${f(player.map.battle.atkCooldown)}s/${f(tmp.map.atkspd)}s`
                        if (player.map.battle.curHP.lte(0)) t += ` 复活时间：${f(player.map.battle.revival)}s`
                        return t
                    }],
                    ["microtabs", "battle_zone"],
                ],
            },
        },
        battle_zone: {
            "battle_zone": {
                unlocked() { return hasCraftingItem(491) },
                name() { return '战斗区域' },
                content: [
                    ["blank", "15px"],
                    ["row", [
                        ["display-text", function () {
                            let t = ''
                            if (player.map.battle.enemy) t = enemyInfo()
                            else t = "你当前不在战斗中"
                            return t
                        },
                            {
                                "width": "360px",
                                "height": "360px",
                                display: "table-cell",
                                'vertical-align': 'middle',
                                'border-color': '#548049',
                                'border-style': 'solid',
                                'border-width': '2px',
                            }
                        ],
                        ["blank", ["60px", "60px"]],
                        ["display-text", function () {
                            let t = "战斗历史：<br>" + battleText()
                            return t
                        },
                            {
                                "width": "360px",
                                "height": "360px",
                                display: "table-cell",
                                'vertical-align': 'middle',
                                'border-color': '#548049',
                                'border-style': 'solid',
                                'border-width': '2px',
                            }
                        ],
                    ]],
                    "blank",
                    ["clickables", [4]],
                    "blank",
                    ["display-text", function () { if (hasCraftingItem(491)) return `你有 ${textStyle_h2(fw(player.map.battle.drops.ender_pearl), '105051')} 末影珍珠` }],
                ],
            },
        },
    },
})

function quickJump(layer, tab, group = 'stuff') {
    if (player[layer].points.gte(-1)) player.tab = layer
    if (typeof player.subtabs[layer][group] == 'string') player.subtabs[layer][group] = tab
}

function getLayerNodeStyle(layer) {
    if (tmp[layer].position >= 2 && tmp[layer].position <= 1002) return tmp[layer].nodeStyle
    else return { "background-color": tmp[layer].color }
}

function jumpToNextLayer(way) {
    var layersName = ['statistics', 'stories', 'achievements', 'offline_progress', 'map', 'wood', 'stone', 'copper', 'tin', 'bronze', 'iron',
        'nickel', 'aluminum', 'lead', 'constantan', 'invar', 'alumbrass', 'zinc', 'brass', 'steel',
        'silver', 'gold', 'electrum', 'redstone', 'red_ele', 'platinum', 'diamond', 'obsidian', 'emerald', 'manasteel', 'crafting_table', 'furnace', 'alloy_s', 'sing_fus', 'blast_furnace', 'botania', 'rf', 'mana',]

    if ((layersName.indexOf(player.tab)) != -1) {
        if (way == 'down') {
            for (i = 1; i < layersName.length; i++) {
                if (tmp[layersName[(layersName.indexOf(player.tab) + i) % layersName.length]].layerShown)
                    player.tab = layersName[(layersName.indexOf(player.tab) + i) % layersName.length]
                return player.tab
            }
        }
        if (way == 'up') {
            for (i = 1; i < layersName.length; i++) {
                let pos = (layersName.indexOf(player.tab) - i)
                if (pos < 0) pos += layersName.length
                if (tmp[layersName[pos % layersName.length]].layerShown)
                    player.tab = layersName[pos % layersName.length]
                return player.tab
            }
        }
    }
}
addLayer("1layer", {
    name: "sideLayer1",
    position: -1,
    row: 1,
    symbol() { return (options.ch || modInfo.languageMod == false) ? '↓ 世界 1 ↓' : '↓ layer 1 ↓' },
    symbolEN() { return (options.ch || modInfo.languageMod == false) ? '↓ 层级 1 ↓' : '↓ layer 1 ↓' },
    small: true,// Set true to generate a slightly different layer
    nodeStyle: { "font-size": "15px", "height": "30px" },// Change layer button' style
    startData() {
        return {
            unlocked: true,
            points: d(0),// This actually does nothing, but you have to write this. (Unless you want add something in this layer. #Todo, might change that later.)
            testtime: d(0),
        }
    },
    color: "#fefefe",
    type: "none",
    tooltip() { return `${formatWhole(player.wood.points)}木头` },
    layerShown() { return true },// If any layer in the array is unlocked, it will returns true. Otherwise it will return false.
    clickables: {
        11: {
            display() {
                let d = "硬核暂停"
                return d
            },
            canClick() { return player.devmode },
            onClick() {
                player.NaNpause = d(NaN)
            },
            unlocked() { return player.devmode },
            style() {
                return {
                    'min-height': '50px',
                    'width': '120px',
                    'font-size': '20px'
                }
            },
        },
    },
    update() {
        //if (player.devmode)
        //player['1layer'].testtime = player['1layer'].testtime.add(0.00125),
        //player.notationTest = d(10).hexate(player['1layer'].testtime.add(1))
        //player.notationTest = d(10).pow(d(10).pow(player['1layer'].testtime.add(1)))
    },
    tabFormat: [
        ["display-text", function () { return getPointsDisplay() }],
        //["clickables", [1]],
        //["display-text", function () { if (player.devmode) return textStyle_h2(hyperE(player.notationTest)) }],
        //["display-text", function () { if (player.devmode) return textStyle_h2(letter(player.notationTest)) }],
        //["display-text", function () { if (player.devmode) return textStyle_h2(f(player.notationTest)) }],
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "quick jump": {
                unlocked() { return true },
                name() { return '快速跳转' },
                content: [
                    ["blank", "15px"],
                    ["clickables", [2]],
                    ["display-text", function () { return "快速跳转功能施工中" }],
                ]
            },
        },
    },
})
//世界1 （原型：主世界）材料解锁顺序（暂定）
const wood = "wood" //木头 1
const stone = "stone" //石头 2
const copper = "copper" //铜 3
const tin = "tin" //锡 4
const bronze = "bronze" //青铜 5
const iron = "iron" //铁 6
const nickel = "nickel" //镍 7
const aluminum = "aluminum" //铝 8
const lead = "lead" //铅 9
const constantan = "constantan" //康铜 10
const invar = "invar" //殷钢 11
const alumbrass = "alumbrass" //铝黄铜 12
const zinc = "zinc" //锌 13
const brass = "brass" //黄铜 14
const steel = "steel" //钢 15
const silver = "silver" //银 16
const gold = "gold" //金 17
const electrum = "electrum" //琥珀金 18
const redstone = "redstone" //红石 19
const red_ele = "red_ele" //红石琥珀金 20 → 接下来前往魔法世界
const singularium = "singularium" //信素
const platinum = "platinum" //铂 22
const diamond = "diamond" //钻石 23
const emerald = "emerald" //绿宝石 25
const experience = "experience" //知识精华 26 → 再次到魔法世界
const obsidian = "obsidian" //黑曜石 24 (v0.7改主意了)
const chromium = "chromium" //铬
const manganese = "manganese" //锰
const mn_steel = "mn_steel" //锰钢
const stainless_steel = "stainless_steel" //不锈钢
const iridium = "iridium" //铱
const osmium = "osmium" //锇
const osmiridium = "osmiridium" //铱锇合金

//世界2 （魔法世界（缝了一些魔法mod））
const manasteel = "manasteel" //魔力钢 21 → 回到主世界
const terrasteel = "terrasteel" //泰拉钢 27
const twillight_g = "twillight_g" //暮光宝石 28 （按理来说看到这个就知道我在以什么为原型）→ 前往暮色森林
const elementium = "elementium" //源质钢 34
const gaiasoul = "gaiasoul" //盖亚魂 36
const elfsteel = "elfsteel" //精灵钢
const orichacos = "orichacos" //奥利哈刚
const star_m = "star_m" //星辉 35
const astral_m = "astral_m" //星辰

//世界3 （暮色森林等冒险世界）
const naga_scale = "naga_scale" //娜迦鳞片 29
const ironwood = "ironwood" //铁树 30
const steeleaf = "steeleaf" //钢叶 31
const knight_metal = "knight_metal" //骑士金属 32
const fiery = "fiery" //炽热金属 33 

//世界4 （原型：下界）
const glowstone = "glowstone" //荧石
const quartz = "quartz" //下界石英
const lumium = "lumium" //流明
const glow_sin = "glow_sin" //荧光信素
const soularium = "soularium" //魂金
const cobalt = "cobalt" //钴
const ardite = "ardite" //阿迪特
const manyullyn = "manyullyn" //玛玉灵
const anc_deb = "anc_deb" //远古残骸
const netherite = "netherite" //下界合金

//世界5 （原型：末地）
const ender_p = "ender_p" //末影珍珠 v0.7已成世界层级的资源，不再成为层级
const enderium = "enderium" //末影
const dark_steel = "dark_steel" //玄钢
const end_steel = "end_steel" //末影钢


//制造
const ct = "crafting_table" //合成台
const furnace = "furnace" //熔炉
const alloy_s = "alloy_s" //合金炉
const sing_fus = "sing_fus" //奇点凝聚器
const blast_furnace = "blast_furnace" //高炉
const botania = "botania" //植物魔法（花药台、魔力池、符文祭坛、泰拉凝聚板、精灵传送门）
const astral_ct = "astral_ct" //星辉合成台

//能源
const rf = "rf" //红石通量 Redstone Flux
const mana = "mana" //魔力
const astral_p = "astral_p" //星能
const lp = "lp" //生命源质

//其他
const map = "map" //地图

//要是你能无聊翻源代码翻到了这里那好家伙，你找到了未来更新的层级名称（计划）(画饼）如果你想要更新，别急，我还有马造2树没更新完呢。我自己也要拿大量时间玩马造，更新频率真很低的。
//此留言写于2024.11.11

//世界1层1：木头
addLayer("wood", {
    name: "wood", // This is optional, only used in a few places, If absent it just uses the layer id
    symbol: '木头', // This appears on the layer's node. Default is the id with the first letter capitalized
    position: 0, // Horizontal position within a row. By default it uses the layer id and sorts in alphabetical order
    row: 1,
    startData() {
        return {
            unlocked: true,
            points: new ExpantaNum(0),
            hardness: d(10),
            progress: d(0),
            speed: d(2),
            rarity: d(1),
            correspondingTool: "axe",
            miningLevel: d(0),
            destroying: false,
            oak: d(0),
            spruce: d(0),
            birch: d(0),
            jungle: d(0),
            acacia: d(0),
            darkOak: d(0),
            mangrove: d(0),
            bamboo: d(0),
            cherry: d(0),
            paleOak: d(0),
            chips: d(0),
        }
    },
    color: "#b8945e",
    requires: new ExpantaNum(10), // Can be a function that takes requirement increases into account
    resource: "木头", // Name of prestige currency
    resourceEN: "prestige points", // The second name of prestige currency ( If you open otherLanguageMod )
    baseResource: "points", // Name of resource prestige is based on
    baseResourceEN: "points", // The second name of resource prestige is based on ( If you open otherLanguageMod )
    baseAmount() { return player.points }, // Get the current amount of baseResource
    type: "none", // normal: cost to gain currency depends on amount gained. static: cost depends on how much you already have
    exponent: 0.5, // Prestige currency exponent
    gainMult() { // Calculate the multiplier for main currency from bonuses
        m = d(1)
        if (hasUpgrade(wood, 12)) m = m.times(upgradeEffect(wood, 12))
        if (hasUpgrade(wood, 22)) m = m.times(upgradeEffect(wood, 22))
        if (hasUpgrade(wood, 24)) m = m.times(2)
        if (hasUpgrade(stone, 11)) m = m.times(2)
        if (hasCraftingItem(21)) m = m.times(5)
        if (hasUpgrade(wood, 32)) m = m.times(10)
        if (hasUpgrade(wood, 34)) m = m.times(3)
        if (hasUpgrade(wood, 35)) m = m.times(3)
        if (hasCraftingItem(32)) m = m.times(20)
        if (hasUpgrade(stone, 32)) m = m.times(buyableEffect(stone, 11))
        if (hasUpgrade(copper, 23)) m = m.times(upgradeEffect(copper, 23))
        if (hasCraftingItem(62)) m = m.times(300)
        if (hasCraftingItem(81)) m = m.times(1241)
        if (hasCraftingItem(212)) m = m.times('1e2000')
        if (hasUpgrade(steel, 23)) m = m.times(upgradeEffect(steel, 23))
        if (hasCraftingItem(311)) m = m.times('1e100000')
        if (hasCraftingItem(321)) m = m.times('1e250000')
        if (hasUpgrade(redstone, 11)) m = m.times(upgradeEffect(redstone, 11))
        return m
    },
    gainExp() { // Calculate the exponent on main currency from bonuses
        return d(1)
    },
    row: 1, // Row the layer is in on the tree (0 is the first row)
    layerShown() { return true },

    doReset(resettingLayer) {
        if (layers[resettingLayer].name == ct && !hasMilestone(furnace, 0)) {
            let kept = ["unlocked", "auto"]
            if (hasMilestone(ct, 0)) {
                kept.push("milestones"),
                    kept.push("upgrades")
            }
            layerDataReset(this.layer, kept)
        }
        if (layers[resettingLayer].name == furnace) {
            return undefined
        }
        if (hasMilestone(furnace, 0)) return undefined
    },

    upgrades: {
        11: {
            title: "游戏开始",
            description: "开始获得1经验每秒",
            cost() { return new ExpantaNum(0) },
            unlocked() { return true },
            effect() {
                let g = d(1)

                if (!hasUpgrade(experience, 32)) {
                    if (hasMilestone(wood, 0)) g = g.times(5)
                    if (hasUpgrade(wood, 13)) g = g.times(upgradeEffect('wood', 13))
                    if (hasUpgrade(wood, 14)) g = g.times(upgradeEffect('wood', 14))
                    if (hasMilestone(wood, 1)) g = g.times(11.4514)
                    if (hasNormalAchievement(13) && !hasCraftingItem(422)) g = g.times(tmp.achievements.effect)
                    if (hasUpgrade(wood, 21)) g = g.times(upgradeEffect(wood, 21))
                    if (hasUpgrade(wood, 23)) g = g.times(tmp.wood.logEffects.oak)
                    if (hasUpgrade(stone, 12)) g = g.times(upgradeEffect(stone, 12))
                    if (hasUpgrade(stone, 13)) g = g.times(upgradeEffect(stone, 13))
                    if (hasUpgrade(stone, 14)) g = g.times(100)
                    if (hasUpgrade(wood, 31)) g = g.times(tmp.wood.logEffects.spruce)
                    if (hasUpgrade(copper, 12)) g = g.times(upgradeEffect(copper, 12))
                    if (hasUpgrade(stone, 34)) g = g.times(upgradeEffect(stone, 34))
                    if (hasUpgrade(iron, 11)) g = g.times(1e10)
                    if (hasMilestone(bronze, 5)) g = g.times(1000000)

                    g = g.min(tmp.experience.xpHardcap) //知识精华之前，硬上限限制
                }

                if (hasUpgrade(experience, 32)) {
                    g = tmp.experience.xpHardcap
                }
                return g
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}/秒`
            },
        },
        12: {
            title: "连锁挖掘",
            description: "等级加成木头获取",
            cost() { return new ExpantaNum(5) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.level.max(0).add(1).pow(1.35).floor()
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：⌊(等级+1)<sup>1.35</sup>⌋`
                return t
            },
        },
        13: {
            title: "伐木经验",
            description: "伐木进度加成经验获取",
            cost() { return new ExpantaNum(15) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.wood.progress.max(1)
                if (hasCraftingItem(21)) eff = d(10)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：max(伐木进度, 1)`
                if (hasCraftingItem(21)) t = `公式：10`
                return t
            },
        },
        14: {
            title: "经验自增",
            description: "需求：等级2<br>经验加成自身<br>于1.798e308x到达软上限",
            cost() { return new ExpantaNum(40) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            canAfford() { return player.level.gte(2) },
            effect() {
                let base = player.points.max(1).root(3)
                if (base.lte(ExpantaNumInfinity)) eff = base
                if (base.gt(ExpantaNumInfinity)) eff = base.div(ExpantaNumInfinity).root(10).times(ExpantaNumInfinity)
                return eff
            },
            effectDisplay() {
                let softcap = ""
                if (upgradeEffect(this.layer, this.id).gte(ExpantaNumInfinity)) softcap = "（受软上限限制）"
                return `${format(upgradeEffect(this.layer, this.id))}x ${softcap}`
            },
            tooltip() {
                let t = `公式：<br>
                软上限前：<sup>3</sup>√经验<br>
                软上限后：(<sup>3</sup>√经验/1.7976e308)<sup>0.1</sup>·1.7976e308`
                return t
            },
        },
        15: {
            title: "发展科技",
            description: "需求：等级3<br>解锁新区域：制造，以及新层级：合成台",
            cost() { return new ExpantaNum(90) },
            canAfford() { return player.level.gte(3) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        21: {
            title: "进阶伐木",
            description: "木头加成经验获取",
            cost() { return new ExpantaNum(144) },
            unlocked() { return hasCraftingItem(11) },
            effect() {
                let eff = player.wood.points.max(1).pow(0.3)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：木头<sup>0.3</sup>`
                return t
            },
        },
        22: {
            title: "成就伐木",
            description: "需求：等级4<br>成就点数加成木头获取",
            cost() { return new ExpantaNum(169) },
            canAfford() { return player.level.gte(4) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.achievements.points.max(1).root(2).floor()
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：⌊(成就点数)<sup>0.5</sup>⌋`
                return t
            },
        },
        23: {
            title: "原木分类",
            description: "解锁新页面，你将有概率获取多种类的原木",
            cost() { return new ExpantaNum(300) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        24: {
            title: "橡树林",
            description: "需求：等级5<br>双倍木头获取",
            currencyInternalName: "oak",
            currencyDisplayName: "橡木原木",
            currencyLayer: wood,
            cost() { return new ExpantaNum(20) },
            canAfford() { return player.level.gte(5) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        25: {
            title: "目光向下",
            description: "需求：等级5<br>解锁新层级：石头",
            currencyInternalName: "oak",
            currencyDisplayName: "橡木原木",
            currencyLayer: wood,
            cost() { return new ExpantaNum(40) },
            canAfford() { return player.level.gte(5) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        31: {
            title: "云杉树",
            description: "需求：等级9<br>允许你获得云杉原木",
            cost() { return new ExpantaNum(50000) },
            canAfford() { return player.level.gte(9) },
            unlocked() { return hasNormalAchievement(21) },
        },
        32: {
            title: "效率I",
            description: "10x木头获取",
            currencyInternalName: "spruce",
            currencyDisplayName: "云杉原木",
            currencyLayer: wood,
            cost() { return new ExpantaNum(40) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        33: {
            title: "云杉木手柄部件",
            description: "需求：等级12<br>1.2x挖掘速度，3x石头获取",
            currencyInternalName: "spruce",
            currencyDisplayName: "云杉原木",
            currencyLayer: wood,
            cost() { return new ExpantaNum(125) },
            canAfford() { return player.level.gte(12) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        34: {
            title: "石头手柄部件",
            description: "需求：等级12<br>1.2x撸树速度，3x木头获取",
            currencyInternalName: "points",
            currencyDisplayName: "石头",
            currencyLayer: stone,
            cost() { return new ExpantaNum(200) },
            canAfford() { return player.level.gte(12) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        35: {
            title: "进一步加强",
            description: "3x木头获取，解锁新的石头升级和合成台图纸",
            cost() { return new ExpantaNum(4567890) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
    },

    milestones: {
        0: {
            requirementDescription() { return `获得15木头` },
            effectDescription() { return `5倍经验获取` },
            done() { return player.wood.points.gte(15) },
            unlocked() { return true },
        },
        1: {
            requirementDescription() { return `获得114,514经验` },
            effectDescription() { return `11.4514倍经验获取` },
            done() { return player.points.gte(114514) },
            unlocked() { return true },
        },
        2: {
            requirementDescription() { return `木头倍增器等级2` },
            effectDescription() { return `允许你撸树时获得白桦原木` },
            done() { return getBuyableAmount(stone, 11).gte(2) },
            unlocked() { return hasCraftingItem(41) },
        },
    },

    clickables: {
        11: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = "点击撸树"
                return d
            },
            canClick() { return !player.wood.destroying },
            onClick() {
                if (!player.wood.destroying) player.wood.destroying = true
            },
            unlocked() { return player.level.gte(1) },
            style() {
                return {
                    'min-height': '50px',
                    'width': '120px',
                    'font-size': '20px'
                }
            },
        },
    },

    bars: {
        woodDestroying: {
            direction: RIGHT,
            width: 360,
            height: 60,
            display() { return `进度: ${format(player.wood.progress)}/${format(hardness('wood'))}` },
            progress() { return player.wood.progress.div(hardness('wood')) },
            unlocked() { return player.level.gte(1) },
            fillStyle() { return { "background-color": "#b8945e" } },
            baseStyle() { return { "background-color": "rgba(0,0,0,0)" } },
        },
    },

    update(diff) {
        if (player.wood.destroying) player.wood.progress = player.wood.progress.add(player.wood.speed.times(diff))
        if (player.wood.progress.gte(hardness('wood'))) player.wood.progress = d(0),
            player.wood.destroying = false,
            player.wood.points = player.wood.points.add(tmp.wood.gainMult),
            player.wood.oak = player.wood.oak.add(tmp.wood.logGain.oak),
            player.wood.spruce = player.wood.spruce.add(tmp.wood.logGain.spruce),
            player.wood.birch = player.wood.birch.add(tmp.wood.logGain.birch),
            player.wood.jungle = player.wood.jungle.add(tmp.wood.logGain.jungle),
            player.wood.acacia = player.wood.acacia.add(tmp.wood.logGain.acacia),
            player.wood.darkOak = player.wood.darkOak.add(tmp.wood.logGain.darkOak)

        if (player.wood.points.gt(player.wood.best)) player.wood.best = player.wood.points

        //撸树速度
        let speed = d(2)
        if (hasCraftingItem(11)) speed = speed.times(2.5)
        if (hasCraftingItem(21)) speed = speed.times(3)
        if (hasUpgrade(wood, 34)) speed = speed.times(1.2)
        if (hasCraftingItem(32)) speed = speed.times(3)
        if (hasCraftingItem(102)) speed = speed.times(3)
        if (hasCraftingItem(321)) speed = speed.times(10)
        player.wood.speed = speed
    },

    logEffects: {
        oak() {
            let eff = player.wood.oak.max(0).times(5).add(1).pow(0.8)
            if (hasUpgrade(brass, "main1")) eff = eff.pow(2.25)
            return eff
        },
        spruce() {
            let eff = player.wood.spruce.max(0).add(10).log10().pow(10)
            return eff
        },
        birch() {
            let eff = player.wood.birch.max(0).add(10).log10().pow(4)
            if (hasCraftingItem(252)) eff = d(10).pow(player.wood.birch.max(1).log10().times(35).pow(0.75))
            return eff
        },
        jungle() {
            let eff = player.wood.jungle.max(0).add(10).log10().pow(1.25).sub(1)
            if (hasUpgrade(aluminum, 13)) eff = eff.pow(3)
            if (hasUpgrade(brass, "main2")) eff = eff.times(upgradeEffect(brass, "main2"))
            return eff
        },
        acacia() {
            let eff = player.wood.acacia.max(0).root(10).times(200)
            if (hasUpgrade(brass, "main3")) eff = eff.pow(2.25)
            return eff
        },
        darkOak() {
            let eff = player.wood.darkOak.add(1).log10().pow(0.65).times(10)
            if (hasUpgrade(diamond, 32)) eff = eff.pow(1.4)
            if (hasCraftingItem(432)) eff = eff.pow(1.15)
            return eff
        },
    },

    logGain: {
        oak() {
            let gain = tmp.wood.gainMult.div(15).floor()
            if (!hasUpgrade(wood, 23)) gain = d(0)
            return gain
        },
        spruce() {
            let gain = this.oak().div(105).root(2).floor()
            if (!hasUpgrade(wood, 31)) gain = d(0)
            return gain
        },
        birch() {
            let gain = this.spruce().div(320).root(5).floor()
            if (!hasMilestone(wood, 2)) gain = d(0)
            return gain
        },
        jungle() {
            let gain = this.birch().max(1).div(1860000).logBase(2).add(1).max(0).floor()
            if (hasUpgrade(bronze, 24)) gain = gain.times(upgradeEffect(bronze, 24))
            if (!hasUpgrade(bronze, 23)) gain = d(0)
            if (hasUpgrade(aluminum, 13)) gain = gain.pow(3)
            if (hasCraftingItem(292)) gain = gain.pow(1.5)
            return gain
        },
        acacia() {
            let gain = this.jungle().max(1).div(1.82e15).root(2).floor()
            if (hasCraftingItem(292)) gain = gain.pow(1.5)
            if (!hasCraftingItem(152)) gain = d(0)
            return gain
        },
        darkOak() {
            let gain = this.acacia().max(1).div(4e167).root(4).floor()
            if (!hasCraftingItem(412)) gain = d(0)
            return gain
        },
    },

    tabFormat: [
        ["display-text", function () { return getPointsDisplay() }],
        ["display-text", function () { return `你有 ${textStyle_h2(format(player.wood.points), 'b8945e')} 木头` }],
        ["display-text", function () { if (hasUpgrade(rf, 92)) return `你有 ${textStyle_h2(format(player.wood.chips), 'b8945e')} 木屑` }],
        "blank",
        ["display-text", () => `你同时最多拥有 ${formatWhole(player.wood.best)} 木头`],
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "wood": {
                unlocked() { return true },
                name() { return '伐木' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { if (player.level.lt(1)) return `你需要先到等级1解锁伐木！` }],
                    ["row", [["bar", "woodDestroying"], "blank", "clickables",]],
                    "blank",
                    "blank",
                    ["display-text", function () { if (player.level.gte(1)) return `挖掘速度：${format(player.wood.speed)}/秒` }],
                    ["display-text", function () { if (player.level.gte(1)) return `破坏一次的木头获取数量：${textStyle_h2(formatWhole(tmp.wood.gainMult), 'b8945e')}` }],
                    ["display-text", function () { return `硬度：${formatWhole(hardness(wood))}` }],
                    ["display-text", function () { if (player.level.gte(1)) return `挖掘等级：0` }],
                ]
            },
            "upgrades": {
                unlocked() { return true },
                name() { return '升级' },
                content: [
                    ["blank", "15px"],
                    ["raw-html", () => `<h4 style="opacity:.5">`],
                    ["upgrades", [1, 2, 3, 4, 5, 6, 7, 8, 9]]
                ]
            },
            "milestones": {
                unlocked() { return true },
                name() { return '里程碑' },
                content: [
                    ["blank", "15px"],
                    "milestones"
                ]
            },
            "log": {
                unlocked() { return hasUpgrade(wood, 23) },
                name() { return '原木' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { return `按下shift查看相关获取以及效果公式，获取默认向下取整` }],
                    "blank",
                    ["display-text", function () { if (hasUpgrade(wood, 23)) return `你有 ${textStyle_h2(formatWhole(player.wood.oak), 'b8945e')} 橡木原木，加成经验获取 ${textStyle_h2(format(tmp.wood.logEffects.oak) + "x", 'b8945e')}` }],
                    ["display-text", function () {
                        let power = "0.8"
                        if (hasUpgrade(brass, "main1")) power = "1.8"
                        if (hasUpgrade(wood, 23)) return shiftDown ? `橡木原木获取公式：木头每次/15    效果公式：(橡木原木·5+1)<sup>${power}</sup>` : ""
                    }],
                    ["display-text", function () { if (hasUpgrade(wood, 31)) return `你有 ${textStyle_h2(formatWhole(player.wood.spruce), '826038')} 云杉原木，加成经验获取 ${textStyle_h2(format(tmp.wood.logEffects.spruce) + "x", '826038')}` }],
                    ["display-text", function () {
                        if (hasUpgrade(wood, 31)) return shiftDown ? `云杉原木获取公式：√(橡木原木每次/105)   效果公式：lg(云杉原木+10)<sup>10</sup>` : ""
                    }],
                    ["display-text", function () { if (hasMilestone(wood, 2)) return `你有 ${textStyle_h2(formatWhole(player.wood.birch), 'ceb77c')} 白桦原木，加成石头获取 ${textStyle_h2(format(tmp.wood.logEffects.birch) + "x", 'ceb77c')}` }],
                    ["display-text", function () {
                        let f = "lg(白桦原木+10)<sup>4</sup>"
                        if (hasCraftingItem(252)) f = "10<sup>35lg(白桦原木)<sup>0.75</sup></sup>"
                        if (hasMilestone(wood, 2)) return shiftDown ? `白桦原木获取公式：(云杉原木每次/320)<sup>0.2</sup>   效果公式：${f}` : ""
                    }],
                    ["display-text", function () { if (hasUpgrade(bronze, 23)) return `你有 ${textStyle_h2(formatWhole(player.wood.jungle), '9f844d')} 丛林原木，令木头倍增器的底数 ${textStyle_h2("+" + format(tmp.wood.logEffects.jungle), '9f844d')}` }],
                    ["display-text", function () {
                        let gf = "log<sub>2</sub>(白桦原木每次/1,860,000)+1"
                        let gp = d(1)
                        if (hasUpgrade(aluminum, 13)) gp = gp.times(3)
                        if (hasCraftingItem(292)) gp = gp.times(1.5)
                        if (hasUpgrade(bronze, 24)) gf = "(" + gf + ")·upgeff(青铜, 9)"
                        if (hasUpgrade(aluminum, 13) || hasCraftingItem(292)) gf = "(" + gf + ")" + `<sup>${f(gp)}</sup>`

                        let ef = "lg(丛林原木+10)<sup>1.25</sup>-1"
                        if (hasUpgrade(aluminum, 13)) ef = "(" + ef + ")<sup>3</sup>"
                        if (hasUpgrade(brass, "main2")) ef += "·upgeff(黄铜, main2)"
                        if (hasUpgrade(bronze, 23)) return shiftDown ? `丛林原木获取公式：${gf}  效果公式：${ef}` : ""
                    }],
                    ["display-text", function () { if (hasCraftingItem(152)) return `你有 ${textStyle_h2(formatWhole(player.wood.acacia), 'ba5d3b')} 金合欢原木，令青铜力量强化器MK.2的底数 ${textStyle_h2("+" + format(tmp.wood.logEffects.acacia), 'ba5d3b')}` }],
                    ["display-text", function () {
                        let gf = "√(丛林原木每次/1.82e15)"
                        if (hasCraftingItem(292)) gf += "<sup>1.5</sup>"

                        let ef = "金合欢原木<sup>0.1</sup>·200"
                        if (hasUpgrade(brass, "main3")) ef = "(" + ef + ")<sup>2.25</sup>"
                        if (hasCraftingItem(152)) return shiftDown ? `金合欢原木获取公式：${gf}  效果公式：${ef}` : ""
                    }],
                    ["display-text", function () { if (hasCraftingItem(412)) return `你有 ${textStyle_h2(formatWhole(player.wood.darkOak), '5b4830')} 深色橡木原木，令第5红石琥珀金升级效果的底数 ${textStyle_h2("+" + format(tmp.wood.logEffects.darkOak), '5b4830')}` }],
                    ["display-text", function () {
                        let gf = `(金合欢原木每次/${f(4e167)})${quickSUP('0.25')}`
                        let ef = `10·(lg(深色橡木原木+1))<sup>${0.65}</sup>`
                        let power = d(1.4)
                        if (hasCraftingItem(432)) power = power.times(1.15)
                        if (hasUpgrade(diamond, 32)) ef = ef = "(" + ef + ")<sup>" + f(power) + "</sup>"
                        if (hasCraftingItem(412)) return shiftDown ? `深色橡木原木获取公式：${gf}  效果公式：${ef}` : ""
                    }],
                    ["row", [["bar", "woodDestroying"], "blank", "clickables",]],
                    "blank",
                    ["display-text", function () { if (player.level.gte(1)) return `挖掘速度：${format(player.wood.speed)}/秒` }],
                    ["display-text", function () { if (player.level.gte(1)) return `破坏一次的木头获取数量：${textStyle_h2(formatWhole(tmp.wood.gainMult), 'b8945e')}` }],
                    ["display-text", function () { if (hasUpgrade(wood, 23)) return `破坏一次木头可额外产出 ${textStyle_h2(formatWhole(tmp.wood.logGain.oak), 'b8945e')} 橡木原木 （基于木头获取，开始于15木头/次）` }],
                    ["display-text", function () { if (hasUpgrade(wood, 31)) return `破坏一次木头可额外产出 ${textStyle_h2(formatWhole(tmp.wood.logGain.spruce), '826038')} 云杉原木 （基于橡木原木获取，开始于105橡木原木/次）` }],
                    ["display-text", function () { if (hasMilestone(wood, 2)) return `破坏一次木头可额外产出 ${textStyle_h2(formatWhole(tmp.wood.logGain.birch), 'ceb77c')} 白桦原木 （基于云杉原木获取，开始于320云杉原木/次）` }],
                    ["display-text", function () { if (hasUpgrade(bronze, 23)) return `破坏一次木头可额外产出 ${textStyle_h2(formatWhole(tmp.wood.logGain.jungle), '9f844d')} 丛林原木 （基于白桦原木获取，开始于${f(1860000)}白桦原木/次）` }],
                    ["display-text", function () { if (hasCraftingItem(152)) return `破坏一次木头可额外产出 ${textStyle_h2(formatWhole(tmp.wood.logGain.acacia), 'ba5d3b')} 金合欢原木 （基于丛林原木获取，开始于${f(1.82e15)}丛林原木/次）` }],
                    ["display-text", function () { if (hasCraftingItem(412)) return `破坏一次木头可额外产出 ${textStyle_h2(formatWhole(tmp.wood.logGain.darkOak), '5b4830')} 深色橡木原木 （基于丛林原木获取，开始于${f(6e167)}金合欢原木/次）` }],
                ]
            },
        },
    },
})

//世界1层2：石头
addLayer("stone", {
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: d(0),             // "points" is the internal name for the main resource of the layer.
            hardness: d(20),
            miningLevel: d(0),
            progress: d(0),
            speed: d(0),
            destroying: false,
            singularity: d(0),
            gravel: d(0), //难救了
            dirt: d(0),
            sand: d(0),
            coal: d(0),
            clay: d(0), //#8890a9
            basalt: d(0),
            calcite: d(0),
            marble: d(0),
            netherrack: d(0),
            aether_stone: d(0),
            abyssal_stone: d(0),
        }
    },

    color: "#4a4a4a",                       // The color for this layer, which affects many elements.
    resource: "石头",                       // The name of this layer's main prestige resource.
    row: 1,
    position: 1,                                 // The row this layer is on (0 is the first row).
    symbol: '石头', // This appears on the layer's node. Default is the id with the first letter capitalized

    baseResource: "points",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.points },  // A function to return the current amount of baseResource.

    requires: d(10),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "none",                         // Determines the formula used for calculating prestige currency.
    exponent: 0.5,                          // "normal" prestige gain is (currency^exponent).

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        m = d(1)               // Factor in any bonuses multiplying gain here.
        if (hasUpgrade(stone, 12)) m = m.times(2)
        if (hasCraftingItem(22)) m = m.times(2)
        if (hasUpgrade(wood, 33)) m = m.times(3)
        if (hasUpgrade(stone, 21)) m = m.times(5)
        if (hasUpgrade(stone, 22)) m = m.times(upgradeEffect(stone, 22))
        if (hasUpgrade(stone, 24)) m = m.times(upgradeEffect(stone, 24))
        if (hasUpgrade(copper, 14)) m = m.times(upgradeEffect(copper, 14))
        if (hasCraftingItem(41)) m = m.times(5)
        if (hasUpgrade(stone, 31)) m = m.times(upgradeEffect(stone, 31))
        if (hasMilestone(wood, 2)) m = m.times(tmp.wood.logEffects.birch)
        if (hasCraftingItem(71)) m = m.times(150)
        if (hasUpgrade(tin, 12)) m = m.times(upgradeEffect(tin, 12))
        if (hasUpgrade(iron, 23)) m = m.times(upgradeEffect(iron, 23))
        if (hasNormalAchievement(63)) m = m.times(buyableEffect(stone, 21))
        if (hasCraftingItem(221)) m = m.times('1e2000')
        if (hasCraftingItem(322)) m = m.times('1e80000')
        return m
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return d(1)
    },

    layerShown() { return hasNormalAchievement(16) },          // Returns a bool for if this layer's node should be visible in the tree.

    doReset(resettingLayer) {
        if (layers[resettingLayer].name == ct) {
            return undefined
        }
        if (layers[resettingLayer].name == furnace && !hasMilestone(furnace, 0)) {
            let kept = ["unlocked", "auto"]
            if (hasMilestone(furnace, 0)) {
                kept.push("milestones"),
                    kept.push("upgrades")
            }
            layerDataReset(this.layer, kept)
        }
        if (hasMilestone(furnace, 0)) return undefined
    },

    upgrades: {
        11: {
            title: "坚硬之物",
            description: "解锁木镐的合成，双倍木头获取",
            cost() { return new ExpantaNum(0) },
            unlocked() { return tmp.stone.layerShown },
        },
        12: {
            title: "粉碎它吧！",
            description: "需求：等级6<br>双倍石头获取，石头加成经验获取",
            cost() { return new ExpantaNum(5) },
            canAfford() { return player.level.gte(6) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.stone.points.max(0).add(10).log10().pow(5)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：lg(石头+10)<sup>5</sup>`
                return t
            },
        },
        13: {
            title: "合成经验",
            description() {
                let des = `需求：等级6<br>合成台加成经验获取 (硬上限${f(1e100)}x)`
                if (hasUpgrade(diamond, 31)) des = `需求：等级6<br>合成台加成经验获取 (硬上限已被钻石升级11摧毁)`
                return des
            },
            cost() { return new ExpantaNum(15) },
            canAfford() { return player.level.gte(6) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.crafting_table.points.max(0).add(1).pow(2)
                if (!hasUpgrade(diamond, 31)) eff = eff.min(1e100)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：(合成台+1)<sup>2</sup>`
                return t
            },
        },
        14: {
            title: "经验强化器",
            description: "需求：等级7<br>100x经验获取",
            cost() { return new ExpantaNum(25) },
            canAfford() { return player.level.gte(7) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        15: {
            title: "获得升级",
            description: "需求：1e20经验<br>解锁石斧和石镐的合成",
            cost() { return new ExpantaNum(25) },
            canAfford() { return player.points.gte(1e20) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        21: {
            title: "急迫I",
            description: "5x石头获取",
            cost() { return new ExpantaNum(210) },
            unlocked() { return hasNormalAchievement(22) },
        },
        22: {
            title: "合成提升石头",
            description: "合成台加成石头获取",
            cost() { return new ExpantaNum(880) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.crafting_table.points.max(0).add(1).pow(0.4)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：(合成台+1)<sup>0.4</sup>`
                return t
            },
        },
        23: {
            title: "扩展范围",
            description: "需求：等级14<br>增大挖掘的方块种类，在新页面中显示，允许你挖掘泥土",
            cost() { return new ExpantaNum(2025) },
            canAfford() { return player.level.gte(14) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        24: {
            title: "泥土加成",
            description: "泥土少量加成石头获取",
            currencyInternalName: "dirt",
            currencyDisplayName: "泥土",
            currencyLayer: stone,
            cost() { return new ExpantaNum(10) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.stone.dirt.max(0).add(3).logBase(3)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：log${quickSUB('3')}(泥土+3)`
                return t
            },
        },
        25: {
            title: "岩石之中",
            description: "解锁新层级：铜",
            cost() { return new ExpantaNum(15000) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        31: {
            title: "焦黑石头",
            description: "需求：等级21<br>熔炉加成石头获取",
            cost() { return new ExpantaNum(50000000) },
            canAfford() { return player.level.gte(21) },
            unlocked() { return hasCraftingItem(41) },
            effect() {
                let eff = player.furnace.points.max(0).add(1).pow(0.4)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：(熔炉+1)<sup>0.4</sup>`
                return t
            },
        },
        32: {
            title: "伐木场",
            description: "解锁一个购买项，加成木头获取",
            cost() { return new ExpantaNum(500000000) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        33: {
            title: "熔炼配方",
            description: "在熔炉界面中允许你解锁更多熔炼配方",
            cost() { return new ExpantaNum(5e9) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        34: {
            title: "能源加成",
            description: "RF加成经验获取<br>同时查看合成台里程碑2吧",
            cost() { return new ExpantaNum(12500) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            currencyInternalName: "points",
            currencyDisplayName: "RF",
            currencyLayer: rf,
            effect() {
                let eff = player.rf.points.max(0).add(1).pow(1.2)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：(RF+1)<sup>1.2</sup>`
                return t
            },
        },
        35: {
            title: "意外收获",
            description: "允许你挖掘石头时获得煤炭<br>同时允许以煤炭作为燃料",
            currencyInternalName: "points",
            currencyDisplayName: "木头",
            currencyLayer: wood,
            cost() { return new ExpantaNum(7.7777e19) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        // Look in the upgrades docs to see what goes here!
    },

    buyables: {
        11: {
            title: "木头倍增器",
            cost(x) { return d(5).pow(x.max(0).pow(1.5)).times(10000000) },
            free() {
                let f = d(0)
                if (hasCraftingItem(102)) f = f.add(10)
                return f
            },
            display() {
                let freedis = ""
                if (this.free().gte(1)) freedis = ` + ${formatWhole(this.free())}`
                let display = `加成木头获取<br>
                效果公式：${format(this.effBase())}<sup>x</sup><br>
                等级：${formatWhole(player[this.layer].buyables[this.id])}${freedis}<br>
                当前效果：${format(this.effect())}x<br>
                价格：${format(this.cost())} 石头`
                return display
            },
            canAfford() { return player[this.layer].points.gte(this.cost()) },
            buyMax() {
                if (this.canAfford())
                    return setBuyableAmount(stone, 11, player.stone.points.div(10000000).max(1).logBase(5).root(1.5).floor().add(1))
            },
            canBuyMax() { return hasMilestone(sing_fus, 1) },
            buy() {
                if (!this.canBuyMax()) player[this.layer].points = player[this.layer].points.sub(this.cost()).max(0),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (this.canBuyMax()) this.buyMax()
            },
            effBase() {
                let b = d(2)
                if (hasUpgrade(tin, 11)) b = b.times(2)
                if (hasCraftingItem(81)) b = b.times(2)
                if (hasUpgrade(bronze, 23)) b = b.add(tmp.wood.logEffects.jungle)
                return b
            },
            effect(x) {
                let effect = ExpantaNum.pow(this.effBase(), x.add(this.free()).max(0))
                return effect
            },
            unlocked() { return hasUpgrade(stone, 32) },
            canAuto() { return hasUpgrade(constantan, 35) },
            auto() {
                if (this.canAuto())
                    this.buyMax()
            },
        },
        21: {
            title: "聚合奇点-石头",
            cost(x) { return d(Number.MAX_VALUE).pow(x.max(0).pow(5)).times(Number.MAX_VALUE) },
            display() {
                let display = `加成石头获取<br>
                效果公式：${format(this.effBase())}<sup>x</sup><br>
                购买数量：${formatWhole(player[this.layer].buyables[this.id])}<br>
                凝聚需求量：${format(this.cost())} 石头`
                return display
            },
            canAfford() { return player[this.layer].points.gte(this.cost()) },
            buyMax() {
                if (this.canAfford())
                    return setBuyableAmount(stone, 21, player.stone.points.div(Number.MAX_VALUE).max(1).logBase(Number.MAX_VALUE).root(5).floor().add(1))
            },
            canBuyMax() { return hasMilestone(sing_fus, 0) },
            buy() {
                if (!this.canBuyMax()) player[this.layer].points = player[this.layer].points.sub(this.cost()).max(0),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (this.canBuyMax()) this.buyMax()
            },
            effBase() {
                let b = d(1e20)
                if (hasCraftingItem(192)) b = b.pow(5)
                return b
            },
            effect(x) {
                let effect = ExpantaNum.pow(this.effBase(), x.max(0))
                return effect
            },
            unlocked() { return hasNormalAchievement(63) },
            canAuto() { return hasMilestone(sing_fus, 0) },
            auto() {
                if (this.canAuto())
                    this.buyMax()
            },
            style() {
                return {
                    'height': '120px',
                    'box-shadow': '0 0 20px #4a4a4a',
                }
            }
        },
    },

    milestones: {
        0: {
            requirementDescription() { return `获得1,000,000石头和1,000合成台` },
            effectDescription() { return `在购买石头升级8后，允许你在破坏石头时获得沙子` },
            done() { return player.stone.points.gte(1000000) && player[ct].points.gte(1000) },
            unlocked() { return true },
        },
        1: {
            requirementDescription() { return `获得150粘土球` },
            effectDescription() { return `解锁更多熔炼配方` },
            done() { return player.stone.clay.gte(150) },
            unlocked() { return hasMilestone(brass, 0) },
        },
    },

    clickables: {
        11: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = "点击挖掘"
                return d
            },
            canClick() { return !player.stone.destroying && hasCraftingItem(12) },
            onClick() {
                if (!player.stone.destroying) player.stone.destroying = true
            },
            unlocked() { return tmp.stone.layerShown },
            style() {
                return {
                    'min-height': '50px',
                    'width': '120px',
                    'font-size': '20px'
                }
            },
        },
    },

    bars: {
        stoneDestroying: {
            direction: RIGHT,
            width: 360,
            height: 60,
            display() { return `进度: ${format(player.stone.progress)}/${format(hardness(stone))}` },
            progress() { return player.stone.progress.div(hardness(stone)) },
            unlocked() { return tmp.stone.layerShown },
            fillStyle() { return { "background-color": "#4a4a4a" } },
            baseStyle() { return { "background-color": "rgba(0,0,0,0)" } },
        },
    },

    otherGain: {
        dirt() {
            let gain = tmp.stone.gainMult.max(0).div(360).root(1.1).floor()
            if (!hasUpgrade(stone, 23)) gain = d(0)
            return gain
        },
        sand() {
            let gain = this.dirt().max(0).div(180).root(1.25).floor()
            if (!hasUpgrade(stone, 23) || !hasMilestone(stone, 0)) gain = d(0)
            return gain
        },
        coal() {
            let gain = this.sand().max(0).div(144000000).root(2).floor().times(100)
            if (!hasUpgrade(stone, 35) || !hasUpgrade(stone, 23)) gain = d(0)
            return gain
        },
        clay() {
            let gain = this.coal().max(0).div('1e15000').max(1).logBase(1e100).pow(2).floor()
            if (!hasMilestone(brass, 1)) gain = d(0)
            return gain
        },
        basalt() {
            let gain = this.clay().max(0).div(7e84).pow(0.05)
            if (hasUpgrade(emerald, 11)) gain = gain.pow(1.5)
            if (hasCraftingItem(441)) gain = gain.times(10)
            if (hasUpgrade(emerald, 22)) gain = gain.times(upgradeEffect(emerald, 22))
            gain = gain.floor()
            if (this.clay().lt(7e84)) gain = d(0)
            return gain
        },
        gravel() {

        },
        marble() {

        },
    },

    update(diff) {
        if (player.stone.destroying) player.stone.progress = player.stone.progress.add(player.stone.speed.times(diff))
        if (player.stone.progress.gte(hardness(stone))) player.stone.progress = d(0),
            player.stone.destroying = false,
            player.stone.points = player.stone.points.add(tmp.stone.gainMult),
            player.stone.dirt = player.stone.dirt.add(tmp.stone.otherGain.dirt),
            player.stone.sand = player.stone.sand.add(tmp.stone.otherGain.sand),
            player.stone.coal = player.stone.coal.add(tmp.stone.otherGain.coal),
            player.stone.clay = player.stone.clay.add(tmp.stone.otherGain.clay),
            player.stone.basalt = player.stone.basalt.add(tmp.stone.otherGain.basalt)

        if (player.stone.points.gt(player.stone.best)) player.stone.best = player.stone.points

        //挖掘速度
        let speed = d(0)
        if (hasCraftingItem(12)) speed = speed.add(2)
        if (hasCraftingItem(22)) speed = speed.times(3)
        if (hasUpgrade(wood, 33)) speed = speed.times(1.2)
        if (hasCraftingItem(41)) speed = speed.times(5)
        if (hasCraftingItem(71)) speed = speed.times(3)
        if (hasCraftingItem(82)) speed = speed.times(5)
        if (hasCraftingItem(111)) speed = speed.times(3)
        if (hasCraftingItem(262)) speed = speed.times(2.25)
        if (hasCraftingItem(322)) speed = speed.times(10)
        if (hasCraftingItem(421)) speed = speed.times(3)
        if (hasCraftingItem(441)) speed = speed.times(1.25)
        if (hasCraftingItem(461)) speed = speed.times(2.5)
        player.stone.speed = speed

        //奇点
        player.stone.singularity = player.stone.buyables[21]
    },

    tabFormat: [
        ["display-text", function () { return getPointsDisplay() }],
        "main-display",
        ["display-text", () => `你同时最多拥有 ${formatWhole(player.stone.best)} 石头`],
        "blank",
        ["display-text", () => `合成合成台不会重置石头相关内容`],
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "dig": {
                unlocked() { return tmp.stone.layerShown },
                name() { return '挖掘' },
                content: [
                    ["blank", "15px"],
                    ["row", [["bar", "stoneDestroying"], "blank", "clickables",]],
                    "blank",
                    ["display-text", function () { return `挖掘速度：${format(player.stone.speed)}/秒` }],
                    ["display-text", function () { return `破坏一次的石头获取数量：${textStyle_h2(formatWhole(tmp.stone.gainMult), '4a4a4a')}` }],
                    ["display-text", function () { return `硬度：${formatWhole(hardness(stone))}` }],
                    ["display-text", function () { return `挖掘等级：0` }],
                    "blank",
                    ["display-text", function () { return `在获取石头之前，你需要一把木镐！` }],
                ]
            },
            "upgrades": {
                unlocked() { return true },
                name() { return '升级' },
                content: [
                    ["blank", "15px"],
                    ["raw-html", () => `<h4 style="opacity:.5">`],
                    ["upgrades", [1, 2, 3, 4, 5, 6, 7, 8, 9]]
                ]
            },
            "milestones": {
                unlocked() { return true },
                name() { return '里程碑' },
                content: [
                    ["blank", "15px"],
                    "milestones"
                ]
            },
            "buyables": {
                unlocked() { return hasUpgrade(stone, 32) },
                name() { return '购买项' },
                content: [
                    ["blank", "15px"],
                    ["buyables", [1]]
                ]
            },
            "more dig": {
                unlocked() { return hasUpgrade(stone, 23) },
                name() { return '更多挖掘' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { return `按下shift查看相关获取公式，获取默认向下取整` }],
                    "blank",
                    ["display-text", function () { if (hasUpgrade(stone, 23)) return `你有 ${textStyle_h2(formatWhole(player.stone.dirt), '5f452f')} 泥土` }],
                    ["display-text", function () {
                        if (hasUpgrade(stone, 23)) return shiftDown ? `泥土获取公式：<sup>1.1</sup>√(石头每次/360)` : ""
                    }],
                    ["display-text", function () { if (hasUpgrade(stone, 23) && hasMilestone(stone, 0)) return `你有 ${textStyle_h2(formatWhole(player.stone.sand), 'd6cf97')} 沙子` }],
                    ["display-text", function () {
                        if (hasUpgrade(stone, 23) && hasMilestone(stone, 0)) return shiftDown ? `沙子获取公式：(泥土每次/180)<sup>0.8</sup>` : ""
                    }],
                    ["display-text", function () { if (hasUpgrade(stone, 35) && hasUpgrade(stone, 23)) return `你有 ${textStyle_h2(formatWhole(player.stone.coal), '2e2e2e', 'ffffff')} 煤炭` }],
                    ["display-text", function () {
                        if (hasUpgrade(stone, 23) && hasUpgrade(stone, 35)) return shiftDown ? `煤炭获取公式：(沙子每次/${f(144000000)})<sup>0.5</sup>` : ""
                    }],
                    ["display-text", function () { if (hasMilestone(brass, 1)) return `你有 ${textStyle_h2(formatWhole(player.stone.clay), '8890a9')} 粘土球` }],
                    ["display-text", function () {
                        if (hasMilestone(brass, 1)) return shiftDown ? `粘土球获取公式：(log<sub>${f(1e100)}</sub>(煤炭每次/${f('1e15000')}))<sup>2</sup>` : ""
                    }],
                    ["display-text", function () { if (hasUpgrade(diamond, 33)) return `你有 ${textStyle_h2(formatWhole(player.stone.basalt), '5b5b5b')} 玄武岩` }],
                    ["display-text", function () {
                        let extraMult = d(1)
                        if (hasCraftingItem(441)) extraMult = extraMult.times(10)
                        if (hasUpgrade(emerald, 22)) extraMult = extraMult.times(upgradeEffect(emerald, 22))
                        let em = extraMult.gt(1) ? f(extraMult) + "·" : ""
                        let p = '0.05'
                        if (hasUpgrade(emerald, 11)) p = '0.075'
                        if (hasUpgrade(diamond, 33)) return shiftDown ? `玄武岩获取公式：${em}(粘土球每次/${f(7e84)})<sup>${p}</sup>` : ""
                    }],
                    ["row", [["bar", "stoneDestroying"], "blank", "clickables",]],
                    "blank",
                    ["display-text", function () { return `挖掘速度：${format(player.stone.speed)}/秒` }],
                    ["display-text", function () { return `破坏一次的石头获取数量：${textStyle_h2(formatWhole(tmp.stone.gainMult), '4a4a4a')}` }],
                    ["display-text", function () { if (hasUpgrade(stone, 23)) return `破坏一次石头可额外产出 ${textStyle_h2(formatWhole(tmp.stone.otherGain.dirt), '5f452f')} 泥土 （基于石头获取，开始于360石头/次）` }],
                    ["display-text", function () { if (hasUpgrade(stone, 23) && hasMilestone(stone, 0)) return `破坏一次石头可额外产出 ${textStyle_h2(formatWhole(tmp.stone.otherGain.sand), 'd6cf97')} 沙子 （基于泥土获取，开始于180泥土/次）` }],
                    ["display-text", function () { if (hasUpgrade(stone, 35) && hasUpgrade(stone, 23)) return `破坏一次石头可额外产出 ${textStyle_h2(formatWhole(tmp.stone.otherGain.coal), '2e2e2e', 'ffffff')} 煤炭 （基于沙子获取，开始于${f(144000000)}沙子/次）` }],
                    ["display-text", function () { if (hasMilestone(brass, 1)) return `破坏一次石头可额外产出 ${textStyle_h2(formatWhole(tmp.stone.otherGain.clay), '8890a9')} 粘土球 （基于煤炭获取，开始于${f('1e15000')}煤炭/次）` }],
                    ["display-text", function () { if (hasUpgrade(diamond, 33)) return `破坏一次石头可额外产出 ${textStyle_h2(formatWhole(tmp.stone.otherGain.basalt), '5b5b5b')} 玄武岩 （基于粘土球获取，开始于${f(7e84)}粘土球/次）` }],
                ]
            },
            "singularity": {
                unlocked() { return hasNormalAchievement(63) },
                name() { return '奇点' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { if (hasNormalAchievement(63)) return `你有 ${textStyle_h2(fw(player.stone.singularity), '4a4a4a')} 石头奇点，加成石头获取 ${textStyle_h2(fw(buyableEffect(stone, 21)) + "x", '4a4a4a')}` }],
                    "blank",
                    ["buyables", [2]]
                ]
            },
        },
    },
})

//世界1层3：铜
addLayer("copper", {
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: d(0),             // "points" is the internal name for the main resource of the layer.
            ore: d(0),
            molten: d(0),
            miningLevel: d(1),
            rarity: d(3),
            progress: d(0),
            findingProgress: d(0),
            hardness: d(75),
            destroying: false,
            finding: false,
            found: false,
            speed: d(1), //找矿速度
            singularity: d(0),
        }
    },

    color: "#ffb41d",                       // The color for this layer, which affects many elements.
    nodeStyle: {
        "background": "linear-gradient(90deg, #ea8601 0%, #ffb53c 100%)",
    },
    resource: "铜锭",            // The name of this layer's main prestige resource.
    row: 1,                                 // The row this layer is on (0 is the first row).
    position: 2,
    symbol: '铜',

    baseResource: "points",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.points },  // A function to return the current amount of baseResource.

    requires: d(10),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "normal",                         // Determines the formula used for calculating prestige currency.
    exponent: 0.5,                          // "normal" prestige gain is (currency^exponent).

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        m = d(1)                            // 矿物的gainMult是给对应矿石的
        if (hasUpgrade(copper, 13)) m = m.times(3)
        if (hasUpgrade(copper, 15)) m = m.times(2)
        if (hasUpgrade(copper, 21)) m = m.times(upgradeEffect(copper, 21))
        if (hasUpgrade(tin, 14)) m = m.times(upgradeEffect(tin, 14))
        if (hasUpgrade(bronze, 11)) m = m.times(upgradeEffect(bronze, 11))
        if (hasUpgrade(iron, 13)) m = m.times(upgradeEffect(iron, 13))
        if (hasNormalAchievement(73)) m = m.times(buyableEffect(sing_fus, 11))
        return m
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return d(1)
    },

    layerShown() { return hasNormalAchievement(24) },          // Returns a bool for if this layer's node should be visible in the tree.

    doReset(resettingLayer) {
        if (layers[resettingLayer] == ct) {
            return undefined
        }
        if (layers[resettingLayer] == furnace) {
            return undefined
        }
        if (hasMilestone(furnace, 0)) return undefined
    },

    upgrades: {
        11: {
            title: "跨越数十亿年",
            description: "5x合成台获取",
            currencyInternalName: "ore",
            currencyDisplayName: "铜矿石",
            currencyLayer: copper,
            cost() { return new ExpantaNum(1) },
            unlocked() { return tmp.copper.layerShown },
        },
        12: {
            title: "铜矿石强化",
            description: "需求：等级15<br>从等级14开始，每升1级，经验获取x10，直到等级24",
            currencyInternalName: "ore",
            currencyDisplayName: "铜矿石",
            currencyLayer: copper,
            cost() { return new ExpantaNum(3) },
            canAfford() { return player.level.gte(15) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let lv = player.level
                let eff = ExpantaNum.pow(10, lv.max(14).min(24).sub(14))
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：10<sup>min(max(等级, 14)-24</sup>`
                return t
            },
        },
        13: {
            title: "铜矿矿脉",
            description: "3x铜矿石获取",
            currencyInternalName: "ore",
            currencyDisplayName: "铜矿石",
            currencyLayer: copper,
            cost() { return new ExpantaNum(5) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        14: {
            title: "深板岩",
            description: "需求：等级17<br>等级加成石头获取",
            currencyInternalName: "ore",
            currencyDisplayName: "铜矿石",
            currencyLayer: copper,
            cost() { return new ExpantaNum(12) },
            canAfford() { return player.level.gte(17) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.level.max(0).times(2).pow(0.8).floor()
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：⌊(2·等级)<sup>0.8</sup>⌋`
                return t
            },
        },
        15: {
            title: "深层铜矿石",
            description: "双倍铜矿石获取",
            cost() { return new ExpantaNum(10) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        21: {
            title: "大型铜矿矿脉",
            description: "等级加成铜矿石获取",
            cost() { return new ExpantaNum(50) },
            unlocked() { return hasMilestone(ct, 1) },
            effect() {
                let eff = player.level.max(0).div(3).floor().add(1)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：⌊(等级/3)⌋+1`
                return t
            },
        },
        22: {
            title: "更大的熔炉",
            description: "等级加成熔炼铜锭的倍率",
            currencyInternalName: "ore",
            currencyDisplayName: "铜矿石",
            currencyLayer: copper,
            cost() { return new ExpantaNum(500) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.level.max(0).div(6).floor().add(1)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：⌊(等级/6)⌋+1`
                return t
            },
        },
        23: {
            title: "铜块",
            description: "每有9个铜锭，此升级对木头获取的倍率+1",
            cost() { return new ExpantaNum(360) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.copper.points.max(0).div(9).floor().add(1)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：⌊(铜锭/9)⌋+1`
                return t
            },
        },
        24: {
            title: "熔炼工艺",
            description: "等级加成熔炼玻璃的倍率",
            currencyInternalName: "points",
            currencyDisplayName: "木头",
            currencyLayer: wood,
            cost() { return new ExpantaNum(5e12) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.level.max(0).div(6).floor().add(1)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：⌊(等级/6)⌋+1`
                return t
            },
        },
        25: {
            title: "同级矿石",
            description: "解锁新层级：锡<br>同时允许你前往熔炉配方界面解锁锡锭的熔炼",
            currencyInternalName: "glass",
            currencyDisplayName: "玻璃",
            currencyLayer: furnace,
            cost() { return new ExpantaNum(1333) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        // Look in the upgrades docs to see what goes here!
    },

    clickables: {
        11: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = "点击寻找"
                return d
            },
            canClick() { return !player.copper.finding && !player.copper.destroying && !player.copper.found && isAtLocation('overworld') },
            onClick() {
                if (!player.copper.finding) player.copper.finding = true
            },
            unlocked() { return tmp.copper.layerShown },
            style() {
                return {
                    'min-height': '50px',
                    'width': '120px',
                    'font-size': '20px'
                }
            },
        },
        12: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = "点击挖掘"
                return d
            },
            canClick() { return !player.copper.destroying && player.copper.found },
            onClick() {
                if (!player.copper.destroying) player.copper.destroying = true
            },
            unlocked() { return tmp.copper.layerShown },
            style() {
                return {
                    'min-height': '50px',
                    'width': '120px',
                    'font-size': '20px'
                }
            },
        },
    },

    bars: {
        copperFinding: {
            direction: RIGHT,
            width: 360,
            height: 60,
            display() { return `找矿进度: ${format(player.copper.findingProgress)}/${format(rarity(copper))}` },
            progress() { let p = player.copper.findingProgress.div(rarity(copper)); if (player.copper.found) p = d(1); return p },
            unlocked() { return tmp.copper.layerShown },
            fillStyle() { return { "background-color": "#ffb41d" } },
            baseStyle() { return { "background-color": "rgba(0,0,0,0)" } },
        },
        copperDestroying: {
            direction: RIGHT,
            width: 360,
            height: 60,
            display() { return `进度: ${format(player.copper.progress)}/${format(hardness(copper))}` },
            progress() { return player.copper.progress.div(hardness(copper)) },
            unlocked() { return tmp.copper.layerShown },
            fillStyle() { return { "background-color": "#ffb41d" } },
            baseStyle() { return { "background-color": "rgba(0,0,0,0)" } },
        },
    },

    update(diff) {
        if (player.copper.finding) player.copper.findingProgress = player.copper.findingProgress.add(player.copper.speed.times(diff))
        if (player.copper.findingProgress.gte(rarity(copper))) player.copper.findingProgress = d(0),
            player.copper.finding = false,
            player.copper.found = true

        if (player.copper.destroying) player.copper.progress = player.copper.progress.add(player.stone.speed.times(diff))
        if (player.copper.progress.gte(hardness(copper))) player.copper.progress = d(0),
            player.copper.found = false,
            player.copper.destroying = false,
            player.copper.ore = player.copper.ore.add(tmp.copper.gainMult)

        if (player.copper.points.gt(player.copper.best)) player.copper.best = player.copper.points

        //寻找速度
        let speed = d(1)
        if (hasCraftingItem(42)) speed = speed.times(3)
        if (hasCraftingItem(131)) speed = speed.times(3)
        if (hasCraftingItem(261)) speed = speed.times(10)
        if (hasCraftingItem(342)) speed = speed.times(5)
        if (hasCraftingItem(481)) speed = speed.times(5)
        player.copper.speed = speed
    },

    tabFormat: [
        ["display-text", function () { return getPointsDisplay() }],
        ["display-text", () => `你有 ${textStyle_h2(formatWhole(player.copper.ore), 'ffb41d')} 铜矿石`],
        "main-display",
        ["display-text", () => `你同时最多拥有 ${formatWhole(player.copper.best)} 铜锭`],
        "blank",
        ["display-text", () => `合成合成台不会重置铜相关内容`],
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "dig": {
                unlocked() { return tmp.copper.layerShown },
                name() { return '挖掘' },
                content: [
                    ["blank", "15px"],
                    ["row", [["bar", "copperFinding"], "blank", ["clickable", 11],]],
                    "blank",
                    ["row", [["bar", "copperDestroying"], "blank", ["clickable", 12],]],
                    "blank",
                    ["display-text", function () { return player.copper.found ? `你找到了一处铜矿石` : `你尚未找到铜矿石` }],
                    "blank",
                    ["display-text", function () { return `找矿速度：${format(player.copper.speed)}/秒` }],
                    ["display-text", function () { return `挖掘速度：${format(player.stone.speed)}/秒` }],
                    ["display-text", function () { return `破坏一次的铜矿石获取数量：${textStyle_h2(formatWhole(tmp.copper.gainMult), 'ffb41e')}` }],
                    ["display-text", function () { return `稀有度：${formatWhole(rarity(copper))}` }],
                    ["display-text", function () { return `硬度：${formatWhole(hardness(copper))}` }],
                    ["display-text", function () { return `挖掘等级：1` }],
                    ["display-text", function () { return `需要在主世界挖掘` }],
                    "blank",
                    ["display-text", function () { return `对于矿石，你需要先找到才能挖掘！` }],
                ]
            },
            "upgrades": {
                unlocked() { return tmp.copper.layerShown },
                name() { return '升级' },
                content: [
                    ["blank", "15px"],
                    "upgrades",
                ]
            },
        },
    },

})

//世界1层4：锡
addLayer("tin", {
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: d(0),             // "points" is the internal name for the main resource of the layer.
            ore: d(0),
            molten: d(0),
            miningLevel: d(1),
            rarity: d(6),
            progress: d(0),
            findingProgress: d(0),
            hardness: d(90),
            destroying: false,
            finding: false,
            found: false,
            singularity: d(0),
        }
    },

    color: "#c4dce1",                       // The color for this layer, which affects many elements.
    nodeStyle: { "background": "linear-gradient(90deg, #c4dce1 0%, #d3e4e4 100%)" },
    resource: "锡锭",            // The name of this layer's main prestige resource.
    row: 1,                                 // The row this layer is on (0 is the first row).
    position: 3,
    symbol: '锡',

    baseResource: "points",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.points },  // A function to return the current amount of baseResource.

    requires: d(10),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "normal",                         // Determines the formula used for calculating prestige currency.
    exponent: 0.5,                          // "normal" prestige gain is (currency^exponent).

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        m = d(1)                            // 矿物的gainMult是给对应矿石的
        if (hasUpgrade(tin, 13)) m = m.times(upgradeEffect(tin, 13))
        if (hasUpgrade(bronze, 12)) m = m.times(upgradeEffect(bronze, 12))
        if (hasCraftingItem(92)) m = m.times(tmp.bronze.bronzePower.effect)
        if (hasMilestone(sing_fus, 1)) m = m.times(buyableEffect(sing_fus, 12))
        return m
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return d(1)
    },

    layerShown() { return hasNormalAchievement(34) },          // Returns a bool for if this layer's node should be visible in the tree.

    doReset(resettingLayer) {
        return undefined
    },

    upgrades: {
        11: {
            title: "倍增强化",
            description: "木头倍增器的基数x2",
            cost() { return new ExpantaNum(6) },
            unlocked() { return hasCraftingItem(71) },
        },
        12: {
            title: "资源绑定",
            description: "铜锭加成石头获取",
            cost() { return new ExpantaNum(7) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.copper.points.max(1).pow(0.75)
                if (hasCraftingItem(82)) eff = eff.pow(2)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：铜锭<sup>0.75</sup>`
                if (hasCraftingItem(82)) t = `公式：铜锭<sup>1.5</sup>`
                return t
            },
        },
        13: {
            title: "锡矿脉",
            description: "等级加成锡矿石获取",
            cost() { return new ExpantaNum(8) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.level.max(0).div(5).floor().add(1)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：⌊(等级/5)⌋+1`
                return t
            },
        },
        14: {
            title: "铜矿石加速",
            description: "锡锭加成铜矿石获取以及铜锭熔炼倍率",
            cost() { return new ExpantaNum(24) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.tin.points.max(1).pow(0.77).floor()
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：⌊锡锭<sup>0.77</sup>⌋`
                return t
            },
        },
        15: {
            title: "二合一",
            description: "解锁合金炉（制造区域层级，无重置）",
            cost() { return new ExpantaNum(50) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
    },

    clickables: {
        11: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = "点击寻找"
                return d
            },
            canClick() { return !player.tin.finding && !player.tin.destroying && !player.tin.found && isAtLocation('overworld') },
            onClick() {
                if (!player.tin.finding) player.tin.finding = true
            },
            unlocked() { return tmp.tin.layerShown },
            style() {
                return {
                    'min-height': '50px',
                    'width': '120px',
                    'font-size': '20px'
                }
            },
        },
        12: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = "点击挖掘"
                return d
            },
            canClick() { return !player.tin.destroying && player.tin.found },
            onClick() {
                if (!player.tin.destroying) player.tin.destroying = true
            },
            unlocked() { return tmp.tin.layerShown },
            style() {
                return {
                    'min-height': '50px',
                    'width': '120px',
                    'font-size': '20px'
                }
            },
        },
    },

    bars: {
        tinFinding: {
            direction: RIGHT,
            width: 360,
            height: 60,
            display() { return `找矿进度: ${format(player.tin.findingProgress)}/${format(rarity(tin))}` },
            progress() { let p = player.tin.findingProgress.div(rarity(tin)); if (player.tin.found) p = d(1); return p },
            unlocked() { return tmp.tin.layerShown },
            fillStyle() { return { "background-color": "#c4dce1" } },
            baseStyle() { return { "background-color": "rgba(0,0,0,0)" } },
            textStyle() { return { "color": "#647a8e" } },
        },
        tinDestroying: {
            direction: RIGHT,
            width: 360,
            height: 60,
            display() { return `进度: ${format(player.tin.progress)}/${format(hardness(tin))}` },
            progress() { return player.tin.progress.div(hardness(tin)) },
            unlocked() { return tmp.tin.layerShown },
            fillStyle() { return { "background-color": "#c4dce1" } },
            baseStyle() { return { "background-color": "rgba(0,0,0,0)" } },
            textStyle() { return { "color": "#647a8e" } },
        },
    },

    update(diff) {
        if (player.tin.finding) player.tin.findingProgress = player.tin.findingProgress.add(player.copper.speed.times(diff))
        if (player.tin.findingProgress.gte(rarity(tin))) player.tin.findingProgress = d(0),
            player.tin.finding = false,
            player.tin.found = true

        if (player.tin.destroying) player.tin.progress = player.tin.progress.add(player.stone.speed.times(diff))
        if (player.tin.progress.gte(hardness(tin))) player.tin.progress = d(0),
            player.tin.found = false,
            player.tin.destroying = false,
            player.tin.ore = player.tin.ore.add(tmp.tin.gainMult)

        if (player.tin.points.gt(player.tin.best)) player.tin.best = player.tin.points
    },

    tabFormat: [
        ["display-text", function () { return getPointsDisplay() }],
        ["display-text", () => `你有 ${textStyle_h2(formatWhole(player.tin.ore), 'c4dce1')} 锡矿石`],
        "main-display",
        ["display-text", () => `你同时最多拥有 ${formatWhole(player.tin.best)} 锡锭`],
        "blank",
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "dig": {
                unlocked() { return tmp.tin.layerShown },
                name() { return '挖掘' },
                content: [
                    ["blank", "15px"],
                    ["row", [["bar", "tinFinding"], "blank", ["clickable", 11],]],
                    "blank",
                    ["row", [["bar", "tinDestroying"], "blank", ["clickable", 12],]],
                    "blank",
                    ["display-text", function () { return player.tin.found ? `你找到了一处锡矿石` : `你尚未找到锡矿石` }],
                    "blank",
                    ["display-text", function () { return `找矿速度：${format(player.copper.speed)}/秒` }],
                    ["display-text", function () { return `挖掘速度：${format(player.stone.speed)}/秒` }],
                    ["display-text", function () { return `破坏一次的锡矿石获取数量：${textStyle_h2(formatWhole(tmp.tin.gainMult), 'c4dce1')}` }],
                    ["display-text", function () { return `稀有度：${formatWhole(rarity(tin))}` }],
                    ["display-text", function () { return `硬度：${formatWhole(hardness(tin))}` }],
                    ["display-text", function () { return `挖掘等级：1` }],
                    ["display-text", function () { return `需要在主世界挖掘` }],
                    "blank",
                    ["display-text", function () { return `对于矿石，你需要先找到才能挖掘！` }],
                ]
            },
            "upgrades": {
                unlocked() { return tmp.tin.layerShown },
                name() { return '升级' },
                content: [
                    ["blank", "15px"],
                    "upgrades",
                ]
            },
        },
    },

})

//世界1层5：青铜
addLayer("bronze", {
    componentStyles: {
        "buyable"() {
            return {
                'margin-left': '-7px',
                'margin-right': '-7px',
            }
        }
    },
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: d(0),             // "points" is the internal name for the main resource of the layer.
            ore: d(0),
            molten: d(0),
            power: d(0),
        }
    },

    color: "#ffd7a1",                       // The color for this layer, which affects many elements.
    nodeStyle: {
        "background": "linear-gradient(90deg, #b77b2f 0%, #ffd7a1 80%, #ffeed8 100%)",
    },
    resource: "青铜锭",            // The name of this layer's main prestige resource.
    symbol: "青铜",
    row: 1,                                 // The row this layer is on (0 is the first row).
    position: 4,
    baseResource: "points",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.points },  // A function to return the current amount of baseResource.

    requires: d(10),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "normal",                         // Determines the formula used for calculating prestige currency.
    exponent: 0.5,                          // "normal" prestige gain is (currency^exponent).
    layerShown() { return hasNormalAchievement(37) },

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        m = d(1)                            // 合金的gainMult是给对应合金倍率的？
        return m
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return d(1)
    },

    doReset() {
        return undefined
    },

    upgrades: {
        11: {
            title: "青铜原材料强化I",
            description: "青铜锭加成铜矿石获取",
            cost() { return new ExpantaNum(45) },
            unlocked() { return hasNormalAchievement(41) },
            effect() {
                let eff = player.bronze.points.max(1).pow(0.55).floor()
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：⌊青铜锭<sup>0.55</sup>⌋`
                return t
            },
        },
        12: {
            title: "青铜原材料强化II",
            description: "青铜锭加成锡矿石获取",
            cost() { return new ExpantaNum(90) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.bronze.points.max(1).pow(0.45).floor()
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：⌊青铜锭<sup>0.45</sup>⌋`
                return t
            },
        },
        13: {
            title: "青铜原材料强化III",
            description: "青铜锭加成铜锭熔炼倍率",
            cost() { return new ExpantaNum(120) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.bronze.points.max(1).pow(0.55).floor()
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：⌊青铜锭<sup>0.55</sup>⌋`
                return t
            },
        },
        14: {
            title: "青铜原材料强化IV",
            description: "青铜锭加成锡锭熔炼倍率",
            cost() { return new ExpantaNum(140) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.bronze.points.max(1).pow(0.45).floor()
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：⌊青铜锭<sup>0.45</sup>⌋`
                return t
            },
        },
        15: {
            title: "青铜原材料强化V",
            description: "青铜锭加成自己的合金倍率<br>你现在可以前往合成台界面获取青铜工具图纸",
            cost() { return new ExpantaNum(160) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.bronze.points.max(1).pow(0.3).floor()
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：⌊青铜锭<sup>0.3</sup>⌋`
                return t
            },
        },
        21: {
            title: "超级强化",
            description: "解锁下一个青铜力量强化器",
            currencyInternalName: "power",
            currencyDisplayName: "青铜力量",
            currencyLayer: bronze,
            cost() { return new ExpantaNum(1e18) },
            unlocked() { return hasMilestone(bronze, 2) },
        },
        22: {
            title: "绑定合金倍率",
            description: "青铜锭合金倍率固定为铜锭的1/30和锡锭的1/10的最小值（向上取整）",
            currencyInternalName: "power",
            currencyDisplayName: "青铜力量",
            currencyLayer: bronze,
            cost() { return new ExpantaNum(1e122) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        23: {
            title: "青铜齿轮",
            description: "允许你撸树时获得丛林原木",
            cost() { return new ExpantaNum(1e28) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        24: {
            title: "丛林可可豆",
            description: "等级加成丛林原木获取",
            currencyInternalName: "jungle",
            currencyDisplayName: "丛林原木",
            currencyLayer: wood,
            cost() { return new ExpantaNum(275) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.level.max(1)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：等级`
                return t
            },
        },
        25: {
            title: "二级矿石",
            description: "需求：等级70<br>解锁两种新矿物（挖掘需要一定条件）",
            canAfford() { return player.level.gte(70) },
            currencyInternalName: "jungle",
            currencyDisplayName: "丛林原木",
            currencyLayer: wood,
            cost() { return new ExpantaNum(16384) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
    },

    buyables: {
        11: {
            title: "青铜力量强化器MK.1",
            cost(x) { return d(5).pow(x.max(0).pow(1.35)).times(2) },
            free() {
                let f = d(0)
                if (hasMilestone(bronze, 4)) f = f.add(getBuyableAmount(bronze, 13))
                if (hasUpgrade(lead, 25)) f = f.add(getBuyableAmount(bronze, 21))
                if (hasUpgrade(invar, 14)) f = f.add(getBuyableAmount(bronze, 12))
                if (hasNormalAchievement(104)) f = f.add(buyableEffect(bronze, 22))
                return f
            },
            display() {
                let freedis = ""
                if (this.free().gte(1)) freedis = ` + ${formatWhole(this.free())}`
                let display = `加成青铜力量获取<br>
                效果公式：${format(this.effBase())}<sup>x</sup><br>
                等级：${formatWhole(player[this.layer].buyables[this.id])}${freedis}<br>
                当前效果：${format(this.effect())}x<br>
                价格：${format(this.cost())} 青铜力量`
                return display
            },
            canAfford() { return player[this.layer].power.gte(this.cost()) },
            buyMax() {
                if (this.canAfford())
                    return setBuyableAmount(bronze, 11, player.bronze.power.div(2).max(1).logBase(5).root(1.35).floor().add(1))
            },
            enableHoldBuy_diff() {
                return inChallenge(nickel, 12)
            },
            holdBuy_diff() {
                if (this.canAfford()) setBuyableAmount(bronze, 11, getBuyableAmount(bronze, 11).add(options.updatingRate / 20).min(player.bronze.power.div(2).max(1).logBase(5).root(1.35).floor().add(1)))
            },
            holdBuy_stop() {
                if (inChallenge(nickel, 12) && this.canAfford()) setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).floor())
            },
            canBuyMax() { return false },
            buy() {
                if (!this.canBuyMax()) player[this.layer].power = player[this.layer].power.sub(this.cost()).max(0),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (this.canBuyMax()) this.buyMax()
            },
            effBase() {
                let b = player.bronze.power.max(10).log10()
                return b
            },
            effect(x) {
                let effect = ExpantaNum.pow(this.effBase(), x.add(this.free()).max(0))
                return effect
            },
            unlocked() { return hasCraftingItem(92) },
            canAuto() { return hasUpgrade(constantan, 35) },
            auto() {
                if (this.canAuto())
                    this.buyMax()
            },
            style() { if (this.canAfford()) return { "background": "linear-gradient(45deg, #b77b2f 0%, #ffd7a1 80%, #ffeed8 100%)" } },
            tooltip: "效果公式的底数为lg(青铜力量)",
        },
        12: {
            title: "青铜力量强化器MK.2",
            cost(x) { return d(10).pow(x.max(0).pow(1.5)).times(1e19) },
            free() {
                let f = d(0)
                if (hasUpgrade(lead, 23)) f = f.add(getBuyableAmount(bronze, 13))
                return f
            },
            display() {
                let freedis = ""
                if (this.free().gte(1)) freedis = ` + ${formatWhole(this.free())}`
                let display = `加成青铜力量获取<br>
                效果公式：${format(this.effBase())}<sup>x</sup><br>
                等级：${formatWhole(player[this.layer].buyables[this.id])}${freedis}<br>
                当前效果：${format(this.effect())}x<br>
                价格：${format(this.cost())} 青铜力量`
                return display
            },
            canAfford() { return player[this.layer].power.gte(this.cost()) },
            buyMax() {
                if (this.canAfford())
                    return setBuyableAmount(bronze, 12, player.bronze.power.div(1e19).max(1).logBase(10).root(1.5).floor().add(1))
            },
            enableHoldBuy_diff() {
                return inChallenge(nickel, 12)
            },
            holdBuy_diff() {
                if (this.canAfford()) setBuyableAmount(bronze, 12, getBuyableAmount(bronze, 12).add(options.updatingRate / 20).min(player.bronze.power.div(1e19).max(1).logBase(10).root(1.5).floor().add(1)))
            },
            holdBuy_stop() {
                if (this.canAfford()) setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).floor())
            },
            canBuyMax() { return false },
            buy() {
                if (!this.canBuyMax()) player[this.layer].power = player[this.layer].power.sub(this.cost()).max(0),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (this.canBuyMax()) this.buyMax()
            },
            effBase() {
                let b = d(10)
                if (hasUpgrade(aluminum, 14)) b = b.times(10)
                if (hasCraftingItem(152)) b = b.add(tmp.wood.logEffects.acacia)
                return b
            },
            effect(x) {
                let effect = ExpantaNum.pow(this.effBase(), x.add(this.free()).max(0))
                return effect
            },
            unlocked() { return hasUpgrade(bronze, 21) },
            canAuto() { return hasUpgrade(constantan, 35) },
            auto() {
                if (this.canAuto())
                    this.buyMax()
            },
            style() { if (this.canAfford()) return { "background": "linear-gradient(45deg, #b77b2f 0%, #ffd7a1 80%, #ffeed8 100%)" } }
        },
        13: {
            title: "青铜力量强化器MK.3",
            cost(x) { return d(100).pow(x.max(0).pow(2)).times(1e214) },
            free() {
                let f = d(0)
                if (hasUpgrade(lead, 24)) f = f.add(getBuyableAmount(bronze, 21))
                return f
            },
            display() {
                let freedis = ""
                if (this.free().gte(1)) freedis = ` + ${formatWhole(this.free())}`
                let display = `加成青铜力量获取<br>
                效果公式：${format(this.effBase())}<sup>x</sup><br>
                等级：${formatWhole(player[this.layer].buyables[this.id])}${freedis}<br>
                当前效果：${format(this.effect())}x<br>
                价格：${format(this.cost())} 青铜力量`
                return display
            },
            canAfford() { return player[this.layer].power.gte(this.cost()) },
            buyMax() {
                if (this.canAfford())
                    return setBuyableAmount(bronze, 13, player.bronze.power.div(1e214).max(1).logBase(100).root(2).floor().add(1))
            },
            enableHoldBuy_diff() {
                return inChallenge(nickel, 12)
            },
            holdBuy_diff() {
                if (this.canAfford()) setBuyableAmount(bronze, 13, getBuyableAmount(bronze, 13).add(options.updatingRate / 20).min(player.bronze.power.div(1e214).max(1).logBase(100).root(2).floor().add(1)))
            },
            holdBuy_stop() {
                if (this.canAfford()) setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).floor())
            },
            canBuyMax() { return false },
            buy() {
                if (!this.canBuyMax()) player[this.layer].power = player[this.layer].power.sub(this.cost()).max(0),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (this.canBuyMax()) this.buyMax()
            },
            effBase() {
                let b = player.level.max(1)
                return b
            },
            effect(x) {
                let effect = ExpantaNum.pow(this.effBase(), x.add(this.free()).max(0))
                return effect
            },
            unlocked() { return hasCraftingItem(111) },
            canAuto() { return hasUpgrade(constantan, 35) },
            auto() {
                if (this.canAuto())
                    this.buyMax()
            },
            style() { if (this.canAfford()) return { "background": "linear-gradient(45deg, #b77b2f 0%, #ffd7a1 80%, #ffeed8 100%)" } },
            tooltip: "效果公式的底数为经验等级",
        },
        21: {
            title: "青铜力量强化器MK.4",
            cost(x) { return d(10000).pow(x.max(0).pow(2)).times('1e640') },
            free() {
                let f = d(0)
                return f
            },
            display() {
                let freedis = ""
                if (this.free().gte(1)) freedis = ` + ${formatWhole(this.free())}`
                let display = `加成青铜力量获取<br>
                效果公式：lg(Ni+10)<sup>${fw(this.effPowerFactor())}x</sup> = ${format(this.effBase())}<sup>x</sup><br>
                等级：${formatWhole(player[this.layer].buyables[this.id])}${freedis}<br>
                当前效果：${format(this.effect())}x<br>
                价格：${format(this.cost())} 青铜力量`
                return display
            },
            canAfford() { return player[this.layer].power.gte(this.cost()) },
            buyMax() {
                if (this.canAfford())
                    return setBuyableAmount(bronze, 21, player.bronze.power.div('1e640').max(1).logBase(10000).root(2).floor().add(1))
            },
            enableHoldBuy_diff() {
                return inChallenge(nickel, 12)
            },
            holdBuy_diff() {
                if (this.canAfford()) setBuyableAmount(bronze, 21, getBuyableAmount(bronze, 21).add(options.updatingRate / 20).min(player.bronze.power.div('1e640').max(1).logBase(10000).root(2).floor().add(1)))
            },
            holdBuy_stop() {
                if (this.canAfford()) setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).floor())
            },
            canBuyMax() { return false },
            buy() {
                if (!this.canBuyMax()) player[this.layer].power = player[this.layer].power.sub(this.cost()).max(0),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (this.canBuyMax()) this.buyMax()
            },
            effPowerFactor() {
                let f = d(10)
                if (hasCraftingItem(262)) f = f.add(5)
                return f
            },
            effBase() {
                let b = player.nickel.points.max(0).add(10).log10().pow(this.effPowerFactor())
                return b
            },
            effect(x) {
                let effect = ExpantaNum.pow(this.effBase(), x.add(this.free()).max(0))
                return effect
            },
            unlocked() { return hasUpgrade(nickel, 21) },
            canAuto() { return hasUpgrade(constantan, 35) },
            auto() {
                if (this.canAuto())
                    this.buyMax()
            },
            style() { if (this.canAfford()) return { "background": "linear-gradient(45deg, #b77b2f 0%, #ffd7a1 80%, #ffeed8 100%)" } },
            tooltip: "Ni为镍锭数量",
        },
        22: {
            title: "青铜力量强化器MK.5",
            cost(x) { return d(10).pow(x.pow(1.5).times(1000).add(44550)) },
            free() {
                let f = d(0)
                return f
            },
            display() {
                let freedis = ""
                if (this.free().gte(1)) freedis = ` + ${formatWhole(this.free())}`
                let display = `提供更多的青铜力量强化器MK.1的免费等级<br>
                效果公式：${fw(this.effBase())}x<br>
                等级：${fw(player[this.layer].buyables[this.id])}${freedis}<br>
                当前效果：+${fw(this.effect())}<br>
                价格：${f(this.cost())} 青铜力量`
                return display
            },
            canAfford() { return player[this.layer].power.gte(this.cost()) },
            buyMax() {
                if (this.canAfford())
                    return setBuyableAmount(bronze, 22, player.bronze.power.max(1).log10().sub(44550).div(1000).max(0).root(1.5).floor().add(1))
            },
            canBuyMax() { return false },
            buy() {
                if (!this.canBuyMax()) player[this.layer].power = player[this.layer].power.sub(this.cost()).max(0),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (this.canBuyMax()) this.buyMax()
            },
            effBase() {
                let b = player.brass.max_su.max(0).logBase(2).pow(1.35).times(3).floor()
                return b
            },
            effect(x) {
                let effect = this.effBase().times(x).max(0)
                return effect
            },
            unlocked() { return hasUpgrade(brass, 'a1') },
            canAuto() { return hasMilestone(brass, 1) },
            auto() {
                if (this.canAuto())
                    this.buyMax()
            },
            style() { if (this.canAfford()) return { "background": "linear-gradient(45deg, #b77b2f 0%, #ffd7a1 80%, #ffeed8 100%)" } },
            tooltip: "效果公式的另一个因数为⌊3log<sub>2</sub>(应力)<sup>1.35</sup>⌋",
        },
    },

    bronzePower: {
        gain() {
            let g = d(0)
            if (hasCraftingItem(92)) g = g.add(1),
                g = g.times(buyableEffect(bronze, 11)),
                g = g.times(buyableEffect(bronze, 12)),
                g = g.times(buyableEffect(bronze, 13)),
                g = g.times(buyableEffect(bronze, 21))
            if (hasMilestone(bronze, 0)) g = g.times(milestoneEffect(bronze, 0))

            if (inChallenge(nickel, 11)) g = g.pow(0.5)
            if (inChallenge(nickel, 12)) g = g.pow(player.nickel.chal2nerf)
            return g
        },
        production() {
            player.bronze.power = player.bronze.power.add(this.gain().times(diffout)).max(0)
        },
        effect() {
            let eff = d(10).pow(player.bronze.power.max(0).add(1).log10().root(2))
            if (hasCraftingItem(132)) eff = eff.pow(1.5)
            if (hasCraftingItem(142)) eff = eff.pow(challengeEffect(nickel, 11))
            if (hasCraftingItem(161)) eff = eff.pow(1.5)
            if (hasUpgrade(constantan, 24)) eff = eff.pow(upgradeEffect(constantan, 24))
            if (hasUpgrade(zinc, 24)) eff = eff.pow(upgradeEffect(zinc, 24))
            return eff
        }
    },

    milestones: {
        0: {
            requirementDescription() { return `获得3000青铜力量` },
            effectDescription() { return `青铜锭加成青铜力量获取<br>当前效果：${f(this.effect())}x` },
            done() { return player.bronze.power.gte(3000) },
            effect() { return player.bronze.points.max(0).add(1).root(2) },
            unlocked() { return hasCraftingItem(92) },
        },
        1: {
            requirementDescription() { return `获得1.0000e15青铜力量` },
            effectDescription() { return `你的锡锭熔炼倍率被锁定为锡矿石的10%（向上取整）` },
            done() { return player.bronze.power.gte(1e15) },
            unlocked() { return hasCraftingItem(92) },
        },
        2: {
            requirementDescription() { return `到达等级46` },
            effectDescription() { return `解锁新的青铜升级` },
            done() { return player.level.gte(46) },
            unlocked() { return hasCraftingItem(92) },
        },
        3: {
            requirementDescription() { return `获得1.0000e121青铜力量` },
            effectDescription() { return `你的铜锭熔炼倍率被锁定为铜矿石的10%（向上取整）` },
            done() { return player.bronze.power.gte(1e121) },
            unlocked() { return hasCraftingItem(92) },
        },
        4: {
            requirementDescription() { return `获得1.0000e260青铜力量` },
            effectDescription() { return `青铜力量强化器MK.3提供免费等级到青铜力量强化器MK.1` },
            done() { return player.bronze.power.gte(1e260) },
            unlocked() { return hasCraftingItem(92) },
        },
        5: {
            requirementDescription() { return `获得1.0000e473青铜力量` },
            effectDescription() { return `1000000x经验获取` },
            done() { return player.bronze.power.gte('1e473') },
            unlocked() { return hasCraftingItem(92) },
        },
        6: {
            requirementDescription() { return `获得1.0000e632青铜力量` },
            effectDescription() { return `解锁新的镍升级` },
            done() { return player.bronze.power.gte('1e632') },
            unlocked() { return hasCraftingItem(142) },
        },
    },

    update(diff) {
        if (player.bronze.points.gt(player.bronze.best)) player.bronze.best = player.bronze.points
    },

    tabFormat: [
        ["display-text", function () { return getPointsDisplay() }],
        "main-display",
        ["display-text", () => `你同时最多拥有 ${formatWhole(player.bronze.best)} 青铜锭`],
        "blank",
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "upgrades": {
                unlocked() { return tmp.bronze.layerShown },
                name() { return '升级' },
                content: [
                    ["blank", "15px"],
                    "upgrades",
                ]
            },
            "milestones": {
                unlocked() { return hasCraftingItem(92) },
                name() { return '里程碑' },
                content: [
                    ["blank", "15px"],
                    "milestones",
                ]
            },
            "power": {
                unlocked() { return hasCraftingItem(92) },
                name() { return '青铜力量' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { if (inChallenge(nickel, 12)) return `你当前在挑战“时间削弱”中，青铜力量获取速度变为^${f(player.nickel.chal2nerf, 4)}` }],
                    ["display-text", function () { if (inChallenge(nickel, 12)) return buyBuyableRateText() }],
                    ["display-text", function () { return `你有 ${textStyle_h2(f(player.bronze.power), 'ffd7a1')} 青铜力量，加成锡矿石获取 ${textStyle_h2(f(tmp.bronze.bronzePower.effect) + "x", 'ffd7a1')}` }],
                    ["display-text", function () { return `(+${textStyle_h2(f(tmp.bronze.bronzePower.gain), 'ffd7a1')}/秒)` }],
                    ["display-text", function () {
                        let p = d(1)
                        if (hasCraftingItem(132)) p = p.times(1.5)
                        if (hasCraftingItem(142)) p = p.times(challengeEffect(nickel, 11))
                        if (hasCraftingItem(161)) p = p.times(1.5)
                        if (hasUpgrade(constantan, 24)) p = p.times(upgradeEffect(constantan, 24))
                        if (hasUpgrade(zinc, 24)) p = p.times(upgradeEffect(zinc, 24))
                        let pt = p.gt(1) ? f(p) : ""
                        return shiftDown ? `青铜力量效果公式：10<sup>${pt}lg(x+1)<sup>0.5</sup></sup>` : ""
                    }],
                    "blank",
                    "buyables",
                ]
            },
        },
    },
})

//世界1层6：铁
addLayer("iron", {
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: d(0),             // "points" is the internal name for the main resource of the layer.
            ore: d(0),
            molten: d(0),
            miningLevel: d(2),
            rarity: d(18),
            progress: d(0),
            findingProgress: d(0),
            hardness: d(240),
            destroying: false,
            finding: false,
            found: false,
            water: d(0),
            lava: d(0),
            singularity: d(0),
        }
    },

    color: "#d8d8d8",                       // The color for this layer, which affects many elements.
    nodeStyle: { "background": "linear-gradient(90deg, #d8d8d8 0%, #d8d8d8 50%, #a8a8a8 70%, #5e5e5e 90%)" },
    resource: "铁锭",            // The name of this layer's main prestige resource.
    row: 1,                                 // The row this layer is on (0 is the first row).
    position: 5,
    symbol: '铁',

    baseResource: "points",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.points },  // A function to return the current amount of baseResource.

    requires: d(10),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "normal",                         // Determines the formula used for calculating prestige currency.
    exponent: 0.5,                          // "normal" prestige gain is (currency^exponent).

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        m = d(1)                            // 矿物的gainMult是给对应矿石的
        if (hasUpgrade(iron, 12)) m = m.times(3)
        if (hasMilestone(iron, 0)) m = m.times(5)
        if (hasUpgrade(iron, 22)) m = m.times(upgradeEffect(iron, 22))
        if (hasUpgrade(nickel, 12)) m = m.times(upgradeEffect(nickel, 12))
        if (hasUpgrade(nickel, 22)) m = m.times(challengeEffect(nickel, 12))
        if (hasUpgrade(nickel, 24)) m = m.times(upgradeEffect(nickel, 24))
        if (hasCraftingItem(171)) m = m.times(100000)
        if (hasNormalAchievement(85)) m = m.times(tmp.invar.energy.effect1)
        if (hasMilestone(sing_fus, 2)) m = m.times(buyableEffect(sing_fus, 13))
        return m
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return d(1)
    },

    layerShown() { return hasNormalAchievement(46) },          // Returns a bool for if this layer's node should be visible in the tree.

    doReset(resettingLayer) {
        return undefined
    },

    upgrades: {
        11: {
            title: "标准发展路线",
            description: "1e10x经验获取",
            currencyInternalName: "ore",
            currencyDisplayName: "铁矿石",
            currencyLayer: iron,
            cost() { return new ExpantaNum(3) },
            unlocked() { return tmp.iron.layerShown },
        },
        12: {
            title: "铁矿矿脉",
            description: "需求：等级75<br>3x铁矿石获取",
            currencyInternalName: "ore",
            currencyDisplayName: "铁矿石",
            currencyLayer: iron,
            canAfford() { return player.level.gte(75) },
            cost() { return new ExpantaNum(5) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        13: {
            title: "青铜力量转换器",
            description: "需求：等级75<br>青铜力量现在可以加成铜矿石获取，但是效果倍率降低",
            currencyInternalName: "ore",
            currencyDisplayName: "铁矿石",
            currencyLayer: iron,
            canAfford() { return player.level.gte(75) },
            cost() { return new ExpantaNum(15) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = tmp.bronze.bronzePower.effect.max(1).root(2)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：青铜力量效果<sup>0.5</sup>`
                return t
            },
        },
        14: {
            title: "烧至金黄（指高温发光）",
            description: "需求：等级80<br>在熔炉界面解锁两种新配方",
            currencyInternalName: "ore",
            currencyDisplayName: "铁矿石",
            currencyLayer: iron,
            canAfford() { return player.level.gte(80) },
            cost() { return new ExpantaNum(5) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        15: {
            title: "铁器时代",
            description: "现在可以解锁一系列新合成配方",
            cost() { return new ExpantaNum(1) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        21: {
            title: "超高温",
            description: "3x升温速度",
            currencyInternalName: "lava",
            currencyDisplayName: "mB 熔岩",
            currencyLayer: iron,
            cost() { return new ExpantaNum(500000) },
            unlocked() { return hasMilestone(iron, 1) },
        },
        22: {
            title: "用水赶路",
            description: "水微弱加成铁矿石获取和铁锭熔炼倍率",
            cost() { return new ExpantaNum(60) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.iron.water.max(2).logBase(2).floor().max(1)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：⌊log<sub>2</sub>(max(水, 2))⌋`
                return t
            },
        },
        23: {
            title: "真·刷石机",
            description: "熔岩加成石头获取",
            cost() { return new ExpantaNum(780) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = d(10).pow(player.iron.lava.max(1).log10().times(20).pow(0.85))
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：(20lg(熔岩))<sup>0.85</sup>`
                return t
            },
        },
        24: {
            title: "铁桶扩容",
            description: "需求：等级115<br>铁桶数量加成流体获取",
            currencyInternalName: "lava",
            currencyDisplayName: "mB 熔岩",
            currencyLayer: iron,
            cost() { return new ExpantaNum(1250000) },
            canAfford() { return player.level.gte(115) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.crafting_table.items[122].add(1).max(1)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：铁桶+1`
                return t
            },
        },
        25: {
            title: "铁的工艺",
            description: "需求：等级115<br>能够查看更多合成配方",
            currencyInternalName: "lava",
            currencyDisplayName: "mB 熔岩",
            currencyLayer: iron,
            cost() { return new ExpantaNum(20000000) },
            canAfford() { return player.level.gte(115) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
    },

    milestones: {
        0: {
            requirementDescription() { return `获得2000 mB水` },
            effectDescription() { return `5x铁矿石获取` },
            done() { return player.iron.water.gte(2000) },
            unlocked() { return hasUpgrade(ct, 51) },
        },
        1: {
            requirementDescription() { return `获得5铁桶` },
            effectDescription() { return `解锁更多铁升级` },
            done() { return player.crafting_table.items[122].gte(5) },
            unlocked() { return hasUpgrade(ct, 51) },
        },
    },

    clickables: {
        11: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = "点击寻找"
                return d
            },
            canClick() { return !player.iron.finding && !player.iron.destroying && !player.iron.found && isAtLocation('overworld') },
            onClick() {
                if (!player.iron.finding) player.iron.finding = true
            },
            unlocked() { return tmp.iron.layerShown },
            style() {
                return {
                    'min-height': '50px',
                    'width': '120px',
                    'font-size': '20px'
                }
            },
        },
        12: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = "点击挖掘"
                return d
            },
            canClick() { return !player.iron.destroying && player.iron.found },
            onClick() {
                if (!player.iron.destroying) player.iron.destroying = true
            },
            unlocked() { return tmp.iron.layerShown },
            style() {
                return {
                    'min-height': '50px',
                    'width': '120px',
                    'font-size': '20px'
                }
            },
        },
        21: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = "收集水"
                return d
            },
            canClick() { return true },
            onClick() {
                player.iron.water = player.iron.water.add(tmp.iron.fluidPerBucket.times(player.crafting_table.items[122]))
            },
            unlocked() { return hasUpgrade(ct, 51) },
            style() {
                return {
                    'min-height': '80px',
                    'width': '120px',
                    'font-size': '20px',
                    'background-color': '#2b3cf4'
                }
            },
        },
        22: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = "收集熔岩"
                return d
            },
            canClick() { return true },
            onClick() {
                player.iron.lava = player.iron.lava.add(tmp.iron.fluidPerBucket.times(player.crafting_table.items[122]))
            },
            unlocked() { return hasUpgrade(ct, 51) },
            style() {
                return {
                    'min-height': '80px',
                    'width': '120px',
                    'font-size': '20px',
                    'background-color': '#d76013'
                }
            },
        },
    },

    fluidPerBucket() {
        let f = d(1000)
        if (hasUpgrade(iron, 24)) f = f.times(upgradeEffect(iron, 24))
        return f
    },

    update(diff) {
        if (player.iron.finding) player.iron.findingProgress = player.iron.findingProgress.add(player.copper.speed.times(diff))
        if (player.iron.findingProgress.gte(rarity(iron))) player.iron.findingProgress = d(0),
            player.iron.finding = false,
            player.iron.found = true

        if (player.iron.destroying) player.iron.progress = player.iron.progress.add(player.stone.speed.times(diff))
        if (player.iron.progress.gte(hardness(iron))) player.iron.progress = d(0),
            player.iron.found = false,
            player.iron.destroying = false,
            player.iron.ore = player.iron.ore.add(tmp.iron.gainMult)

        if (player.iron.points.gt(player.iron.best)) player.iron.best = player.iron.points
    },

    bars: {
        ironFinding: {
            direction: RIGHT,
            width: 360,
            height: 60,
            display() { return `找矿进度: ${format(player.iron.findingProgress)}/${format(rarity(iron))}` },
            progress() { let p = player.iron.findingProgress.div(rarity(iron)); if (player.iron.found) p = d(1); return p },
            unlocked() { return tmp.iron.layerShown },
            fillStyle() { return { "background-color": "#d8d8d8" } },
            baseStyle() { return { "background-color": "rgba(0,0,0,0)" } },
            textStyle() { return { "color": "#5e5e5e" } },
        },
        ironDestroying: {
            direction: RIGHT,
            width: 360,
            height: 60,
            display() { return `进度: ${format(player.iron.progress)}/${format(hardness(iron))}` },
            progress() { return player.iron.progress.div(hardness(iron)) },
            unlocked() { return tmp.iron.layerShown },
            fillStyle() { return { "background-color": "#d8d8d8" } },
            baseStyle() { return { "background-color": "rgba(0,0,0,0)" } },
            textStyle() { return { "color": "#5e5e5e" } },
        },
    },

    tabFormat: [
        ["display-text", function () { return getPointsDisplay() }],
        ["display-text", () => `你有 ${textStyle_h2(formatWhole(player.iron.ore), 'd8d8d8')} 铁矿石`],
        "main-display",
        ["display-text", () => `你同时最多拥有 ${formatWhole(player.iron.best)} 铁锭`],
        "blank",
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "dig": {
                unlocked() { return tmp.iron.layerShown },
                name() { return '挖掘' },
                content: [
                    ["blank", "15px"],
                    ["row", [["bar", "ironFinding"], "blank", ["clickable", 11],]],
                    "blank",
                    ["row", [["bar", "ironDestroying"], "blank", ["clickable", 12],]],
                    "blank",
                    ["display-text", function () { return player.iron.found ? `你找到了一处铁矿石` : `你尚未找到铁矿石` }],
                    "blank",
                    ["display-text", function () { return `找矿速度：${format(player.copper.speed)}/秒` }],
                    ["display-text", function () { return `挖掘速度：${format(player.stone.speed)}/秒` }],
                    ["display-text", function () { return `破坏一次的铁矿石获取数量：${textStyle_h2(formatWhole(tmp.iron.gainMult), 'd8d8d8')}` }],
                    ["display-text", function () { return `稀有度：${formatWhole(rarity(iron))}` }],
                    ["display-text", function () { return `硬度：${formatWhole(hardness(iron))}` }],
                    ["display-text", function () { return `挖掘等级：2` }],
                    ["display-text", function () { return `需要在主世界挖掘` }],
                    "blank",
                    ["display-text", function () { return `对于矿石，你需要先找到才能挖掘！` }],
                ]
            },
            "upgrades": {
                unlocked() { return tmp.iron.layerShown },
                name() { return '升级' },
                content: [
                    ["blank", "15px"],
                    "upgrades",
                ]
            },
            "milestones": {
                unlocked() { return tmp.iron.layerShown },
                name() { return '里程碑' },
                content: [
                    ["blank", "15px"],
                    "milestones",
                ]
            },
            "fluid": {
                unlocked() { return hasUpgrade(ct, 51) },
                name() { return '流体' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { return `你有 ${textStyle_h2(formatWhole(player.crafting_table.items[122]) + `/${fw(tmp[ct].clickables[122].limit)}`, 'd8d8d8')} 铁桶` }],
                    ["display-text", function () { return `每个铁桶可以收集 ${textStyle_h2(formatWhole(tmp.iron.fluidPerBucket) + " mB", 'd8d8d8')} 流体` }],
                    "blank",
                    ["display-text", function () { return `你有 ${textStyle_h2(formatWhole(player.iron.water) + " mB", '2b3cf4')} 水` }],
                    ["display-text", function () { return `你有 ${textStyle_h2(formatWhole(player.iron.lava) + " mB", 'd76013')} 熔岩` }],
                    "blank",
                    ["clickables", [2]],

                ]
            },
        },
    },
})

function resetBronzePowerAndBuyables() {
    let BPBs = [11, 12, 13, 21, 22]
    for (i = 0; i < BPBs.length; i++) {
        if (player.bronze.buyables[BPBs[i]].gt(0)) player.bronze.buyables[BPBs[i]] = d(0)
    }
    player.bronze.power = d(0)
}

function buyBuyableRateText() {
    let len = pastTickTimes.length
	if (len <= 3) return " "
	let a = 0
	for (i = 0; i < len; i++) {
		a += pastTickTimes[i]
	}
    let mspt = a / len
    let p1 = ""
	let p2 = ""
	let warn = ""
    let buyRate = 50
    let slow = 0
    let bulk = options.updatingRate / 20
	if (mspt > options.updatingRate) {
		slow = options.updatingRate / mspt
		p1 = "<bdi style='color: #cc0000'>"
		p2 = "</bdi> "
        buyRate = buyRate * slow
        warn = "，建议前往设置界面调整更新频率"
	}
    let text = `MSPT: ${p1 + f(mspt) + p2}，设定的更新频率：${fw(options.updatingRate)}ms，按住的批量购买倍数：${f(bulk)}x，每秒购买项升级预期: ${p1 + f(buyRate) + p2}${warn}`
    return text
}

//世界1层7：镍
addLayer("nickel", {
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: d(0),             // "points" is the internal name for the main resource of the layer.
            ore: d(0),
            molten: d(0),
            miningLevel: d(2),
            rarity: d(36),
            progress: d(0),
            findingProgress: d(0),
            hardness: d(500),
            destroying: false,
            finding: false,
            found: false,
            chal2nerf: d(1),
            singularity: d(0),
        }
    },

    color: "#fffcc0",                       // The color for this layer, which affects many elements.
    nodeStyle: { "background": "linear-gradient(90deg, #fffcc0 0%, #f5f5d7 25%, #fffcc0 50%, #e3df94 75%, #8b8566 100%)" },
    resource: "镍锭",            // The name of this layer's main prestige resource.
    row: 1,                                 // The row this layer is on (0 is the first row).
    position: 6,
    symbol: '镍',

    baseResource: "points",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.points },  // A function to return the current amount of baseResource.

    requires: d(10),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "normal",                         // Determines the formula used for calculating prestige currency.
    exponent: 0.5,                          // "normal" prestige gain is (currency^exponent).

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        m = d(1)                            // 矿物的gainMult是给对应矿石的
        if (hasUpgrade(nickel, 11)) m = m.times(3)
        if (hasUpgrade(nickel, 13)) m = m.times(upgradeEffect(nickel, 13))
        if (hasUpgrade(nickel, 22)) m = m.times(challengeEffect(nickel, 12))
        if (hasUpgrade(aluminum, 23)) m = m.times(upgradeEffect(aluminum, 23))
        if (hasCraftingItem(171)) m = m.times(10000)
        if (hasCraftingItem(202)) m = m.times(tmp.constantan.essence.effect)
        if (hasMilestone(sing_fus, 3)) m = m.times(buyableEffect(sing_fus, 14))
        return m
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return d(1)
    },

    layerShown() { return hasNormalAchievement(46) },          // Returns a bool for if this layer's node should be visible in the tree.

    doReset(resettingLayer) {
        return undefined
    },

    milestones: {
        0: {
            requirementDescription() { return `获得5.0000e15镍矿石` },
            effectDescription() { return `镍锭熔炼倍率锁定为镍矿石的10%` },
            done() { return player.nickel.ore.gte(5e15) },
            unlocked() { return tmp.nickel.layerShown },
        },
    },

    upgrades: {
        11: {
            title: "28号元素",
            description: "3x镍矿石获取",
            currencyInternalName: "ore",
            currencyDisplayName: "镍矿石",
            currencyLayer: nickel,
            cost() { return new ExpantaNum(5) },
            unlocked() { return hasCraftingItem(131) },
        },
        12: {
            title: "Ni→Fe",
            description: "镍矿石较微弱地加成铁矿石获取",
            currencyInternalName: "ore",
            currencyDisplayName: "镍矿石",
            currencyLayer: nickel,
            cost() { return new ExpantaNum(25) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.nickel.ore.max(0).add(2).logBase(2).pow(2).floor().max(1)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：⌊log<sub>2</sub>(镍矿石+2)<sup>2</sup>⌋`
                return t
            },
        },
        13: {
            title: "Fe→Ni",
            description: "铁矿石极微弱地加成镍矿石获取",
            currencyInternalName: "ore",
            currencyDisplayName: "铁矿石",
            currencyLayer: iron,
            cost() { return new ExpantaNum(114514) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.iron.ore.max(0).add(2).ssrt().floor()
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：⌊ssrt(铁矿石+2)⌋`
                return t
            },
        },
        14: {
            title: "高温的用途",
            description: "允许使用熔岩作为燃料，但是熔岩温度过高，同时需要消耗水来冷却。解锁新的熔炼配方",
            currencyInternalName: "ore",
            currencyDisplayName: "镍矿石",
            currencyLayer: nickel,
            cost() { return new ExpantaNum(255) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        15: {
            title: '造"镍"啊',
            description: "解锁更多合成配方",
            cost() { return new ExpantaNum(1) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        21: {
            title: "究级强化",
            description: "解锁下一个青铜力量强化器",
            currencyInternalName: "power",
            currencyDisplayName: "青铜力量",
            currencyLayer: bronze,
            cost() { return new ExpantaNum('1e640') },
            unlocked() { return hasMilestone(bronze, 6) },
        },
        22: {
            title: "挑战2",
            description: "需求：等级186<br>解锁下一个挑战",
            currencyInternalName: "power",
            currencyDisplayName: "青铜力量",
            currencyLayer: bronze,
            cost() { return new ExpantaNum('1e910') },
            canAfford() { return player.level.gte(186) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        23: {
            title: "镍挑战强化",
            description: "需求：等级190<br>力量削弱的奖励基数+0.1",
            currencyInternalName: "power",
            currencyDisplayName: "青铜力量",
            currencyLayer: bronze,
            cost() { return new ExpantaNum('1e990') },
            canAfford() { return player.level.gte(190) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        24: {
            title: "铁矿矿脉",
            description: "需求：等级210<br>镍锭加成铁矿石以及铁锭熔炼倍率",
            currencyInternalName: "power",
            currencyDisplayName: "青铜力量",
            currencyLayer: bronze,
            cost() { return new ExpantaNum('1e1166') },
            canAfford() { return player.level.gte(210) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.nickel.points.max(0).add(1).root(3)
                if (hasUpgrade(lead, 11)) eff = eff.pow(2)
                if (hasCraftingItem(201)) eff = eff.pow(1.5)
                if (hasUpgrade(electrum, 12)) eff = eff.pow(1.5)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let power = "1/3"
                if (hasUpgrade(lead, 11)) power = "2/3"
                if (hasUpgrade(electrum, 12)) power = "1.5"
                let t = `公式：(镍锭+1)<sup>${power}</sup>`
                if (hasCraftingItem(201) && !hasUpgrade(electrum, 12)) t = `公式：镍锭+1`
                return t
            },
        },
        25: {
            title: "种类丰富的矿脉",
            description: "需求：等级210<br>解锁2种新的矿物（挖掘需要一定条件）",
            currencyInternalName: "points",
            currencyDisplayName: "铁锭",
            currencyLayer: iron,
            cost() { return new ExpantaNum(2400000) },
            canAfford() { return player.level.gte(210) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
    },

    clickables: {
        11: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = "点击寻找"
                return d
            },
            canClick() { return !player.nickel.finding && !player.nickel.destroying && !player.nickel.found && hasCraftingItem(131) && isAtLocation('overworld') },
            onClick() {
                if (!player.nickel.finding) player.nickel.finding = true
            },
            unlocked() { return tmp.nickel.layerShown },
            style() {
                return {
                    'min-height': '50px',
                    'width': '120px',
                    'font-size': '20px'
                }
            },
        },
        12: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = "点击挖掘"
                return d
            },
            canClick() { return !player.nickel.destroying && player.nickel.found },
            onClick() {
                if (!player.nickel.destroying) player.nickel.destroying = true
            },
            unlocked() { return tmp.nickel.layerShown },
            style() {
                return {
                    'min-height': '50px',
                    'width': '120px',
                    'font-size': '20px'
                }
            },
        },
    },

    challenges: {
        11: {
            name: "力量削弱",
            challengeDescription() {
                return `青铜力量的获取变为原来的^0.5，进入挑战会重置青铜力量和与其相关的购买项`
            },
            goal() {
                let comps = d(player.nickel.challenges[11])
                return ExpantaNum.pow(1e8, comps).times(1e40)
            },
            goalDescription() {
                return `${format(challengeGoal(nickel, 11))} 青铜力量<br>目标公式: 1e8<sup>x</sup>·1e40
            <br>完成次数: ${formatWhole(challengeCompletions(nickel, 11))}/${formatWhole(this.completionLimit())}`
            },
            completionLimit() {
                let l = d(5)
                return l
            },
            canComplete: function () {
                return player.bronze.power.gte(challengeGoal(nickel, 11))
            },
            rewardDescription() {
                return `每完成一次都能使青铜力量的效果^(+${f(this.rewardBase())})`
            },
            rewardBase() {
                let base = d(0.2)
                if (hasUpgrade(nickel, 23)) base = base.add(0.1)
                return base
            },
            rewardEffect() {
                let comps = d(player.nickel.challenges[11])
                let eff = this.rewardBase().times(comps).add(1)
                return eff
            },
            rewardDisplay() {
                return `^${format(challengeEffect(this.layer, 11))}`
            },
            onEnter() {
                resetBronzePowerAndBuyables()
            },
            unlocked() { return hasCraftingItem(142) },
            style() {
                return {
                    'border-radius': '5%',
                    height: '360px',
                }
            },
        },
        12: {
            name: "时间削弱",
            challengeDescription() {
                let s = d(30)
                if (hasUpgrade(aluminum, 12)) s = d(66)
                return `青铜力量的获取随着时间缓缓降低，到${fw(s)}秒时降低为1。进入挑战会重置青铜力量和与其相关的购买项。更新频率越低，按住的购买频率越低，但是会增加每一刻的批量购买<br>`
            },
            goal() {
                let comps = d(player.nickel.challenges[12])
                return ExpantaNum.pow(1e90, comps).times('1e270')
            },
            goalDescription() {
                return `${format(challengeGoal(nickel, 12))} 青铜力量<br>目标公式: 1e90<sup>x</sup>·1e270
            <br>完成次数: ${formatWhole(challengeCompletions(nickel, 12))}/${formatWhole(this.completionLimit())}`
            },
            completionLimit() {
                let l = d(5)
                return l
            },
            canComplete: function () {
                return player.bronze.power.gte(challengeGoal(this.layer, this.id))
            },
            rewardDescription() {
                return `每完成一次都能使铁矿石，镍矿石获取以及对应锭的熔炼倍率x10`
            },
            rewardEffect() {
                let base = d(10)
                let comps = d(player.nickel.challenges[12])
                let eff = base.pow(comps)
                return eff
            },
            rewardDisplay() {
                return `${format(challengeEffect(this.layer, 12))}x`
            },
            onEnter() {
                resetBronzePowerAndBuyables()
            },
            unlocked() { return hasUpgrade(nickel, 22) },
            nerf() {
                if (inChallenge(this.layer, this.id)) {
                    if (!hasUpgrade(aluminum, 12)) {
                        if (player.nickel.chal2nerf.gte(1 / 600)) player.nickel.chal2nerf = player.nickel.chal2nerf.sub(1 / 30 * diffout)
                        if (player.nickel.chal2nerf.lte(1 / 600)) player.nickel.chal2nerf = d(0)
                    }
                    else if (hasUpgrade(aluminum, 12)) {
                        if (player.nickel.chal2nerf.gte(1 / 1320)) player.nickel.chal2nerf = player.nickel.chal2nerf.sub(1 / 66 * diffout)
                        if (player.nickel.chal2nerf.lte(1 / 1320)) player.nickel.chal2nerf = d(0)
                    }
                }
                else player.nickel.chal2nerf = d(1)
            },
            style() {
                return {
                    'border-radius': '5%',
                    height: '360px',
                }
            },
        },
    },

    bars: {
        nickelFinding: {
            direction: RIGHT,
            width: 360,
            height: 60,
            display() { return `找矿进度: ${format(player.nickel.findingProgress)}/${format(rarity(nickel))}` },
            progress() { let p = player.nickel.findingProgress.div(rarity(nickel)); if (player.nickel.found) p = d(1); return p },
            unlocked() { return tmp.nickel.layerShown },
            fillStyle() { return { "background-color": "#fffcc0" } },
            baseStyle() { return { "background-color": "rgba(0,0,0,0)" } },
            textStyle() { return { "color": "#8b8556" } },
        },
        nickelDestroying: {
            direction: RIGHT,
            width: 360,
            height: 60,
            display() { return `进度: ${format(player.nickel.progress)}/${format(hardness(nickel))}` },
            progress() { return player.nickel.progress.div(hardness(nickel)) },
            unlocked() { return tmp.nickel.layerShown },
            fillStyle() { return { "background-color": "#fffcc0" } },
            baseStyle() { return { "background-color": "rgba(0,0,0,0)" } },
            textStyle() { return { "color": "#8b8556" } },
        },
    },

    update(diff) {
        if (player.nickel.finding) player.nickel.findingProgress = player.nickel.findingProgress.add(player.copper.speed.times(diff))
        if (player.nickel.findingProgress.gte(rarity(nickel))) player.nickel.findingProgress = d(0),
            player.nickel.finding = false,
            player.nickel.found = true

        if (player.nickel.destroying) player.nickel.progress = player.nickel.progress.add(player.stone.speed.times(diff))
        if (player.nickel.progress.gte(hardness(nickel))) player.nickel.progress = d(0),
            player.nickel.found = false,
            player.nickel.destroying = false,
            player.nickel.ore = player.nickel.ore.add(tmp.nickel.gainMult)

        if (player.nickel.points.gt(player.nickel.best)) player.nickel.best = player.nickel.points
    },

    tabFormat: [
        ["display-text", function () { return getPointsDisplay() }],
        ["display-text", () => `你有 ${textStyle_h2(formatWhole(player.nickel.ore), 'fffcc0')} 镍矿石`],
        "main-display",
        ["display-text", () => `你同时最多拥有 ${formatWhole(player.nickel.best)} 镍锭`],
        "blank",
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "dig": {
                unlocked() { return tmp.nickel.layerShown },
                name() { return '挖掘' },
                content: [
                    ["blank", "15px"],
                    ["row", [["bar", "nickelFinding"], "blank", ["clickable", 11],]],
                    "blank",
                    ["row", [["bar", "nickelDestroying"], "blank", ["clickable", 12],]],
                    "blank",
                    ["display-text", function () { return player.nickel.found ? `你找到了一处镍矿石` : `你尚未找到镍矿石` }],
                    "blank",
                    ["display-text", function () { return `找矿速度：${format(player.copper.speed)}/秒` }],
                    ["display-text", function () { return `挖掘速度：${format(player.stone.speed)}/秒` }],
                    ["display-text", function () { return `破坏一次的镍矿石获取数量：${textStyle_h2(formatWhole(tmp.nickel.gainMult), 'fffcc0')}` }],
                    ["display-text", function () { return `稀有度：${formatWhole(rarity(nickel))}` }],
                    ["display-text", function () { return `硬度：${formatWhole(hardness(nickel))}` }],
                    ["display-text", function () { return `挖掘等级：2` }],
                    ["display-text", function () { return `需要在主世界挖掘` }],
                    "blank",
                    ["display-text", function () { return `你只有合成铁质探矿杖（合成界面第7页第1个）后才能找到镍矿石！` }],
                ]
            },
            "upgrades": {
                unlocked() { return tmp.nickel.layerShown },
                name() { return '升级' },
                content: [
                    ["blank", "15px"],
                    "upgrades",
                ]
            },
            "milestones": {
                unlocked() { return tmp.nickel.layerShown },
                name() { return '里程碑' },
                content: [
                    ["blank", "15px"],
                    "milestones",
                ]
            },
            "challenges": {
                unlocked() { return hasCraftingItem(142) },
                name() { return '挑战' },
                content: [
                    ["blank", "15px"],
                    "challenges",
                ]
            },
        },
    },
})

//世界1层8：铝
addLayer("aluminum", {
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: d(0),             // "points" is the internal name for the main resource of the layer.
            ore: d(0),
            molten: d(0),
            miningLevel: d(2),
            rarity: d(54),
            progress: d(0),
            findingProgress: d(0),
            hardness: d(1150),
            destroying: false,
            finding: false,
            found: false,
            singularity: d(0),
        }
    },

    color: "#e2e3ee",                       // The color for this layer, which affects many elements.
    nodeStyle: { "background": "linear-gradient(90deg, #e2e3ee 0%, #d4d5e4 50%, #a0a2ac 100%)" },
    resource: "铝锭",            // The name of this layer's main prestige resource.
    row: 1,                                 // The row this layer is on (0 is the first row).
    position: 7,
    symbol: '铝',

    baseResource: "points",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.points },  // A function to return the current amount of baseResource.

    requires: d(10),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "normal",                         // Determines the formula used for calculating prestige currency.
    exponent: 0.5,                          // "normal" prestige gain is (currency^exponent).

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        m = d(1)                            // 矿物的gainMult是给对应矿石的
        if (hasUpgrade(aluminum, 11)) m = m.times(upgradeEffect(aluminum, 11))
        if (hasCraftingItem(171)) m = m.times(25)
        if (hasCraftingItem(181)) m = m.times(25)
        if (hasUpgrade(lead, 21)) m = m.times(upgradeEffect(lead, 21))
        if (hasMilestone(sing_fus, 4)) m = m.times(buyableEffect(sing_fus, 21))
        return m
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return d(1)
    },

    layerShown() { return hasNormalAchievement(64) || hasUpgrade(nickel, 25) },          // Returns a bool for if this layer's node should be visible in the tree.

    doReset(resettingLayer) {
        return undefined
    },

    upgrades: {
        11: {
            title: "AlAlAl",
            description: "青铜力量加成铝矿石获取",
            currencyInternalName: "ore",
            currencyDisplayName: "铝矿石",
            currencyLayer: aluminum,
            cost() { return new ExpantaNum(5) },
            unlocked() { return tmp.aluminum.layerShown },
            effect() {
                let eff = player.bronze.power.max(1e100).logBase(1e100).sub(9.8).max(1).pow(2).floor()
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：⌊log<sub>1e100</sub>(max(青铜力量, 1e1080))<sup>2</sup>⌋`
                return t
            },
        },
        12: {
            title: "缓速削弱",
            description: "时间削弱挑战现在需要66秒才会将青铜力量获取降低到1",
            currencyInternalName: "ore",
            currencyDisplayName: "铝矿石",
            currencyLayer: aluminum,
            cost() { return new ExpantaNum(25) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        13: {
            title: "大片丛林",
            description: "需求：1e1280青铜力量<br>丛林原木的获取^3，效果^3",
            currencyInternalName: "ore",
            currencyDisplayName: "铝矿石",
            currencyLayer: aluminum,
            cost() { return new ExpantaNum(45) },
            canAfford() { return player.bronze.power.gte('1e1280') },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        14: {
            title: "青铜力量强化器MK^2",
            description: "需求：等级286<br>青铜力量强化器MK.2的效果底数变为10x",
            currencyInternalName: "ore",
            currencyDisplayName: "铝矿石",
            currencyLayer: aluminum,
            cost() { return new ExpantaNum(60) },
            canAfford() { return player.level.gte(286) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        15: {
            title: "铝工艺品",
            description: "需求：等级315<br>解锁铝锭熔炼，和一些合成配方",
            currencyInternalName: "ore",
            currencyDisplayName: "铝矿石",
            currencyLayer: aluminum,
            cost() { return new ExpantaNum(1000) },
            canAfford() { return player.level.gte(315) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        21: {
            title: "铝锭生产线",
            description: "铝锭熔炼倍率x50",
            currencyInternalName: "ore",
            currencyDisplayName: "铝矿石",
            currencyLayer: aluminum,
            cost() { return new ExpantaNum(1200) },
            unlocked() { return hasCraftingItem(162) },
        },
        22: {
            title: "铝热剂",
            description: "升温速度变为1.5x",
            cost() { return new ExpantaNum(700) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        23: {
            title: "超级加速",
            description: "铝锭加成镍矿石获取以及镍锭熔炼倍率",
            cost() { return new ExpantaNum(1050) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.aluminum.points.max(1).pow(0.8)
                if (hasCraftingItem(201)) eff = eff.pow(1.35)
                return eff
            },
            effectDisplay() {
                return `${f(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let power = d(0.8)
                if (hasCraftingItem(201)) power = power.times(1.35)
                let t = `公式：铝锭<sup>${f(power)}</sup>`
                return t
            },
        },
        24: {
            title() {
                let t = "超级冲刺"
                if (hasCraftingItem(422)) t = t + " +1"
                return t
            },
            description() {
                let des = "铁锭以指数加成成就点数的效果"
                if (hasCraftingItem(422)) des = '铁锭以指数加成<s>成就点数的效果</s>第1红石升级的效果'
                return des
            },
            cost() { return new ExpantaNum(1650) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.iron.points.max(0).add(10).log10().root(1.33)
                return eff
            },
            effectDisplay() {
                return `^${f(upgradeEffect(this.layer, this.id))}`
            },
            tooltip() {
                let t = `公式：<sup>1.33</sup>√lg(铁锭+10)`
                return t
            },
        },
        25: {
            title: "抵抗辐射",
            description: "需求：等级478<br>允许挖掘铅矿石",
            canAfford() { return player.level.gte(478) },
            cost() { return new ExpantaNum(2200) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
    },

    clickables: {
        11: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = "点击寻找"
                return d
            },
            canClick() { return !player.aluminum.finding && !player.aluminum.destroying && !player.aluminum.found && isAtLocation('overworld') },
            onClick() {
                if (!player.aluminum.finding) player.aluminum.finding = true
            },
            unlocked() { return tmp.aluminum.layerShown },
            style() {
                return {
                    'min-height': '50px',
                    'width': '120px',
                    'font-size': '20px'
                }
            },
        },
        12: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = "点击挖掘"
                return d
            },
            canClick() { return !player.aluminum.destroying && player.aluminum.found },
            onClick() {
                if (!player.aluminum.destroying) player.aluminum.destroying = true
            },
            unlocked() { return tmp.aluminum.layerShown },
            style() {
                return {
                    'min-height': '50px',
                    'width': '120px',
                    'font-size': '20px'
                }
            },
        },
    },

    bars: {
        aluminumFinding: {
            direction: RIGHT,
            width: 360,
            height: 60,
            display() { return `找矿进度: ${format(player.aluminum.findingProgress)}/${format(rarity(aluminum))}` },
            progress() { let p = player.aluminum.findingProgress.div(rarity(aluminum)); if (player.aluminum.found) p = d(1); return p },
            unlocked() { return tmp.aluminum.layerShown },
            fillStyle() { return { "background-color": "#e2e3ee" } },
            baseStyle() { return { "background-color": "rgba(0,0,0,0)" } },
            textStyle() { return { "color": "#45464b" } },
        },
        aluminumDestroying: {
            direction: RIGHT,
            width: 360,
            height: 60,
            display() { return `进度: ${format(player.aluminum.progress)}/${format(hardness(aluminum))}` },
            progress() { return player.aluminum.progress.div(hardness(aluminum)) },
            unlocked() { return tmp.aluminum.layerShown },
            fillStyle() { return { "background-color": "#e2e3ee" } },
            baseStyle() { return { "background-color": "rgba(0,0,0,0)" } },
            textStyle() { return { "color": "#45464b" } },
        },
    },

    update(diff) {
        if (player.aluminum.finding) player.aluminum.findingProgress = player.aluminum.findingProgress.add(player.copper.speed.times(diff))
        if (player.aluminum.findingProgress.gte(rarity(aluminum))) player.aluminum.findingProgress = d(0),
            player.aluminum.finding = false,
            player.aluminum.found = true

        if (player.aluminum.destroying) player.aluminum.progress = player.aluminum.progress.add(player.stone.speed.times(diff))
        if (player.aluminum.progress.gte(hardness(aluminum))) player.aluminum.progress = d(0),
            player.aluminum.found = false,
            player.aluminum.destroying = false,
            player.aluminum.ore = player.aluminum.ore.add(tmp.aluminum.gainMult)

        if (player.aluminum.points.gt(player.aluminum.best)) player.aluminum.best = player.aluminum.points
    },

    tabFormat: [
        ["display-text", function () { return getPointsDisplay() }],
        ["display-text", () => `你有 ${textStyle_h2(formatWhole(player.aluminum.ore), 'e2e3ee')} 铝矿石`],
        "main-display",
        ["display-text", () => `你同时最多拥有 ${formatWhole(player.aluminum.best)} 铝锭`],
        "blank",
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "dig": {
                unlocked() { return tmp.aluminum.layerShown },
                name() { return '挖掘' },
                content: [
                    ["blank", "15px"],
                    ["row", [["bar", "aluminumFinding"], "blank", ["clickable", 11],]],
                    "blank",
                    ["row", [["bar", "aluminumDestroying"], "blank", ["clickable", 12],]],
                    "blank",
                    ["display-text", function () { return player.aluminum.found ? `你找到了一处铝矿石` : `你尚未找到铝矿石` }],
                    "blank",
                    ["display-text", function () { return `找矿速度：${format(player.copper.speed)}/秒` }],
                    ["display-text", function () { return `挖掘速度：${format(player.stone.speed)}/秒` }],
                    ["display-text", function () { return `破坏一次的铝矿石获取数量：${textStyle_h2(formatWhole(tmp.aluminum.gainMult), 'e2e3ee')}` }],
                    ["display-text", function () { return `稀有度：${formatWhole(rarity(aluminum))}` }],
                    ["display-text", function () { return `硬度：${formatWhole(hardness(aluminum))}` }],
                    ["display-text", function () { return `挖掘等级：2` }],
                    ["display-text", function () { return `需要在主世界挖掘` }],
                ]
            },
            "upgrades": {
                unlocked() { return tmp.aluminum.layerShown },
                name() { return '升级' },
                content: [
                    ["blank", "15px"],
                    "upgrades",
                ]
            },
        },
    },
})

//世界1层9：铅
addLayer("lead", {
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: d(0),             // "points" is the internal name for the main resource of the layer.
            ore: d(0),
            molten: d(0),
            miningLevel: d(2),
            rarity: d(72),
            progress: d(0),
            findingProgress: d(0),
            hardness: d(2160),
            destroying: false,
            finding: false,
            found: false,
            singularity: d(0),
        }
    },

    color: "#97a9e0",                       // The color for this layer, which affects many elements.
    nodeStyle: { "background": "linear-gradient(90deg, #667397 0%, #acc0ff 20%, #97a9e0 50%, #6a7392 80%, #333848 100%)" },
    resource: "铅锭",            // The name of this layer's main prestige resource.
    row: 1,                                 // The row this layer is on (0 is the first row).
    position: 8,
    symbol: '铅',

    baseResource: "points",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.points },  // A function to return the current amount of baseResource.

    requires: d(10),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "normal",                         // Determines the formula used for calculating prestige currency.
    exponent: 0.5,                          // "normal" prestige gain is (currency^exponent).

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        m = d(1)                            // 矿物的gainMult是给对应矿石的
        if (hasUpgrade(lead, 12)) m = m.times(4)
        if (hasUpgrade(lead, 13)) m = m.times(upgradeEffect(lead, 13))
        if (hasUpgrade(lead, 14)) m = m.times(upgradeEffect(lead, 14))
        if (hasCraftingItem(171)) m = m.times(3)
        if (hasUpgrade(constantan, 12)) m = m.times(upgradeEffect(constantan, 12))
        if (hasMilestone(sing_fus, 5)) m = m.times(buyableEffect(sing_fus, 22))
        m = m.floor()
        return m
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return d(1)
    },

    layerShown() { return hasNormalAchievement(64) || hasUpgrade(nickel, 25) },          // Returns a bool for if this layer's node should be visible in the tree.

    doReset(resettingLayer) {
        return undefined
    },

    upgrades: {
        11: {
            title: "重量级金属",
            description: "需求：等级490<br>第9镍升级的效果变为原来的平方",
            currencyInternalName: "ore",
            currencyDisplayName: "铅矿石",
            currencyLayer: lead,
            canAfford() { return player.level.gte(490) },
            cost() { return new ExpantaNum(3) },
            unlocked() { return tmp.lead.layerShown },
        },
        12: {
            title: "铅矿矿脉",
            description: "需求：等级502<br>4x铅矿石获取",
            currencyInternalName: "ore",
            currencyDisplayName: "铅矿石",
            currencyLayer: lead,
            canAfford() { return player.level.gte(502) },
            cost() { return new ExpantaNum(5) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        13: {
            title: "铅矿自增",
            description: "需求：等级502<br>铅矿石较微弱地加成自身获取",
            currencyInternalName: "ore",
            currencyDisplayName: "铅矿石",
            currencyLayer: lead,
            canAfford() { return player.level.gte(502) },
            cost() { return new ExpantaNum(25) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.lead.ore.max(0).add(1).root(7)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：<sup>7</sup>√(铅矿石+1)`
                return t
            },
        },
        14: {
            title: "铅矿超强化",
            description: "需求：等级502<br>加成铅矿石获取",
            currencyInternalName: "ore",
            currencyDisplayName: "铅矿石",
            currencyLayer: lead,
            canAfford() { return player.level.gte(502) },
            cost() { return new ExpantaNum(40) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = d(3)
                if (hasUpgrade(lead, 22)) eff = eff.pow(upgradeEffect(lead, 22))
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let formula = "3"
                if (hasUpgrade(lead, 22)) formula = "3<sup>upgeff(铅, 7)"
                let t = `公式：${formula}`
                return t
            },
        },
        15: {
            title: "144mB熔融铅",
            description: "需求：等级502<br>解锁新的熔炼配方和合成配方",
            currencyInternalName: "ore",
            currencyDisplayName: "铅矿石",
            currencyLayer: lead,
            canAfford() { return player.level.gte(502) },
            cost() { return new ExpantaNum(140) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        21: {
            title: "铅锭加成",
            description: "需求：等级612<br>铅锭加成铝矿石获取以及铝锭熔炼倍率",
            currencyInternalName: "ore",
            currencyDisplayName: "铝矿石",
            currencyLayer: aluminum,
            canAfford() { return player.level.gte(612) },
            cost() { return new ExpantaNum(3200000) },
            unlocked() { return hasCraftingItem(192) },
            effect() {
                let eff = player.lead.points.max(1).pow(1.15)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：铅锭<sup>1.15</sup>`
                return t
            },
        },
        22: {
            title: "超级数量级",
            description: "需求：等级615<br>经验OoM^2以指数加成第4铅升级的效果，并且其现在可以加成铅锭熔炼倍率",
            currencyInternalName: "points",
            currencyDisplayName: "铝锭",
            currencyLayer: aluminum,
            canAfford() { return player.level.gte(615) },
            cost() { return new ExpantaNum(125000000) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.points.max(1e10).log10().log10()
                if (hasUpgrade(electrum, 13)) eff = eff.pow(3.5)
                return eff
            },
            effectDisplay() {
                return `^${format(upgradeEffect(this.layer, this.id))}`
            },
            tooltip() {
                let p = d(1)
                if (hasUpgrade(electrum, 13)) p = p.times(3.5)
                let pd = p.eq(1) ? "" : f(p)
                let t = `公式：lg(lg(经验))<sup>${pd}</sup>`
                return t
            },
        },
        23: {
            title: "铅手柄",
            description: "需求：等级617<br>青铜力量强化器MK.3提供免费等级到青铜力量强化器MK.2",
            canAfford() { return player.level.gte(617) },
            cost() { return new ExpantaNum(4000) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        24: {
            title: "铅宽护手",
            description: "需求：等级630<br>青铜力量强化器MK.4提供免费等级到青铜力量强化器MK.3",
            canAfford() { return player.level.gte(630) },
            cost() { return new ExpantaNum(6000) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        25: {
            title: "铅绑定结",
            description: "需求：等级635<br>青铜力量强化器MK.4提供免费等级到青铜力量强化器MK.1",
            canAfford() { return player.level.gte(635) },
            cost() { return new ExpantaNum(8000) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        31: {
            title: "全新合金！",
            description: "需求：等级648<br>解锁两种新的合金：康铜和殷钢<br>现在可以解锁康铜锭的合金",
            canAfford() { return player.level.gte(648) },
            cost() { return new ExpantaNum(12500) },
            unlocked() { return hasUpgrade(this.layer, 25) },
            style() {
                return {
                    'clip-path': 'polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0% 50%)',
                    'width': '200px',
                    'min-height': '173.205px'
                }
            }
        },
    },

    clickables: {
        11: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = "点击寻找"
                return d
            },
            canClick() { return !player.lead.finding && !player.lead.destroying && !player.lead.found && hasUpgrade(aluminum, 25) && isAtLocation('overworld') },
            onClick() {
                if (!player.lead.finding) player.lead.finding = true
            },
            unlocked() { return tmp.lead.layerShown },
            style() {
                return {
                    'min-height': '50px',
                    'width': '120px',
                    'font-size': '20px'
                }
            },
        },
        12: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = "点击挖掘"
                return d
            },
            canClick() { return !player.lead.destroying && player.lead.found },
            onClick() {
                if (!player.lead.destroying) player.lead.destroying = true
            },
            unlocked() { return tmp.lead.layerShown },
            style() {
                return {
                    'min-height': '50px',
                    'width': '120px',
                    'font-size': '20px'
                }
            },
        },
    },

    bars: {
        leadFinding: {
            direction: RIGHT,
            width: 360,
            height: 60,
            display() { return `找矿进度: ${format(player.lead.findingProgress)}/${format(rarity(lead))}` },
            progress() { let p = player.lead.findingProgress.div(rarity(lead)); if (player.lead.found) p = d(1); return p },
            unlocked() { return tmp.lead.layerShown },
            fillStyle() { return { "background-color": "#97a9e0" } },
            baseStyle() { return { "background-color": "rgba(0,0,0,0)" } },
            textStyle() { return { "color": "#667397" } },
        },
        leadDestroying: {
            direction: RIGHT,
            width: 360,
            height: 60,
            display() { return `进度: ${format(player.lead.progress)}/${format(hardness(lead))}` },
            progress() { return player.lead.progress.div(hardness(lead)) },
            unlocked() { return tmp.lead.layerShown },
            fillStyle() { return { "background-color": "#97a9e0" } },
            baseStyle() { return { "background-color": "rgba(0,0,0,0)" } },
            textStyle() { return { "color": "#667397" } },
        },
    },

    update(diff) {
        if (player.lead.finding) player.lead.findingProgress = player.lead.findingProgress.add(player.copper.speed.times(diff))
        if (player.lead.findingProgress.gte(rarity(lead))) player.lead.findingProgress = d(0),
            player.lead.finding = false,
            player.lead.found = true

        if (player.lead.destroying) player.lead.progress = player.lead.progress.add(player.stone.speed.times(diff))
        if (player.lead.progress.gte(hardness(lead))) player.lead.progress = d(0),
            player.lead.found = false,
            player.lead.destroying = false,
            player.lead.ore = player.lead.ore.add(tmp.lead.gainMult)

        if (player.lead.points.gt(player.lead.best)) player.lead.best = player.lead.points
    },

    tabFormat: [
        ["display-text", function () { return getPointsDisplay() }],
        ["display-text", () => `你有 ${textStyle_h2(formatWhole(player.lead.ore), '97a9e0')} 铅矿石`],
        "main-display",
        ["display-text", () => `你同时最多拥有 ${formatWhole(player.lead.best)} 铅锭`],
        "blank",
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "dig": {
                unlocked() { return tmp.lead.layerShown },
                name() { return '挖掘' },
                content: [
                    ["blank", "15px"],
                    ["row", [["bar", "leadFinding"], "blank", ["clickable", 11],]],
                    "blank",
                    ["row", [["bar", "leadDestroying"], "blank", ["clickable", 12],]],
                    "blank",
                    ["display-text", function () { return player.lead.found ? `你找到了一处铅矿石` : `你尚未找到铅矿石` }],
                    "blank",
                    ["display-text", function () { return `找矿速度：${format(player.copper.speed)}/秒` }],
                    ["display-text", function () { return `挖掘速度：${format(player.stone.speed)}/秒` }],
                    ["display-text", function () { return `破坏一次的铅矿石获取数量：${textStyle_h2(formatWhole(tmp.lead.gainMult), '97a9e0')}` }],
                    ["display-text", function () { return `稀有度：${formatWhole(rarity(lead))}` }],
                    ["display-text", function () { return `硬度：${formatWhole(hardness(lead))}` }],
                    ["display-text", function () { return `挖掘等级：2` }],
                    ["display-text", function () { return `需要在主世界挖掘` }],
                    "blank",
                    ["display-text", function () { return `在购买第10个铝升级之后可以挖掘铅矿石` }],
                ]
            },
            "upgrades": {
                unlocked() { return tmp.lead.layerShown },
                name() { return '升级' },
                content: [
                    ["blank", "15px"],
                    "upgrades",
                ]
            },
        },
    },
})

//世界1层10：康铜
addLayer("constantan", {
    componentStyles: {
        "buyable"() {
            return {
                'margin-left': '-7px',
                'margin-right': '-7px',
            }
        }
    },
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: d(0),             // "points" is the internal name for the main resource of the layer.
            ore: d(0),
            molten: d(0),
            essence: d(0),
        }
    },

    color: "#eeba4f",                       // The color for this layer, which affects many elements.
    nodeStyle: {
        "background": "linear-gradient(90deg, #d39f49 0%, #ffd37c 30%, #eeba4f 80%, #7d6233 100%)",
    },
    resource: "康铜锭",            // The name of this layer's main prestige resource.
    symbol: "康铜",
    row: 1,                                 // The row this layer is on (0 is the first row).
    position: 9,
    baseResource: "points",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.points },  // A function to return the current amount of baseResource.

    requires: d(10),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "normal",                         // Determines the formula used for calculating prestige currency.
    exponent: 0.5,                          // "normal" prestige gain is (currency^exponent).
    layerShown() { return hasNormalAchievement(75) },

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        m = d(1)                            // 合金的gainMult是给对应合金倍率的？
        return m
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return d(1)
    },

    doReset() {
        return undefined
    },

    upgrades: {
        11: {
            title: "二号合金",
            description: "3倍康铜锭合金倍率",
            cost() { return new ExpantaNum(40) },
            unlocked() { return tmp.constantan.layerShown },
        },
        12: {
            title: "康铜加成铅",
            description: "康铜加成铅矿石获取以及铅锭熔炼倍率",
            cost() { return new ExpantaNum(160) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.constantan.points.max(0).add(1).pow(1.08)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：(康铜锭+1)<sup>1.08</sup>`
                return t
            },
        },
        13: {
            title: "康铜生产线",
            description: "10x康铜锭合金倍率",
            cost() { return new ExpantaNum(800) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        14: {
            title: "自动制造工具",
            description: "需求：等级677<br>被动获得重置获得的100%的合成台、熔炉和合金炉",
            canAfford() { return player.level.gte(677) },
            cost() { return new ExpantaNum(8000) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        15: {
            title: "康铜制造",
            description: "需求：等级677<br>解锁康铜相关制作图纸",
            canAfford() { return player.level.gte(677) },
            cost() { return new ExpantaNum(12000) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        21: {
            title: "康铜：精华还原",
            description: "需求：等级773<br>康铜锭加成康铜精华获取",
            currencyInternalName: "essence",
            currencyDisplayName: "康铜精华",
            currencyLayer: constantan,
            canAfford() { return player.level.gte(773) },
            cost() { return new ExpantaNum(1234) },
            unlocked() { return tmp.constantan.layerShown },
            effect() {
                let eff = player.constantan.points.max(0).add(1).pow(0.66)
                if (hasUpgrade(constantan, 32)) eff = eff.pow(2)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let power = "0.66"
                if (hasUpgrade(constantan, 32)) power = "1.32"
                let t = `公式：(康铜锭+1)<sup>${power}</sup>`
                return t
            },
        },
        22: {
            title: "康铜：精华凝聚",
            description: "需求：等级777<br>康铜精华也能加成康铜锭合金倍率，但是效果倍率降低",
            currencyInternalName: "essence",
            currencyDisplayName: "康铜精华",
            currencyLayer: constantan,
            canAfford() { return player.level.gte(777) },
            cost() { return new ExpantaNum(10000000) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = tmp.constantan.essence.effect.max(1).root(2.2025)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：<sup>2.2025</sup>√康铜精华效果`
                return t
            },
        },
        23: {
            title: "康铜种子",
            description: "需求：等级790<br>青铜力量的OoM加成康铜精华获取",
            currencyInternalName: "essence",
            currencyDisplayName: "康铜精华",
            currencyLayer: constantan,
            canAfford() { return player.level.gte(790) },
            cost() { return new ExpantaNum(1e9) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.bronze.power.max(10).log10()
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：lg(青铜力量)`
                return t
            },
        },
        24: {
            title: "更快的生长",
            description: "需求：等级809<br>康铜精华以指数加强青铜力量的效果",
            currencyInternalName: "essence",
            currencyDisplayName: "康铜精华",
            currencyLayer: constantan,
            canAfford() { return player.level.gte(809) },
            cost() { return new ExpantaNum(1e28) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.constantan.essence.max(10).logBase(10).logBase(10).root(1.6).div(3.2).add(1)
                return eff
            },
            effectDisplay() {
                return `^${format(upgradeEffect(this.layer, this.id))}`
            },
            tooltip() {
                let t = `公式：lg(lg(康铜精华))<sup>0.625</sup>/3.2+1`
                return t
            },
        },
        25: {
            title: "精华膨胀",
            description: "需求：等级960<br>1,000,000x康铜精华获取，解锁更多升级",
            currencyInternalName: "essence",
            currencyDisplayName: "康铜精华",
            currencyLayer: constantan,
            canAfford() { return player.level.gte(960) },
            cost() { return new ExpantaNum(5e28) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        31: {
            title: "精华肥料",
            description: "需求：等级989<br>每升一级 康铜精华倍增：底数加强 康铜精华获取就变为10x",
            currencyInternalName: "essence",
            currencyDisplayName: "康铜精华",
            currencyLayer: constantan,
            canAfford() { return player.level.gte(989) },
            cost() { return new ExpantaNum(5e58) },
            unlocked() { return hasUpgrade(constantan, 25) },
            effect() {
                let eff = d(10).pow(getBuyableAmount(constantan, 12).max(0))
                if (hasUpgrade(constantan, 33)) eff = eff.pow(3)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：10<sup>buyamt(康铜, 2)</sup>`
                if (hasUpgrade(constantan, 33)) t = `公式：1,000<sup>buyamt(康铜, 2)</sup>`
                return t
            },
        },
        32: {
            title: "精华改良",
            description: "需求：等级1,033<br>康铜升级6的效果变为原来的^2",
            currencyInternalName: "essence",
            currencyDisplayName: "康铜精华",
            currencyLayer: constantan,
            canAfford() { return player.level.gte(1033) },
            cost() { return new ExpantaNum(1e117) },
            unlocked() { return hasUpgrade(constantan, 31) },
        },
        33: {
            title: "充满康铜的世界",
            description: "需求：等级1,175<br>康铜升级11的效果变为原来的^3，其底数因此变为1000x",
            currencyInternalName: "essence",
            currencyDisplayName: "康铜精华",
            currencyLayer: constantan,
            canAfford() { return player.level.gte(1175) },
            cost() { return new ExpantaNum(1e222) },
            unlocked() { return hasUpgrade(constantan, 32) },
        },
        34: {
            title: "极限压缩的成本",
            description: "需求：等级1,256<br>康铜精华倍增：底数加强的购买价格变为原来的^0.07",
            currencyInternalName: "essence",
            currencyDisplayName: "康铜精华",
            currencyLayer: constantan,
            canAfford() { return player.level.gte(1256) },
            cost() { return new ExpantaNum('1e420') },
            unlocked() { return hasUpgrade(constantan, 33) },
        },
        35: {
            title: "康铜倍增的终幕",
            description: "需求：等级1,540<br>现在可以解锁更多的自动化，自动购买最大木头倍增器和4个青铜力量购买项",
            currencyInternalName: "essence",
            currencyDisplayName: "康铜精华",
            currencyLayer: constantan,
            canAfford() { return player.level.gte(1540) },
            cost() { return new ExpantaNum('1e2100') },
            unlocked() { return hasUpgrade(constantan, 34) },
        },
        41: {
            title: "强强联手",
            description: "需求：等级1,552<br>1e20x合金炉获取",
            currencyInternalName: "essence",
            currencyDisplayName: "康铜精华",
            currencyLayer: constantan,
            canAfford() { return player.level.gte(1552) },
            cost() { return new ExpantaNum('5e2100') },
            unlocked() { return hasUpgrade(constantan, 35) },
            style() {
                return {
                    'width': '750px',
                    'border-radius': '3.75px',
                }
            },
        },
    },

    buyables: {
        11: {
            title: "康铜精华倍增",
            cost(x) { return d(10).pow(x) },
            free() {
                let f = d(0)
                return f
            },
            purchaseLimit() {
                let l = d(2000)
                if (hasUpgrade(invar, 13)) l = l.add(200)
                if (hasNormalAchievement(85)) l = l.add(tmp.invar.energy.effect2)
                return l
            },
            display() {
                let freedis = ""
                if (this.free().gte(1)) freedis = ` + ${formatWhole(this.free())}`
                let display = `加成康铜精华获取<br>
                效果公式：${format(this.effBase())}<sup>x</sup><br>
                等级：${formatWhole(player[this.layer].buyables[this.id])}${freedis} / ${fw(this.purchaseLimit())}<br>
                当前效果：${format(this.effect())}x<br>
                价格：${format(this.cost())} 康铜精华`
                return display
            },
            canAfford() { return player[this.layer].essence.gte(this.cost()) },
            buyMax() {
                if (this.canAfford())
                    return setBuyableAmount(constantan, 11, player.constantan.essence.max(1).log10().floor().add(1).min(this.purchaseLimit()))
            },
            canBuyMax() { return false },
            buy() {
                if (!this.canBuyMax()) player[this.layer].essence = player[this.layer].essence.sub(this.cost()).max(0),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (this.canBuyMax()) this.buyMax()
            },
            auto() {
                if (hasMilestone(constantan, 3)) this.buyMax()
            },
            effBase() {
                let b = d(2)
                if (hasMilestone(constantan, 0)) b = b.add(buyableEffect(constantan, 12))
                return b
            },
            effect(x) {
                let effect = ExpantaNum.pow(this.effBase(), x.add(this.free()).max(0))
                return effect
            },
            unlocked() { return hasCraftingItem(202) },
            style() {
                if (this.canAfford()) return {
                    "background": "linear-gradient(45deg, #d39f49 0%, #ffd37c 30%, #eeba4f 80%, #7d6233 100%)", 'background-color': '#ffd7a1',
                }
            },
        },
        12: {
            title: "康铜精华倍增：底数加强",
            cost(x) {
                let c = d(10).pow(d(2).pow(x)).times(1e14)
                if (hasUpgrade(constantan, 34)) c = c.pow(0.07)
                return c
            },
            free() {
                let f = d(0)
                return f
            },
            purchaseLimit() {
                let l = d(16)
                if (hasUpgrade(alumbrass, 13)) l = l.add(2)
                if (hasUpgrade(brass, 'a3')) l = d(Infinity)
                return l
            },
            display() {
                let freedis = ""
                if (this.free().gte(1)) freedis = ` + ${formatWhole(this.free())}`
                let limitdis = "/ " + fw(this.purchaseLimit())
                if (hasUpgrade(brass, 'a3')) limitdis = ""
                let display = `提升康铜精华倍增的底数<br>
                效果公式：${format(this.effBase())}x<br>
                等级：${formatWhole(player[this.layer].buyables[this.id])}${freedis} ${limitdis}<br>
                当前效果：+${format(this.effect())}<br>
                价格：${format(this.cost())} 康铜精华`
                return display
            },
            canAfford() { return player[this.layer].essence.gte(this.cost()) },
            buyMax() {
                let e = d(1)
                if (this.canAfford()) {
                    if (hasUpgrade(constantan, 34)) e = d(0.07)
                    return setBuyableAmount(constantan, 12, player.constantan.essence.root(e).max(1).div(1e14).logBase(10).max(0.1).logBase(2).floor().add(1).min(this.purchaseLimit()))
                }
            },
            canBuyMax() { return false },
            buy() {
                if (!this.canBuyMax()) player[this.layer].essence = player[this.layer].essence.sub(this.cost()).max(0),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (this.canBuyMax()) this.buyMax()
            },
            effBase() {
                let b = d(0.5)
                if (hasUpgrade(brass, 'a3')) b = b.add(0.1)
                return b
            },
            effect(x) {
                let effect = x.times(this.effBase())
                return effect
            },
            unlocked() { return hasMilestone(constantan, 0) },
            canAuto() { return hasMilestone(brass, 1) },
            auto() {
                if (this.canAuto())
                    this.buyMax()
            },
            style() {
                if (this.canAfford()) return {
                    "background": "linear-gradient(45deg, #d39f49 0%, #ffd37c 30%, #eeba4f 80%, #7d6233 100%)", 'background-color': '#ffd7a1',
                }
            },
        },
        13: {
            title: "康铜精华自然倍增",
            cost(x) { return d(2).pow(x.pow(2)).times(1e100) },
            free() {
                let f = d(0)
                return f
            },
            display() {
                let freedis = ""
                if (this.free().gte(1)) freedis = ` + ${formatWhole(this.free())}`
                let display = `加成康铜精华获取<br>
                效果公式：e<sup>x</sup><br>
                等级：${formatWhole(player[this.layer].buyables[this.id])}${freedis}<br>
                当前效果：${format(this.effect())}x<br>
                价格：${format(this.cost())} 康铜精华`
                return display
            },
            canAfford() { return player[this.layer].essence.gte(this.cost()) },
            buyMax() {
                if (this.canAfford())
                    return setBuyableAmount(constantan, 13, player.constantan.essence.max(1).div(1e100).logBase(2).max(0).root(2).floor().add(1))
            },
            canBuyMax() { return false },
            buy() {
                if (!this.canBuyMax()) player[this.layer].essence = player[this.layer].essence.sub(this.cost()).max(0),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (this.canBuyMax()) this.buyMax()
            },
            auto() {
                if (hasMilestone(constantan, 3)) this.buyMax()
            },
            effBase() {
                let b = ExpantaNum.E
                return b
            },
            effect(x) {
                let effect = this.effBase().pow(x.max(0))
                return effect
            },
            unlocked() { return hasMilestone(constantan, 2) },
            style() {
                if (this.canAfford()) return {
                    "background": "linear-gradient(45deg, #d39f49 0%, #ffd37c 30%, #eeba4f 80%, #7d6233 100%)", 'background-color': '#ffd7a1',
                }
            },
        },
    },

    milestones: {
        0: {
            requirementDescription() { return `获得1000康铜精华` },
            effectDescription() { return `解锁新的康铜升级` },
            done() { return player.constantan.essence.gte(1000) },
            unlocked() { return hasCraftingItem(202) },
        },
        1: {
            requirementDescription() { return `获得1.0000e15康铜精华` },
            effectDescription() { return `解锁第2个康铜精华购买项` },
            done() { return player.constantan.essence.gte(1e15) },
            unlocked() { return hasCraftingItem(202) },
        },
        2: {
            requirementDescription() { return `获得1.0000e100康铜精华 + 到达等级1,025` },
            effectDescription() { return `解锁第3个康铜精华购买项` },
            done() { return player.constantan.essence.gte(1e100) && player.level.gte(1025) },
            unlocked() { return hasCraftingItem(202) },
        },
        3: {
            requirementDescription() { return `获得1.000e10,000康铜精华` },
            effectDescription() { return `自动购买最大康铜精华倍增和康铜精华自然倍增` },
            done() { return player.constantan.essence.gte('1e10000') },
            unlocked() { return hasCraftingItem(202) },
        },
    },

    essence: {
        gain() {
            let g = d(0)
            if (hasCraftingItem(202)) g = g.add(1),
                g = g.times(buyableEffect(constantan, 11))
            if (hasUpgrade(constantan, 21)) g = g.times(upgradeEffect(constantan, 21))
            if (hasUpgrade(constantan, 23)) g = g.times(upgradeEffect(constantan, 23))
            if (hasUpgrade(constantan, 25)) g = g.times(1000000)
            if (hasUpgrade(constantan, 31)) g = g.times(upgradeEffect(constantan, 31))
            if (hasMilestone(constantan, 2)) g = g.times(buyableEffect(constantan, 13))
            return g
        },
        effect() {
            let eff = d(10).pow(player.constantan.essence.max(0).add(1).log10().times(3).pow(0.5))
            if (hasUpgrade(zinc, 25)) eff = eff.pow(upgradeEffect(zinc, 25))
            return eff
        },
    },

    update(diff) {
        if (player.constantan.points.gt(player.constantan.best)) player.constantan.best = player.constantan.points

        if (hasCraftingItem(202)) player.constantan.essence = player.constantan.essence.add(tmp.constantan.essence.gain.times(diff))
    },

    tabFormat: [
        ["display-text", function () { return getPointsDisplay() }],
        "main-display",
        ["display-text", () => `你同时最多拥有 ${formatWhole(player.constantan.best)} 康铜锭`],
        "blank",
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "upgrades": {
                unlocked() { return tmp.constantan.layerShown },
                name() { return '升级' },
                content: [
                    ["blank", "15px"],
                    "upgrades",
                ]
            },
            "milestones": {
                unlocked() { return hasCraftingItem(202) },
                name() { return '里程碑' },
                content: [
                    ["blank", "15px"],
                    "milestones",
                ]
            },
            "essence": {
                unlocked() { return hasCraftingItem(202) },
                name() { return '康铜精华' },
                content: [
                    ["blank", "15px"],
                    ["raw-html", () => `<h4 style="opacity:.5">神秘农业：抢我活是吧！`],
                    ["display-text", function () { return `你有 ${textStyle_h2(f(player.constantan.essence), 'eeba4f')} 康铜精华，加成镍矿石获取 ${textStyle_h2(f(tmp.constantan.essence.effect) + "x", 'eeba4f')}` }],
                    ["display-text", function () { return `(+${textStyle_h2(f(tmp.constantan.essence.gain), 'eeba4f')}/秒)` }],
                    ["display-text", function () {
                        let p = d(1)
                        if (hasUpgrade(zinc, 25)) p = p.times(upgradeEffect(zinc, 25))
                        let pt = p.gt(1) ? "·" + f(p) : ""
                        return shiftDown ? `康铜精华效果公式：10<sup>(3lg(x+1))<sup>0.5</sup>${pt}</sup>` : ""
                    }],
                    "blank",
                    "buyables",
                ]
            },
        },
    },
})

function resetInvarDimEnergy() {
    let dimIntervalID = [11, 12, 21, 22, 31, 32, 41, 42]
    for (i = 0; i < dimIntervalID.length; i++) {
        setBuyableAmount(invar, dimIntervalID[i], d(0))
    }
    player.invar.energy = d(0)
    player.invar.dimensions = [d(0), d(0), d(0), d(0), d(0), d(0), d(0), d(0)]
    player.invar.dimensions_inc = [d(0), d(0), d(0), d(0), d(0), d(0), d(0), d(0)]
    player.invar.resetDelay = 1
}

function resetInvarDEandDB() {
    resetInvarDimEnergy()
    player.invar.buyables[51] = d(0)
}

//世界1层11：殷钢
addLayer("invar", {
    componentStyles: {
        "buyable"() {
            return {
                'margin-left': '-7px',
                'margin-right': '-7px',
                'line-height': '80%'
            }
        }
    },
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: d(0),             // "points" is the internal name for the main resource of the layer.
            ore: d(0),
            molten: d(0),
            energy: d(0),
            dimensions: [d(0), d(0), d(0), d(0), d(0), d(0), d(0), d(0)],
            dimensions_inc: [d(0), d(0), d(0), d(0), d(0), d(0), d(0), d(0)],
            resetDelay: 0,
        }
    },

    color: "#95a7a1",                       // The color for this layer, which affects many elements.
    nodeStyle: {
        "background": "linear-gradient(90deg, #979a90 0%, #bcc4ba 20%, #e2e7e5 75%, #95a7a1 90%, #697672 100%)",
    },
    resource: "殷钢锭",            // The name of this layer's main prestige resource.
    symbol: "殷钢",
    row: 1,                                 // The row this layer is on (0 is the first row).
    position: 10,
    baseResource: "points",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.points },  // A function to return the current amount of baseResource.

    requires: d(10),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "normal",                         // Determines the formula used for calculating prestige currency.
    exponent: 0.5,                          // "normal" prestige gain is (currency^exponent).
    layerShown() { return hasNormalAchievement(75) },

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        m = d(1)                            // 合金的gainMult是给对应合金倍率的？
        return m
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return d(1)
    },

    doReset() {
        return undefined
    },

    upgrades: {
        11: {
            title: "实用合金",
            description: "5倍殷钢锭合金倍率",
            cost() { return new ExpantaNum(40) },
            unlocked() { return tmp.invar.layerShown },
        },
        12: {
            title: "康铜锁定",
            description: "康铜锭的合金倍率被锁定为铜锭、镍锭最小值的^0.5",
            cost() { return new ExpantaNum(200) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        13: {
            title: "突破等级",
            description: "需求：等级1,842<br>康铜精华倍增的等级上限+200",
            currencyInternalName: "essence",
            currencyDisplayName: "康铜精华",
            currencyLayer: constantan,
            canAfford() { return player.level.gte(1842) },
            cost() { return new ExpantaNum('8.888e2188') },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        14: {
            title: "殷钢大板",
            description: "需求：等级1,858<br>青铜力量强化器MK.2提供免费等级到青铜力量强化器MK.1",
            currencyInternalName: "essence",
            currencyDisplayName: "康铜精华",
            currencyLayer: constantan,
            canAfford() { return player.level.gte(1842) },
            cost() { return new ExpantaNum('8.888e2438') },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        15: {
            title: "殷钢的实用性",
            description: "需求：等级2,160<br>现在可以解锁更多关于殷钢的合成图纸",
            currencyInternalName: "power",
            currencyDisplayName: "青铜力量",
            currencyLayer: bronze,
            canAfford() { return player.level.gte(2160) },
            cost() { return new ExpantaNum('1e15000') },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        21: {
            title: "维度提升",
            description: "解锁殷钢维度提升",
            currencyInternalName: "energy",
            currencyDisplayName: "殷钢能量",
            currencyLayer: invar,
            cost() { return new ExpantaNum(1e10) },
            unlocked() { return hasNormalAchievement(85) },
        },
        22: {
            title: "殷钢提升维度",
            description: "殷钢锭加成第1殷钢维度的倍数",
            currencyInternalName: "energy",
            currencyDisplayName: "殷钢能量",
            currencyLayer: invar,
            cost() { return new ExpantaNum(1e16) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.invar.points.max(0).add(1).root(1.4)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：<sup>1.4</sup>√殷钢锭`
                return t
            },
        },
        23: {
            title: "殷钢锭生产线",
            description: "10x殷钢锭合金倍率",
            currencyInternalName: "energy",
            currencyDisplayName: "殷钢能量",
            currencyLayer: invar,
            cost() { return new ExpantaNum(1e30) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        24: {
            title: "维度献祭青春版",
            description: "需求：等级2,721<br>第1殷钢维度的数量加成第8殷钢维度的倍数",
            currencyInternalName: "energy",
            currencyDisplayName: "殷钢能量",
            currencyLayer: invar,
            canAfford() { return player.level.gte(2721) },
            cost() { return new ExpantaNum(1e38) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.invar.dimensions_inc[0].max(1).log10().pow(2.5).add(1)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：lg(第1殷钢维度)<sup>2.5</sup>+1`
                return t
            },
        },
        25: {
            title: "维度提升^2",
            description: "需求：等级2,820<br>维度提升的基数+1",
            currencyInternalName: "energy",
            currencyDisplayName: "殷钢能量",
            currencyLayer: invar,
            canAfford() { return player.level.gte(2820) },
            cost() { return new ExpantaNum(1e47) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        31: {
            title: "星系",
            description: "需求：等级2,840<br>解锁殷钢星系",
            currencyInternalName: "energy",
            currencyDisplayName: "殷钢能量",
            currencyLayer: invar,
            canAfford() { return player.level.gte(2840) },
            cost() { return new ExpantaNum(1e58) },
            unlocked() { return hasUpgrade(invar, 25) },
        },
        32: {
            title: "熔炼提升",
            description: "需求：等级2,880<br>殷钢能量加成殷钢锭合金倍率",
            currencyInternalName: "energy",
            currencyDisplayName: "殷钢能量",
            currencyLayer: invar,
            canAfford() { return player.level.gte(2880) },
            cost() { return new ExpantaNum(1e81) },
            unlocked() { return hasUpgrade(invar, 31) },
            effect() {
                let eff = d(10).pow(player.invar.energy.max(1).log10().pow(0.75).div(5))
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：10<sup>lg(殷钢能量)<sup>0.75</sup>/5</sup>`
                return t
            },
        },
        33: {
            title: "半自动维度1~2",
            description: "需求：等级3,550<br>每时刻购买1次第1~2殷钢维度",
            currencyInternalName: "energy",
            currencyDisplayName: "殷钢能量",
            currencyLayer: invar,
            canAfford() { return player.level.gte(3550) },
            cost() { return new ExpantaNum(1e153) },
            unlocked() { return hasUpgrade(invar, 32) },
        },
        34: {
            title: "半自动维度3~4",
            description: "需求：等级3,620<br>每时刻购买1次第3~4殷钢维度",
            currencyInternalName: "energy",
            currencyDisplayName: "殷钢能量",
            currencyLayer: invar,
            canAfford() { return player.level.gte(3620) },
            cost() { return new ExpantaNum(1e180) },
            unlocked() { return hasUpgrade(invar, 33) },
        },
        35: {
            title: "半自动维度5~6",
            description: "需求：等级3,660<br>每时刻购买1次第5~6殷钢维度",
            currencyInternalName: "energy",
            currencyDisplayName: "殷钢能量",
            currencyLayer: invar,
            canAfford() { return player.level.gte(3660) },
            cost() { return new ExpantaNum(1e210) },
            unlocked() { return hasUpgrade(invar, 34) },
        },
        41: {
            title: "半自动维度7~8",
            description: "需求：等级3,720<br>每时刻购买1次第7~8殷钢维度",
            currencyInternalName: "energy",
            currencyDisplayName: "殷钢能量",
            currencyLayer: invar,
            canAfford() { return player.level.gte(3720) },
            cost() { return new ExpantaNum(1e280) },
            unlocked() { return hasUpgrade(invar, 35) },
        },
        42: {
            title: "铸模的最佳材料",
            description: "需求：等级4,040<br>解锁一个新的合金层级：铝黄铜<br>同时现在可以解锁铝黄铜锭的合金",
            currencyInternalName: "energy",
            currencyDisplayName: "殷钢能量",
            currencyLayer: invar,
            canAfford() { return player.level.gte(4040) },
            cost() { return new ExpantaNum('1e410') },
            unlocked() { return hasUpgrade(invar, 41) },
        },
    },

    buyables: {
        11: {
            title: "",
            cost(x) {
                let c = d(0)
                if (x.lt(103)) c = d(1000).pow(x)
                if (x.gte(103)) c = d(1000).pow(x.sub(101).pow(1.3)).times(1e303)
                return c
            },
            display() {
                let display = `第1殷钢维度 | ${f(this.mult())}x<br>
                数量：${f(player.invar.dimensions_inc[0])}(${fw(player[this.layer].buyables[this.id])})<br>
                价格：${f(this.cost())} 殷钢能量`
                return display
            },
            mult() {
                let m = d(1)
                m = m.times(tmp.invar.allDimMulti)
                m = m.times(tmp.invar.multPer1DimBuy.pow(getBuyableAmount(this.layer, this.id).max(0)))
                m = m.times(tmp.invar.buyables[51].base.pow(getBuyableAmount(invar, 51).max(0)))
                if (hasUpgrade(invar, 22)) m = m.times(upgradeEffect(invar, 22))
                return m
            },
            canAfford() { return player[this.layer].energy.gte(this.cost()) },
            buyMax() {
                let x = player.invar.energy
                if (this.canAfford()) {
                    if (x.lt(Number.MAX_VALUE)) return setBuyableAmount(this.layer, this.id, x.max(0.1).logBase(1000).floor().add(1).max(0))
                    if (x.gte(Number.MAX_VALUE)) return setBuyableAmount(this.layer, this.id, x.div(1e303).max(1).logBase(1000).root(1.3).add(101).floor().add(1))
                }
            },
            canBuyMax() { return false },
            buy() {
                if (!this.canBuyMax()) player[this.layer].energy = player[this.layer].energy.sub(this.cost()).max(0),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (this.canBuyMax()) this.buyMax()
            },
            dim() {
                if (player.invar.dimensions_inc[1].gt(0) || getBuyableAmount(invar, 11).gt(0))
                    player.invar.energy = player.invar.energy.add(tmp.invar.energy.gain.times(diffout)).max(0),
                        player.invar.dimensions_inc[0] = player.invar.dimensions[0].add(getBuyableAmount(this.layer, this.id))
            },
            auto() {
                if (hasUpgrade(invar, 33)) autobuyBuyables1perTick(this.layer, this.id)
                if (hasUpgrade(brass, 25)) this.buyMax()
            },
            unlocked() { return hasNormalAchievement(85) },
            style() {
                if (this.canAfford()) return {
                    "background": "linear-gradient(90deg, #979a90 0%, #bcc4ba 20%, #e2e7e5 75%, #95a7a1 90%, #697672 100%)",
                    'height': '60px',
                    'width': '480px',
                    'clip-path': 'polygon(6.25% 0, 0 50%, 6.25% 100%, 93.75% 100%, 100% 50%, 93.75% 0)',
                    'left': '15px',
                }
                else return {
                    'height': '60px',
                    'width': '480px',
                    'clip-path': 'polygon(6.25% 0, 0 50%, 6.25% 100%, 93.75% 100%, 100% 50%, 93.75% 0)',
                    'left': '15px',
                }
            },
        },
        12: {
            title: "",
            cost(x) {
                let c = d(0)
                if (x.lt(77)) c = d(10000).pow(x).times(100)
                if (x.gte(77)) c = d(10000).pow(x.sub(75).pow(1.3)).times(1e302)
                return c
            },
            display() {
                let display = `第2殷钢维度 | ${f(this.mult())}x<br>
                数量：${f(player.invar.dimensions_inc[1])}(${fw(player[this.layer].buyables[this.id])})<br>
                价格：${f(this.cost())} 殷钢能量`
                return display
            },
            mult() {
                let m = d(1)
                m = m.times(tmp.invar.allDimMulti)
                m = m.times(tmp.invar.multPer1DimBuy.pow(getBuyableAmount(this.layer, this.id).max(0)))
                m = m.times(tmp.invar.buyables[51].base.pow(getBuyableAmount(invar, 51).max(0)))
                return m
            },
            canAfford() { return player[this.layer].energy.gte(this.cost()) },
            buyMax() {
                let x = player.invar.energy
                if (this.canAfford()) {
                    if (x.lt(Number.MAX_VALUE)) return setBuyableAmount(this.layer, this.id, x.div(100).max(0.1).logBase(10000).floor().add(1).max(0))
                    if (x.gte(Number.MAX_VALUE)) return setBuyableAmount(this.layer, this.id, x.div(1e302).max(1).logBase(10000).root(1.3).add(75).floor().add(1))
                }
            },
            canBuyMax() { return false },
            buy() {
                if (!this.canBuyMax()) player[this.layer].energy = player[this.layer].energy.sub(this.cost()).max(0),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (this.canBuyMax()) this.buyMax()
            },
            dim() {
                if (player.invar.dimensions_inc[1].gt(0))
                    player.invar.dimensions[0] = player.invar.dimensions[0].add(tmp.invar.dimGain.d1.times(diffout)).max(0)
                player.invar.dimensions_inc[1] = player.invar.dimensions[1].add(getBuyableAmount(this.layer, this.id))
            },
            auto() {
                if (hasUpgrade(invar, 33)) autobuyBuyables1perTick(this.layer, this.id)
                if (hasUpgrade(brass, 25)) this.buyMax()
            },
            unlocked() { return hasNormalAchievement(85) },
            style() {
                if (this.canAfford()) return {
                    "background": "linear-gradient(90deg, #979a90 0%, #bcc4ba 20%, #e2e7e5 75%, #95a7a1 90%, #697672 100%)",
                    'height': '60px',
                    'width': '480px',
                    'clip-path': 'polygon(6.25% 0, 0 50%, 6.25% 100%, 93.75% 100%, 100% 50%, 93.75% 0)',
                    'right': '15px',
                    'top': '30px',
                }
                else return {
                    'height': '60px',
                    'width': '480px',
                    'clip-path': 'polygon(6.25% 0, 0 50%, 6.25% 100%, 93.75% 100%, 100% 50%, 93.75% 0)',
                    'right': '15px',
                    'top': '30px',
                }
            },
        },
        21: {
            title: "",
            cost(x) {
                let c = d(0)
                if (x.lt(52)) c = d(100000).pow(x).times(100000)
                if (x.gte(52)) c = d(100000).pow(x.sub(50).pow(1.3)).times(1e300)
                return c
            },
            display() {
                let display = `第3殷钢维度 | ${f(this.mult())}x<br>
                数量：${f(player.invar.dimensions_inc[2])}(${fw(player[this.layer].buyables[this.id])})<br>
                价格：${f(this.cost())} 殷钢能量`
                return display
            },
            mult() {
                let m = d(1)
                m = m.times(tmp.invar.allDimMulti)
                m = m.times(tmp.invar.multPer1DimBuy.pow(getBuyableAmount(this.layer, this.id).max(0)))
                m = m.times(tmp.invar.buyables[51].base.pow(getBuyableAmount(invar, 51).max(0)))
                return m
            },
            canAfford() { return player[this.layer].energy.gte(this.cost()) },
            buyMax() {
                let x = player.invar.energy
                if (this.canAfford()) {
                    if (x.lt(Number.MAX_VALUE)) return setBuyableAmount(this.layer, this.id, x.div(100000).max(0.1).logBase(100000).floor().add(1).max(0))
                    if (x.gte(Number.MAX_VALUE)) return setBuyableAmount(this.layer, this.id, x.div(1e300).max(1).logBase(100000).root(1.3).add(50).floor().add(1))
                }
            },
            canBuyMax() { return false },
            buy() {
                if (!this.canBuyMax()) player[this.layer].energy = player[this.layer].energy.sub(this.cost()).max(0),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (this.canBuyMax()) this.buyMax()
            },
            dim() {
                if (player.invar.dimensions_inc[2].gt(0))
                    player.invar.dimensions[1] = player.invar.dimensions[1].add(tmp.invar.dimGain.d2.times(diffout)).max(0)
                player.invar.dimensions_inc[2] = player.invar.dimensions[2].add(getBuyableAmount(this.layer, this.id))
            },
            auto() {
                if (hasUpgrade(invar, 34)) autobuyBuyables1perTick(this.layer, this.id)
                if (hasUpgrade(brass, 25)) this.buyMax()
            },
            unlocked() { return hasNormalAchievement(85) },
            style() {
                if (this.canAfford()) return {
                    "background": "linear-gradient(90deg, #979a90 0%, #bcc4ba 20%, #e2e7e5 75%, #95a7a1 90%, #697672 100%)",
                    'height': '60px',
                    'width': '480px',
                    'clip-path': 'polygon(6.25% 0, 0 50%, 6.25% 100%, 93.75% 100%, 100% 50%, 93.75% 0)',
                    'left': '15px',
                }
                else return {
                    'height': '60px',
                    'width': '480px',
                    'clip-path': 'polygon(6.25% 0, 0 50%, 6.25% 100%, 93.75% 100%, 100% 50%, 93.75% 0)',
                    'left': '15px',
                }
            },
        },
        22: {
            title: "",
            cost(x) {
                let c = d(0)
                if (x.lt(43)) c = d(10000000).pow(x).times(30000000)
                if (x.gte(43)) c = d(10000000).pow(x.sub(41).pow(1.3)).times(3e300)
                return c
            },
            display() {
                let display = `第4殷钢维度 | ${f(this.mult())}x<br>
                数量：${f(player.invar.dimensions_inc[3])}(${fw(player[this.layer].buyables[this.id])})<br>
                价格：${f(this.cost())} 殷钢能量`
                return display
            },
            mult() {
                let m = d(1)
                m = m.times(tmp.invar.allDimMulti)
                m = m.times(tmp.invar.multPer1DimBuy.pow(getBuyableAmount(this.layer, this.id).max(0)))
                m = m.times(tmp.invar.buyables[51].base.pow(getBuyableAmount(invar, 51).max(0)))
                return m
            },
            canAfford() { return player[this.layer].energy.gte(this.cost()) },
            buyMax() {
                let x = player.invar.energy
                if (this.canAfford()) {
                    if (x.lt(Number.MAX_VALUE)) return setBuyableAmount(this.layer, this.id, x.div(30000000).max(0.1).logBase(10000000).floor().add(1).max(0))
                    if (x.gte(Number.MAX_VALUE)) return setBuyableAmount(this.layer, this.id, x.div(3e300).max(1).logBase(10000000).root(1.3).add(41).floor().add(1))
                }
            },
            canBuyMax() { return false },
            buy() {
                if (!this.canBuyMax()) player[this.layer].energy = player[this.layer].energy.sub(this.cost()).max(0),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (this.canBuyMax()) this.buyMax()
            },
            dim() {
                if (player.invar.dimensions_inc[3].gt(0))
                    player.invar.dimensions[2] = player.invar.dimensions[2].add(tmp.invar.dimGain.d3.times(diffout)).max(0)
                player.invar.dimensions_inc[3] = player.invar.dimensions[3].add(getBuyableAmount(this.layer, this.id))
            },
            auto() {
                if (hasUpgrade(invar, 34)) autobuyBuyables1perTick(this.layer, this.id)
                if (hasUpgrade(brass, 25)) this.buyMax()
            },
            unlocked() { return hasNormalAchievement(85) },
            style() {
                if (this.canAfford()) return {
                    "background": "linear-gradient(90deg, #979a90 0%, #bcc4ba 20%, #e2e7e5 75%, #95a7a1 90%, #697672 100%)",
                    'height': '60px',
                    'width': '480px',
                    'clip-path': 'polygon(6.25% 0, 0 50%, 6.25% 100%, 93.75% 100%, 100% 50%, 93.75% 0)',
                    'right': '15px',
                    'top': '30px',
                }
                else return {
                    'height': '60px',
                    'width': '480px',
                    'clip-path': 'polygon(6.25% 0, 0 50%, 6.25% 100%, 93.75% 100%, 100% 50%, 93.75% 0)',
                    'right': '15px',
                    'top': '30px',
                }
            },
        },
        31: {
            title: "",
            cost(x) {
                let c = d(0)
                if (x.lt(34)) c = d(1e9).pow(x).times(1e9)
                if (x.gte(34)) c = d(1e9).pow(x.sub(32).pow(1.3)).times(1e297)
                return c
            },
            display() {
                let display = `第5殷钢维度 | ${f(this.mult())}x<br>
                数量：${f(player.invar.dimensions_inc[4])}(${fw(player[this.layer].buyables[this.id])})<br>
                价格：${f(this.cost())} 殷钢能量`
                return display
            },
            mult() {
                let m = d(1)
                m = m.times(tmp.invar.allDimMulti)
                m = m.times(tmp.invar.multPer1DimBuy.pow(getBuyableAmount(this.layer, this.id).max(0)))
                m = m.times(tmp.invar.buyables[51].base.pow(getBuyableAmount(invar, 51).sub(1).max(0)))
                return m
            },
            canAfford() { return player[this.layer].energy.gte(this.cost()) },
            buyMax() {
                let x = player.invar.energy
                if (this.canAfford()) {
                    if (x.lt(Number.MAX_VALUE)) return setBuyableAmount(this.layer, this.id, x.div(1e9).max(0.1).logBase(1e9).floor().add(1).max(0))
                    if (x.gte(Number.MAX_VALUE)) return setBuyableAmount(this.layer, this.id, x.div(1e297).max(1).logBase(1e9).root(1.3).add(32).floor().add(1))
                }
            },
            canBuyMax() { return false },
            buy() {
                if (!this.canBuyMax()) player[this.layer].energy = player[this.layer].energy.sub(this.cost()).max(0),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (this.canBuyMax()) this.buyMax()
            },
            dim() {
                if (player.invar.dimensions_inc[4].gt(0))
                    player.invar.dimensions[3] = player.invar.dimensions[3].add(tmp.invar.dimGain.d4.times(diffout)).max(0)
                player.invar.dimensions_inc[4] = player.invar.dimensions[4].add(getBuyableAmount(this.layer, this.id))
            },
            auto() {
                if (hasUpgrade(invar, 35)) autobuyBuyables1perTick(this.layer, this.id)
                if (hasUpgrade(brass, 25)) this.buyMax()
            },
            unlocked() { return player.invar.buyables[51].gte(1) },
            style() {
                let leftshift = d(15)
                if (!tmp.invar.buyables[32].unlocked) leftshift = d(-225)
                if (this.canAfford()) return {
                    "background": "linear-gradient(90deg, #979a90 0%, #bcc4ba 20%, #e2e7e5 75%, #95a7a1 90%, #697672 100%)",
                    'height': '60px',
                    'width': '480px',
                    'clip-path': 'polygon(6.25% 0, 0 50%, 6.25% 100%, 93.75% 100%, 100% 50%, 93.75% 0)',
                    'left': `${fw(leftshift)}px`,
                }
                else return {
                    'height': '60px',
                    'width': '480px',
                    'clip-path': 'polygon(6.25% 0, 0 50%, 6.25% 100%, 93.75% 100%, 100% 50%, 93.75% 0)',
                    'left': `${fw(leftshift)}px`,
                }
            },
        },
        32: {
            title: "",
            cost(x) {
                let c = d(0)
                if (x.lt(29)) c = d(1e10).pow(x).times(1e19)
                if (x.gte(29)) c = d(1e10).pow(x.sub(27).pow(1.3)).times(1e289)
                return c
            },
            display() {
                let display = `第6殷钢维度 | ${f(this.mult())}x<br>
                数量：${f(player.invar.dimensions_inc[5])}(${fw(player[this.layer].buyables[this.id])})<br>
                价格：${f(this.cost())} 殷钢能量`
                return display
            },
            mult() {
                let m = d(1)
                m = m.times(tmp.invar.allDimMulti)
                m = m.times(tmp.invar.multPer1DimBuy.pow(getBuyableAmount(this.layer, this.id).max(0)))
                m = m.times(tmp.invar.buyables[51].base.pow(getBuyableAmount(invar, 51).sub(2).max(0)))
                return m
            },
            canAfford() { return player[this.layer].energy.gte(this.cost()) },
            buyMax() {
                let x = player.invar.energy
                if (this.canAfford()) {
                    if (x.lt(Number.MAX_VALUE)) return setBuyableAmount(this.layer, this.id, x.div(1e19).max(0.1).logBase(1e10).floor().add(1).max(0))
                    if (x.gte(Number.MAX_VALUE)) return setBuyableAmount(this.layer, this.id, x.div(1e289).max(1).logBase(1e10).root(1.3).add(27).floor().add(1))
                }
            },
            canBuyMax() { return false },
            buy() {
                if (!this.canBuyMax()) player[this.layer].energy = player[this.layer].energy.sub(this.cost()).max(0),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (this.canBuyMax()) this.buyMax()
            },
            dim() {
                if (player.invar.dimensions_inc[5].gt(0))
                    player.invar.dimensions[4] = player.invar.dimensions[4].add(tmp.invar.dimGain.d5.times(diffout)).max(0)
                player.invar.dimensions_inc[5] = player.invar.dimensions[5].add(getBuyableAmount(this.layer, this.id))
            },
            auto() {
                if (hasUpgrade(invar, 35)) autobuyBuyables1perTick(this.layer, this.id)
                if (hasUpgrade(brass, 25)) this.buyMax()
            },
            unlocked() { return getBuyableAmount(invar, 51).gte(2) },
            style() {
                if (this.canAfford()) return {
                    "background": "linear-gradient(90deg, #979a90 0%, #bcc4ba 20%, #e2e7e5 75%, #95a7a1 90%, #697672 100%)",
                    'height': '60px',
                    'width': '480px',
                    'clip-path': 'polygon(6.25% 0, 0 50%, 6.25% 100%, 93.75% 100%, 100% 50%, 93.75% 0)',
                    'right': '15px',
                    'top': '30px',
                }
                else return {
                    'height': '60px',
                    'width': '480px',
                    'clip-path': 'polygon(6.25% 0, 0 50%, 6.25% 100%, 93.75% 100%, 100% 50%, 93.75% 0)',
                    'right': '15px',
                    'top': '30px',
                }
            },
        },
        41: {
            title: "",
            cost(x) {
                let c = d(0)
                if (x.lt(24)) c = d(1e12).pow(x).times(1e25)
                if (x.gte(24)) c = d(1e12).pow(x.sub(22).pow(1.3)).times(1e289)
                return c
            },
            display() {
                let display = `第7殷钢维度 | ${f(this.mult())}x<br>
                数量：${f(player.invar.dimensions_inc[6])}(${fw(player[this.layer].buyables[this.id])})<br>
                价格：${f(this.cost())} 殷钢能量`
                return display
            },
            mult() {
                let m = d(1)
                m = m.times(tmp.invar.allDimMulti)
                m = m.times(tmp.invar.multPer1DimBuy.pow(getBuyableAmount(this.layer, this.id).max(0)))
                m = m.times(tmp.invar.buyables[51].base.pow(getBuyableAmount(invar, 51).sub(3).max(0)))
                return m
            },
            canAfford() { return player[this.layer].energy.gte(this.cost()) },
            buyMax() {
                let x = player.invar.energy
                if (this.canAfford()) {
                    if (x.lt(Number.MAX_VALUE)) return setBuyableAmount(this.layer, this.id, x.div(1e25).max(0.1).logBase(1e12).floor().add(1).max(0))
                    if (x.gte(Number.MAX_VALUE)) return setBuyableAmount(this.layer, this.id, x.div(1e289).max(1).logBase(1e12).root(1.3).add(22).floor().add(1))
                }
            },
            canBuyMax() { return false },
            buy() {
                if (!this.canBuyMax()) player[this.layer].energy = player[this.layer].energy.sub(this.cost()).max(0),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (this.canBuyMax()) this.buyMax()
            },
            dim() {
                if (player.invar.dimensions_inc[6].gt(0))
                    player.invar.dimensions[5] = player.invar.dimensions[5].add(tmp.invar.dimGain.d6.times(diffout)).max(0)
                player.invar.dimensions_inc[6] = player.invar.dimensions[6].add(getBuyableAmount(this.layer, this.id))
            },
            auto() {
                if (hasUpgrade(invar, 41)) autobuyBuyables1perTick(this.layer, this.id)
                if (hasUpgrade(brass, 25)) this.buyMax()
            },
            unlocked() { return player.invar.buyables[51].gte(3) },
            style() {
                let leftshift = d(15)
                if (!tmp.invar.buyables[42].unlocked) leftshift = d(-225)
                if (this.canAfford()) return {
                    "background": "linear-gradient(90deg, #979a90 0%, #bcc4ba 20%, #e2e7e5 75%, #95a7a1 90%, #697672 100%)",
                    'height': '60px',
                    'width': '480px',
                    'clip-path': 'polygon(6.25% 0, 0 50%, 6.25% 100%, 93.75% 100%, 100% 50%, 93.75% 0)',
                    'left': `${fw(leftshift)}px`,
                }
                else return {
                    'height': '60px',
                    'width': '480px',
                    'clip-path': 'polygon(6.25% 0, 0 50%, 6.25% 100%, 93.75% 100%, 100% 50%, 93.75% 0)',
                    'left': `${fw(leftshift)}px`,
                }
            },
        },
        42: {
            title: "",
            cost(x) {
                let c = d(0)
                if (x.lt(21)) c = d(1e15).pow(x).times(1e36)
                if (x.gte(21)) c = d(1e15).pow(x.sub(19).pow(1.3)).times(1e276)
                return c
            },
            display() {
                let display = `第8殷钢维度 | ${f(this.mult())}x<br>
                数量：${f(player.invar.dimensions_inc[7])}(${fw(player[this.layer].buyables[this.id])})<br>
                价格：${f(this.cost())} 殷钢能量`
                return display
            },
            mult() {
                let m = d(1)
                m = m.times(tmp.invar.allDimMulti)
                m = m.times(tmp.invar.multPer1DimBuy.pow(getBuyableAmount(this.layer, this.id).max(0)))
                m = m.times(tmp.invar.buyables[51].base.pow(getBuyableAmount(invar, 51).sub(4).max(0)))
                if (hasUpgrade(invar, 24)) m = m.times(upgradeEffect(invar, 24))
                return m
            },
            canAfford() { return player[this.layer].energy.gte(this.cost()) },
            buyMax() {
                let x = player.invar.energy
                if (this.canAfford()) {
                    if (x.lt(Number.MAX_VALUE)) setBuyableAmount(this.layer, this.id, x.div(1e36).max(0.1).logBase(1e15).floor().add(1).max(0))
                    if (x.gte(Number.MAX_VALUE)) setBuyableAmount(this.layer, this.id, x.div(1e276).max(1).logBase(1e15).root(1.3).add(19).floor().add(1))
                }
            },
            canBuyMax() { return false },
            buy() {
                if (!this.canBuyMax()) player[this.layer].energy = player[this.layer].energy.sub(this.cost()).max(0),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (this.canBuyMax()) this.buyMax()
            },
            dim() {
                if (player.invar.dimensions_inc[7].gt(0))
                    player.invar.dimensions[6] = player.invar.dimensions[6].add(tmp.invar.dimGain.d7.times(diffout)).max(0)
                player.invar.dimensions_inc[7] = player.invar.dimensions[7].add(getBuyableAmount(this.layer, this.id))
            },
            auto() {
                if (hasUpgrade(invar, 41)) autobuyBuyables1perTick(this.layer, this.id)
                if (hasUpgrade(brass, 25)) this.buyMax()
            },
            unlocked() { return getBuyableAmount(invar, 51).gte(4) },
            style() {
                if (this.canAfford()) return {
                    "background": "linear-gradient(90deg, #979a90 0%, #bcc4ba 20%, #e2e7e5 75%, #95a7a1 90%, #697672 100%)",
                    'height': '60px',
                    'width': '480px',
                    'clip-path': 'polygon(6.25% 0, 0 50%, 6.25% 100%, 93.75% 100%, 100% 50%, 93.75% 0)',
                    'right': '15px',
                    'top': '30px',
                }
                else return {
                    'height': '60px',
                    'width': '480px',
                    'clip-path': 'polygon(6.25% 0, 0 50%, 6.25% 100%, 93.75% 100%, 100% 50%, 93.75% 0)',
                    'right': '15px',
                    'top': '30px',
                }
            },
        },
        51: {
            title: "殷钢维度提升",
            cost(x) {
                let c = d(0)
                c = d(100000).pow(x.pow(1.4)).times(1e10)
                return c
            },
            display() {
                let display = `重置殷钢能量和殷钢维度，提升1~${fw(getBuyableAmount(this.layer, this.id).add(4).min(8))}殷钢维度的倍数
                效果基数：${f(this.base())}<br>
                数量：${fw(player[this.layer].buyables[this.id])}<br>
                价格：${f(this.cost())} 殷钢能量`
                return display
            },
            base() {
                let m = d(2)
                if (hasUpgrade(invar, 25)) m = m.add(1)
                if (hasMilestone(brass, 0)) m = m.add(1)
                if (hasUpgrade(brass, 25)) m = m.add(1)
                return m
            },
            canAfford() { return player[this.layer].energy.gte(this.cost()) },
            buyMax() {
                let x = player.invar.energy
                if (this.canAfford())
                    setBuyableAmount(invar, 51, x.div(1e10).max(1).logBase(100000).root(1.4).floor().add(1).max(0))
            },
            canBuyMax() { return hasMilestone(invar, 5) },
            buy() {
                if (!this.canBuyMax()) player[this.layer].energy = player[this.layer].energy.sub(this.cost()).max(0),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1)),
                    resetInvarDimEnergy()
                if (this.canBuyMax()) this.buyMax(),
                    resetInvarDimEnergy()
            },
            unlocked() { return hasUpgrade(invar, 21) },
            canAuto() { return hasMilestone(brass, 1) },
            auto() {
                if (this.canAuto())
                    this.buyMax()
            },
            style() {
                if (this.canAfford()) return {
                    "background": "linear-gradient(45deg, #979a90 0%, #bcc4ba 20%, #e2e7e5 75%, #95a7a1 90%, #697672 100%)",
                    'height': '120px',
                    'width': '180px',
                    'line-height': '120%'
                }
                else return {
                    'height': '120px',
                    'width': '180px',
                    'line-height': '120%'
                }
            },
        },
        52: {
            title() {
                let t = "殷钢星系"
                let scaling = ""
                if (getBuyableAmount(invar, 52).gte(10)) scaling = "遥远的"
                return scaling + t
            },
            cost(x) {
                let c = d(0)
                c = d(3).times(x).add(6).max(6)
                if (x.gte(5)) c = d(10).times(x.sub(5)).add(28)
                if (x.gte(10)) c = d(20).times(x.sub(10).pow(2)).add(88)
                return c
            },
            display() {
                let display = `重置殷钢能量、殷钢维度和殷钢维度提升，提升购买单个维度的基数
                效果基数：${f(this.base())}<br>
                数量：${fw(player[this.layer].buyables[this.id])}<br>
                价格：${fw(this.cost())} 殷钢维度提升`
                return display
            },
            base() {
                let b = d(0.5)
                if (hasUpgrade(brass, "a2")) b = b.add(0.1)
                return b
            },
            effect(x) {
                let eff = this.base().times(x.max(0))
                return eff
            },
            canAfford() { return player[this.layer].buyables[51].gte(this.cost()) },
            buyMax() {
                let x = getBuyableAmount(invar, 51)
                if (this.canAfford()) {
                    if (x.lte(18)) return setBuyableAmount(this.layer, this.id, x.sub(6).div(3).max(0).floor().add(1))
                    if (x.gt(18) && x.lte(68)) return setBuyableAmount(this.layer, this.id, x.sub(18).div(10).max(0).floor().add(5))
                    if (x.gt(68) && x.lt(88)) return setBuyableAmount(this.layer, this.id, d(10))
                    if (x.gte(88)) return setBuyableAmount(this.layer, this.id, x.sub(88).max(0).div(20).root(2).max(0).floor().add(11))
                }
            },
            canBuyMax() { return false },
            buy() {
                if (!this.canBuyMax()) player[this.layer].energy = player[this.layer].energy.sub(this.cost()).max(0),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1)),
                    resetInvarDEandDB()
                if (this.canBuyMax()) this.buyMax()
            },
            unlocked() { return hasUpgrade(invar, 31) },
            canAuto() { return hasMilestone(brass, 1) },
            auto() {
                if (this.canAuto())
                    this.buyMax()
            },
            style() {
                if (this.canAfford()) return {
                    "background": "linear-gradient(45deg, #979a90 0%, #bcc4ba 20%, #e2e7e5 75%, #95a7a1 90%, #697672 100%)",
                    'height': '120px',
                    'width': '180px',
                    'line-height': '120%'
                }
                else return {
                    'height': '120px',
                    'width': '180px',
                    'line-height': '120%'
                }
            },
        },
    },


    milestones: {
        0: {
            requirementDescription() { return `完成1次殷钢维度提升` },
            effectDescription() { return `奖励：解锁第5殷钢维度` },
            done() { return getBuyableAmount(invar, 51).gte(1) },
            unlocked() { return hasNormalAchievement(85) },
        },
        1: {
            requirementDescription() { return `完成2次殷钢维度提升` },
            effectDescription() { return `奖励：解锁第6殷钢维度` },
            done() { return getBuyableAmount(invar, 51).gte(2) },
            unlocked() { return hasNormalAchievement(85) },
        },
        2: {
            requirementDescription() { return `完成3次殷钢维度提升` },
            effectDescription() { return `奖励：解锁第7殷钢维度` },
            done() { return getBuyableAmount(invar, 51).gte(3) },
            unlocked() { return hasNormalAchievement(85) },
        },
        3: {
            requirementDescription() { return `完成4次殷钢维度提升` },
            effectDescription() { return `奖励：解锁第8殷钢维度` },
            done() { return getBuyableAmount(invar, 51).gte(4) },
            unlocked() { return hasNormalAchievement(85) },
        },
        4: {
            requirementDescription() { return `获得1.0000e120殷钢能量` },
            effectDescription() { return `现在可以解锁一些自动化` },
            done() { return player.invar.energy.gte(1e120) },
            unlocked() { return hasNormalAchievement(85) },
        },
        5: {
            requirementDescription() { return `获得9殷钢星系` },
            effectDescription() { return `现在可以购买最大殷钢维度提升而只重置一次` },
            done() { return getBuyableAmount(invar, 52).gte(9) },
            unlocked() { return hasNormalAchievement(85) },
        },
    },

    multPer1DimBuy() {
        let m = d(2)
        if (hasUpgrade(invar, 31)) m = m.add(buyableEffect(invar, 52))
        return m
    },

    allDimMulti() {
        let m = d(1)
        if (hasUpgrade(alumbrass, 12)) m = m.times(upgradeEffect(alumbrass, 12))
        return m
    },

    energy: {
        gain() {
            let g = d(0)
            if (hasNormalAchievement(85))
                g = g.add(player.invar.dimensions_inc[0]).times(tmp.invar.buyables[11].mult).max(0)
            return g
        },
        effect1() { //铁矿石
            let eff = d(0)
            if (hasNormalAchievement(85)) eff = d(10).pow(player.invar.energy.max(1).log10().pow(0.8))
            return eff
        },
        effect2() { //康铜精华
            let eff = d(0)
            if (hasNormalAchievement(85)) eff = player.invar.energy.max(1).log10().times(50).root(1.25).floor()
            return eff
        },
    },

    dimGain: {
        d1() {
            let g = d(0)
            if (hasNormalAchievement(85))
                g = player.invar.dimensions_inc[1].times(tmp.invar.buyables[12].mult)
            return g
        },
        d2() {
            let g = d(0)
            if (hasNormalAchievement(85))
                g = player.invar.dimensions_inc[2].times(tmp.invar.buyables[21].mult)
            return g
        },
        d3() {
            let g = d(0)
            if (hasNormalAchievement(85))
                g = player.invar.dimensions_inc[3].times(tmp.invar.buyables[22].mult)
            return g
        },
        d4() {
            let g = d(0)
            if (player.invar.buyables[51].gte(1))
                g = player.invar.dimensions_inc[4].times(tmp.invar.buyables[31].mult)
            return g
        },
        d5() {
            let g = d(0)
            if (player.invar.buyables[51].gte(2))
                g = player.invar.dimensions_inc[5].times(tmp.invar.buyables[32].mult)
            return g
        },
        d6() {
            let g = d(0)
            if (player.invar.buyables[51].gte(3))
                g = player.invar.dimensions_inc[6].times(tmp.invar.buyables[41].mult)
            return g
        },
        d7() {
            let g = d(0)
            if (player.invar.buyables[51].gte(4))
                g = player.invar.dimensions_inc[7].times(tmp.invar.buyables[42].mult)
            return g
        },
        d8() {

        },
    },

    update(diff) {
        if (player.invar.points.gt(player.invar.best)) player.invar.best = player.invar.points

        if (player.invar.energy.lt(1)) player.invar.energy = d(1)

        if (player.invar.resetDelay >= 1) player.invar.energy = d(0),
            player.invar.resetDelay = 0
    },

    tabFormat: [
        ["display-text", function () { return getPointsDisplay() }],
        "main-display",
        ["display-text", () => `你同时最多拥有 ${formatWhole(player.invar.best)} 殷钢锭`],
        "blank",
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "upgrades": {
                unlocked() { return tmp.invar.layerShown },
                name() { return '升级' },
                content: [
                    ["blank", "15px"],
                    "upgrades",
                ]
            },
            "milestones": {
                unlocked() { return hasNormalAchievement(85) },
                name() { return '里程碑' },
                content: [
                    ["blank", "15px"],
                    "milestones",
                ]
            },
            "dimension": {
                unlocked() { return hasNormalAchievement(85) },
                name() { return '殷钢维度' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () {
                        return `你有 ${textStyle_h2(f(player.invar.energy), '95a7a1')} 殷钢能量
                        <br>加成铁矿石获取 ${textStyle_h2(f(tmp.invar.energy.effect1) + "x", '95a7a1')}
                        <br>提升康铜精华倍增等级上限 ${textStyle_h2("+" + fw(tmp.invar.energy.effect2), '95a7a1')}`
                    }],
                    ["display-text", function () { return `(+${textStyle_h2(f(tmp.invar.energy.gain), '95a7a1')}/秒)` }],
                    "blank",
                    ["display-text", function () { return `购买单个维度的乘数：${textStyle_h2(f(tmp.invar.multPer1DimBuy) + "x", '95a7a1')}` }],
                    "blank",
                    ["buyables", [1, 2, 3, 4]],
                    ["blank", '60px'],
                    ["buyables", [5]],
                ]
            },
        },
    },
})


//世界1层12：铝黄铜
addLayer("alumbrass", {
    componentStyles: {
        "clickable"() {
            return {
                'border-radius': '0',
                'line-height': '100%',
            }
        }
    },
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: d(0),             // "points" is the internal name for the main resource of the layer.
            ore: d(0),
            molten: d(0),
            cast: {
                ingot: false,
                nugget: false,
                plate: false,
                gear: false,
                axe_head: false,
                pickaxe_head: false,
                sword_blade: false,
                wide_guard: false,
                shovel_head: false,
                binding: false,
                tool_rod: false,
            },
        }
    },

    color: "#f0d467",                       // The color for this layer, which affects many elements.
    nodeStyle: {
        "background": "linear-gradient(90deg, #e6c34b 0%, #f0d467 30%, #e6c34b 75%, #ab7d1b 100%)",
    },
    resource: "铝黄铜锭",            // The name of this layer's main prestige resource.
    symbol: "铝黄铜",
    row: 1,                                 // The row this layer is on (0 is the first row).
    position: 11,
    baseResource: "points",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.points },  // A function to return the current amount of baseResource.

    requires: d(10),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "normal",                         // Determines the formula used for calculating prestige currency.
    exponent: 0.5,                          // "normal" prestige gain is (currency^exponent).
    layerShown() { return hasNormalAchievement(92) },

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        m = d(1)                            // 合金的gainMult是给对应合金倍率的？
        return m
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return d(1)
    },

    doReset() {
        return undefined
    },

    upgrades: {
        11: {
            title: "像青铜一样的配比",
            description: "3倍铝黄铜锭合金倍率",
            cost() { return new ExpantaNum(240) },
            unlocked() { return tmp.alumbrass.layerShown },
        },
        12: {
            title: "“无限力量”",
            description: "铝黄铜锭加成所有殷钢维度的倍数",
            cost() { return new ExpantaNum(1000) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.alumbrass.points.max(0).add(1).pow(3.5)
                if (hasUpgrade(zinc, 12)) eff = player.alumbrass.points.min(tmp.alloy_s.clickables[14].mult.times(300)).max(0).add(1).pow(4.2)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：(铝黄铜锭+1)<sup>3.5</sup>`
                if (hasUpgrade(zinc, 12))`公式：(生效的铝黄铜锭+1)<sup>4.2</sup><br>
                生效的铝黄铜锭：min(铝黄铜锭, 铝黄铜锭合金倍率·300)`
                return t
            },
        },
        13: {
            title: "底数再次加强",
            description: "康铜精华倍增：底数加强 的等级上限+2",
            currencyInternalName: "essence",
            currencyDisplayName: "康铜精华",
            currencyLayer: constantan,
            cost() { return new ExpantaNum('6.666e6666') },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        14: {
            title: "不是单纯的一个新材料",
            description: "需求：等级4,340<br>殷钢星系的数量加成铝黄铜锭熔炼倍率",
            currencyInternalName: "essence",
            currencyDisplayName: "康铜精华",
            currencyLayer: constantan,
            canAfford() { return player.level.gte(4340) },
            cost() { return new ExpantaNum('6.888e6888') },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = getBuyableAmount(invar, 52)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：殷钢星系`
                return t
            },
        },
        15: {
            title: "浇铸的开始",
            description: "需求：等级4,400<br>解锁本层级铸模界面，以及现在可以解锁新自动化",
            canAfford() { return player.level.gte(4400) },
            cost() { return new ExpantaNum(5000) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        21: {
            title: "熔融铝黄铜",
            description: "需求：等级4,525<br>解锁下一个铸模",
            canAfford() { return player.level.gte(4525) },
            cost() { return new ExpantaNum(150000) },
            unlocked() { return hasUpgrade(alumbrass, 15) },
            style() {
                return { 'width': '187.5px' }
            },
        },
        22: {
            title: "重新凝固",
            description: "需求：等级4,580<br>继续解锁下一个铸模",
            canAfford() { return player.level.gte(4580) },
            cost() { return new ExpantaNum(2000000) },
            unlocked() { return hasUpgrade(alumbrass, 21) },
            style() {
                return { 'width': '187.5px' }
            },
        },
        23: {
            title: "铝黄铜反复倍增",
            description: "需求：等级4,666<br>铝黄铜合金倍率变为10x",
            canAfford() { return player.level.gte(4666) },
            cost() { return new ExpantaNum(4000000) },
            unlocked() { return hasUpgrade(alumbrass, 22) },
            style() {
                return { 'width': '187.5px' }
            },
        },
        24: {
            title: "殷钢绑定-加强",
            description: "需求：等级5,050<br>殷钢锭的熔炼倍率被锁定为铁锭、镍锭最小值的^系数<br>系数取决于铝黄铜锭，硬上限为^1060",
            canAfford() { return player.level.gte(5050) },
            cost() { return new ExpantaNum(50000000) },
            unlocked() { return hasUpgrade(alumbrass, 23) },
            effect() {
                let eff = player.alumbrass.points.max(1).log10().root(2).div(33.33).min(1060)
                return eff
            },
            effectDisplay() {
                return `^${format(upgradeEffect(this.layer, this.id), 4)}`
            },
            style() {
                return { 'width': '187.5px' }
            },
            tooltip() {
                let t = `公式：min(lg(铝黄铜锭)<sup>0.5</sup>/33.33, 0.4)`
                return t
            },
        },
        31: {
            title: "继续丰富矿石种类",
            description: "需求：等级5,080<br>解锁新的矿石层级：锌",
            canAfford() { return player.level.gte(5080) },
            cost() { return new ExpantaNum(30000000) },
            unlocked() { return hasUpgrade(alumbrass, 24) },
        },
        32: {
            title: "都需要浇铸",
            description: "需求：等级8,590<br>继续解锁下一个铸模",
            canAfford() { return player.level.gte(8590) },
            cost() { return new ExpantaNum(1.5e20) },
            unlocked() { return hasUpgrade(alumbrass, 31) },
        },
    },

    clickables: {
        11: {
            canClick() { return },
            onClick() {
            },
            unlocked() { return hasUpgrade(alumbrass, 15) },
            style() {
                return {
                    'min-height': '128px',
                    'width': '128px',
                    "background": "linear-gradient(90deg, #e6c34b 0%, #f0d467 30%, #e6c34b 75%, #ab7d1b 100%)",
                    "clip-path": 'polygon(0 0, 8px 0, 8px 96px, 16px 96px, 16px 104px, 24px 104px, 24px 112px, 48px 112px, 48px 104px, 72px 104px, 72px 96px, 96px 96px, 96px 88px, 120px 88px, 120px 40px, 112px 40px, 112px 32px, 104px 32px, 104px 24px, 96px 24px, 96px 16px, 80px 16px, 80px 24px, 56px 24px, 56px 32px, 32px 32px, 32px 40px, 8px 40px, 8px 0, 128px 0, 128px 128px, 0 128px)',
                }
            },
        },
        21: {
            title() {
                let t = "锭铸模"
                return t
            },
            display() {
                let has = player.alumbrass.cast[this.corresponding] ? "是" : "否"
                let d = `消耗：10,000铝黄铜锭
                <br>效果：铝黄铜的熔炼倍率变为10x
                <br>是否获得：${has}`
                return d
            },
            corresponding: "ingot",
            canClick() { return player.alumbrass.points.gte(10000) && !player.alumbrass.cast[this.corresponding] },
            onClick() {
                player.alumbrass.points = player.alumbrass.points.sub(10000),
                    player.alumbrass.cast[this.corresponding] = true
            },
            unlocked() { return hasUpgrade(alumbrass, 15) },
            style() {
                return {
                    'min-height': '96px',
                    'width': '128px',
                    "background": "linear-gradient(90deg, #e6c34b 0%, #f0d467 30%, #e6c34b 75%, #ab7d1b 100%)",
                }
            },
        },
        12: {
            canClick() { return },
            onClick() {
            },
            unlocked() { return hasUpgrade(alumbrass, 21) },
            style() {
                return {
                    'min-height': '128px',
                    'width': '128px',
                    "background": "linear-gradient(90deg, #e6c34b 0%, #f0d467 30%, #e6c34b 75%, #ab7d1b 100%)",
                    "clip-path": 'polygon(0 0, 40px 0, 40px 64px, 48px 64px, 48px 88px, 56px 88px, 56px 96px, 72px 96px, 72px 88px, 80px 88px, 80px 64px, 88px 64px, 88px 48px, 80px 48px, 80px 40px, 72px 40px, 72px 32px, 48px 32px, 48px 40px, 40px 40px, 40px 0, 128px 0, 128px 128px, 0 128px)',
                }
            },
        },
        22: {
            title() {
                let t = "粒铸模"
                return t
            },
            display() {
                let has = player.alumbrass.cast[this.corresponding] ? "是" : "否"
                let d = `消耗：200,000铝黄铜锭
                <br>效果：铝黄铜的熔炼倍率变为25x
                <br>是否获得：${has}`
                return d
            },
            corresponding: "nugget",
            canClick() { return player.alumbrass.points.gte(200000) && !player.alumbrass.cast[this.corresponding] },
            onClick() {
                player.alumbrass.points = player.alumbrass.points.sub(200000),
                    player.alumbrass.cast[this.corresponding] = true
            },
            unlocked() { return hasUpgrade(alumbrass, 21) },
            style() {
                return {
                    'min-height': '96px',
                    'width': '128px',
                    "background": "linear-gradient(90deg, #e6c34b 0%, #f0d467 30%, #e6c34b 75%, #ab7d1b 100%)",
                }
            },
        },
        13: {
            canClick() { return },
            onClick() {
            },
            unlocked() { return hasUpgrade(alumbrass, 22) },
            style() {
                return {
                    'min-height': '128px',
                    'width': '128px',
                    "background": "linear-gradient(90deg, #e6c34b 0%, #f0d467 30%, #e6c34b 75%, #ab7d1b 100%)",
                    "clip-path": 'polygon(0 0, 24px 0, 24px 40px, 32px 40px, 32px 48px, 40px 48px, 40px 56px, 64px 56px, 64px 64px, 72px 64px, 72px 72px, 80px 72px, 80px 96px, 88px 96px, 88px 104px, 96px 104px, 96px 112px, 104px 112px, 104px 64px, 96px 64px, 96px 48px, 88px 48px, 88px 40px, 72px 40px, 72px 32px, 24px 32px, 24px 0, 128px 0, 128px 128px, 0 128px)',
                }
            },
        },
        23: {
            title() {
                let t = "镐头铸模"
                return t
            },
            display() {
                let has = player.alumbrass.cast[this.corresponding] ? "是" : "否"
                let d = `消耗：3,000,000铝黄铜锭
                <br>效果：现在可以获得新合成配方
                <br>是否获得：${has}`
                return d
            },
            corresponding: "pickaxe_head",
            canClick() { return player.alumbrass.points.gte(3000000) && !player.alumbrass.cast[this.corresponding] },
            onClick() {
                player.alumbrass.points = player.alumbrass.points.sub(3000000),
                    player.alumbrass.cast[this.corresponding] = true
            },
            unlocked() { return hasUpgrade(alumbrass, 22) },
            style() {
                return {
                    'min-height': '96px',
                    'width': '128px',
                    "background": "linear-gradient(90deg, #e6c34b 0%, #f0d467 30%, #e6c34b 75%, #ab7d1b 100%)",
                }
            },
        },
        14: {
            canClick() { return },
            onClick() {
            },
            unlocked() { return hasUpgrade(alumbrass, 32) },
            style() {
                return {
                    'min-height': '128px',
                    'width': '128px',
                    "background": "linear-gradient(90deg, #e6c34b 0%, #f0d467 30%, #e6c34b 75%, #ab7d1b 100%)",
                    "clip-path": 'polygon(0 0, 24px 0, 24px 48px, 32px 48px, 32px 56px, 24px 56px, 24px 64px, 16px 64px, 16px 72px, 24px 72px, 24px 80px, 40px 80px, 40px 88px, 32px 88px, 32px 104px, 48px 104px, 48px 96px, 56px 96px, 56px 104px, 64px 104px, 64px 112px, 72px 112px, 72px 104px, 80px 104px, 80px 88px, 88px 88px, 88px 96px, 104px 96px, 104px 80px, 96px 80px, 96px 72px, 104px 72px, 104px 64px, 112px 64px, 112px 56px, 104px 56px, 104px 48px, 88px 48px, 88px 40px, 96px 40px, 96px 24px, 80px 24px, 80px 32px, 72px 32px, 72px 24px, 64px 24px, 64px 16px, 56px 16px, 56px 24px, 48px 24px, 48px 40px, 40px 40px, 40px 32px, 24px 32px, 24px 0, 128px 0, 128px 128px, 0 128px)',
                }
            },
        },
        24: {
            title() {
                let t = "齿轮铸模"
                return t
            },
            display() {
                let has = player.alumbrass.cast[this.corresponding] ? "是" : "否"
                let d = `消耗：1.5000e20铝黄铜锭
                <br>效果：现在可以获得新合成配方
                <br>是否获得：${has}`
                return d
            },
            corresponding: "gear",
            canClick() { return player.alumbrass.points.gte(1.5e20) && !player.alumbrass.cast[this.corresponding] },
            onClick() {
                player.alumbrass.points = player.alumbrass.points.sub(1.5e20),
                    player.alumbrass.cast[this.corresponding] = true
            },
            unlocked() { return hasUpgrade(alumbrass, 32) },
            style() {
                return {
                    'min-height': '96px',
                    'width': '128px',
                    "background": "linear-gradient(90deg, #e6c34b 0%, #f0d467 30%, #e6c34b 75%, #ab7d1b 100%)",
                }
            },
        },
    },

    update(diff) {
        if (player.alumbrass.points.gt(player.alumbrass.best)) player.alumbrass.best = player.alumbrass.points
    },

    tabFormat: [
        ["display-text", function () { return getPointsDisplay() }],
        "main-display",
        ["display-text", () => `你同时最多拥有 ${formatWhole(player.alumbrass.best)} 铝黄铜锭`],
        "blank",
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "upgrades": {
                unlocked() { return tmp.alumbrass.layerShown },
                name() { return '升级' },
                content: [
                    ["blank", "15px"],
                    "upgrades",
                ]
            },
            "milestones": {
                unlocked() { return false },
                name() { return '里程碑' },
                content: [
                    ["blank", "15px"],
                    "milestones",
                ]
            },
            "casts": {
                unlocked() { return hasUpgrade(alumbrass, 15) },
                name() { return '铸模' },
                content: [
                    ["blank", "15px"],
                    ["raw-html", () => `<h4 style="opacity:.5">不是金锭用不起，而是铝黄铜锭更有性价比！`],
                    "blank",
                    "clickables",
                ]
            },
        },
    },
})


//世界1层13：锌
addLayer("zinc", {
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: d(0),             // "points" is the internal name for the main resource of the layer.
            ore: d(0),
            molten: d(0),
            miningLevel: d(3),
            rarity: d(108),
            progress: d(0),
            findingProgress: d(0),
            hardness: d(2880),
            destroying: false,
            finding: false,
            found: false,
            singularity: d(0),
        }
    },

    color: "#b7e6bf",                       // The color for this layer, which affects many elements.
    nodeStyle: { "background": "linear-gradient(90deg, #a3be9e 0%, #fcfcfc 10%, #b7e6bf 40%, #b7e6bf 60%, #d3fcd9 80%, #4f6c62 100%)" },
    resource: "锌锭",            // The name of this layer's main prestige resource.
    row: 1,                                 // The row this layer is on (0 is the first row).
    position: 12,
    symbol: '锌',

    baseResource: "points",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.points },  // A function to return the current amount of baseResource.

    requires: d(10),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "normal",                         // Determines the formula used for calculating prestige currency.
    exponent: 0.5,                          // "normal" prestige gain is (currency^exponent).

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        let m = d(1)                            // 矿物的gainMult是给对应矿石的
        if (hasUpgrade(zinc, 11)) m = m.times(2)
        if (hasUpgrade(zinc, 21)) m = m.times(upgradeEffect(zinc, 21))
        if (hasUpgrade(brass, 13)) m = m.times(upgradeEffect(brass, 13))
        if (hasCraftingItem(272)) m = m.times(100)
        if (hasMilestone(brass, 0)) m = m.times(10)
        if (hasUpgrade(steel, 12)) m = m.times(tmp.steel.effect1)
        if (hasMilestone(sing_fus, 6)) m = m.times(buyableEffect(sing_fus, 23))
        m = m.floor()
        return m
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return d(1)
    },

    layerShown() { return hasNormalAchievement(95) },          // Returns a bool for if this layer's node should be visible in the tree.

    doReset(resettingLayer) {
        return undefined
    },

    chainChance() {
        let c = d(0.05)
        if (hasUpgrade(zinc, 14)) c = c.add(upgradeEffect(zinc, 14))
        if (hasUpgrade(brass, 11)) c = c.add(0.2)
        return c
    },

    chainMult() {
        let m = d(1)
        if (hasUpgrade(zinc, 13)) m = m.times(20)
        if (hasUpgrade(brass, 13)) m = m.times(upgradeEffect(brass, 13))
        if (hasUpgrade(steel, 12) && hasCraftingItem(301)) m = m.times(tmp.steel.effect1)
        m = m.floor()
        return m
    },

    chainExpectation() {
        let e = d(0)
        let m = tmp.zinc.gainMult
        let cm = tmp.zinc.chainMult
        let c = tmp.zinc.chainChance.max(1e-10)
        e = m.times(cm).add(m.times(d(1).div(c).sub(1))).times(c)
        return e
    },

    upgrades: {
        11: {
            title: "30号元素",
            description: "双倍锌矿石获取",
            currencyInternalName: "ore",
            currencyDisplayName: "锌矿石",
            currencyLayer: zinc,
            cost() { return new ExpantaNum(3) },
            unlocked() { return tmp.zinc.layerShown },
        },
        12: {
            title: "“第1无限维度”",
            description: "第2铝黄铜升级的效果^1.2，但是生效的铝黄铜锭最多为对应合金倍率的300x",
            currencyInternalName: "ore",
            currencyDisplayName: "锌矿石",
            currencyLayer: zinc,
            cost() { return new ExpantaNum(9) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        13: {
            title: "真·连锁挖掘",
            description: "需求：等级5,210<br>解锁锌矿石的连锁挖掘",
            currencyInternalName: "ore",
            currencyDisplayName: "锌矿石",
            currencyLayer: zinc,
            canAfford() { return player.level.gte(5210) },
            cost() { return new ExpantaNum(12) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        14: {
            title: "连锁组件",
            description: "需求：等级5,215<br>锌矿石提升锌矿石自身的连锁概率（最多提升75%）",
            currencyInternalName: "ore",
            currencyDisplayName: "锌矿石",
            currencyLayer: zinc,
            canAfford() { return player.level.gte(5215) },
            cost() { return new ExpantaNum(24) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.zinc.ore.max(1).log10().root(2).div(20).min(0.75)
                return eff
            },
            effectDisplay() {
                return `+${formatPercent(upgradeEffect(this.layer, this.id))}`
            },
            tooltip() {
                let t = `公式：min(lg(锌矿石)<sup>0.5</sup>/20, 0.75)`
                return t
            },
        },
        15: {
            title: "“锌”苦了",
            description: "需求：等级5,210<br>解锁新的熔炼配方",
            currencyInternalName: "ore",
            currencyDisplayName: "锌矿石",
            currencyLayer: zinc,
            canAfford() { return player.level.gte(5210) },
            cost() { return new ExpantaNum(48) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        21: {
            title: "锌强化",
            description: "需求：等级5,215<br>铝黄铜锭加成锌矿石获取",
            canAfford() { return player.level.gte(5215) },
            cost() { return new ExpantaNum(36) },
            unlocked() { return hasUpgrade(zinc, 15) },
            effect() {
                let eff = player.alumbrass.points.max(1).root(18)
                return eff
            },
            effectDisplay() {
                return `${f(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：铝黄铜锭<sup>1/18</sup>`
                return t
            },
        },
        22: {
            title: "铝黄铜强化",
            description: "需求：等级5,218<br>锌锭加成铝黄铜锭合金倍率",
            canAfford() { return player.level.gte(5218) },
            cost() { return new ExpantaNum(48) },
            unlocked() { return hasUpgrade(zinc, 21) },
            effect() {
                let eff = player.zinc.points.max(1).pow(1.12)
                return eff
            },
            effectDisplay() {
                return `${f(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：锌锭<sup>1.12</sup>`
                return t
            },
        },
        23: {
            title: "“锌”出的道具",
            description: "需求：等级5,300<br>解锁更多合成配方",
            canAfford() { return player.level.gte(5300) },
            cost() { return new ExpantaNum(72) },
            unlocked() { return hasUpgrade(zinc, 22) },
        },
        24: {
            title: "青铜力量的余晖",
            description: "需求：等级5,412<br>青铜力量的OoM^2数量以一定幅度指数加成其自身效果",
            canAfford() { return player.level.gte(5412) },
            cost() { return new ExpantaNum(145) },
            unlocked() { return hasUpgrade(zinc, 23) },
            effect() {
                let eff = player.bronze.power.max(1e10).log10().log10().div(2).max(1)
                return eff
            },
            effectDisplay() {
                return `^${f(upgradeEffect(this.layer, this.id))}`
            },
            tooltip() {
                let t = `公式：lg(lg(青铜力量))/2`
                return t
            },
        },
        25: {
            title: "康铜精华力量释放",
            description: "需求：等级6,037<br>康铜精华的OoM^2以一定幅度指数加成其自身效果，解锁第11锌升级",
            canAfford() { return player.level.gte(6037) },
            cost() { return new ExpantaNum(288) },
            unlocked() { return hasUpgrade(zinc, 24) },
            effect() {
                let eff = player.constantan.essence.max(1e10).log10().log10().div(2).max(1)
                return eff
            },
            effectDisplay() {
                return `^${f(upgradeEffect(this.layer, this.id))}`
            },
            tooltip() {
                let t = `公式：lg(lg(康铜精华))/2`
                return t
            },
        },
        31: {
            title: "正统老机械黄铜",
            description: "需求：等级7,818<br>解锁新的合金：黄铜<br>现在可以解锁黄铜锭的合金",
            canAfford() { return player.level.gte(7818) },
            cost() { return new ExpantaNum(360) },
            unlocked() { return hasUpgrade(zinc, 25) },
            style() {
                return {
                    'clip-path': 'polygon(25% 0%, 75% 0%, 100% 50%, 75% 100%, 25% 100%, 0% 50%)',
                    'width': '200px',
                    'min-height': '173.205px'
                }
            }
        },
    },

    clickables: {
        11: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = "点击寻找"
                return d
            },
            canClick() { return !player.zinc.finding && !player.zinc.destroying && !player.zinc.found && isAtLocation('overworld') },
            onClick() {
                if (!player.zinc.finding) player.zinc.finding = true
            },
            unlocked() { return tmp.zinc.layerShown },
            style() {
                return {
                    'min-height': '50px',
                    'width': '120px',
                    'font-size': '20px'
                }
            },
        },
        12: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = "点击挖掘"
                return d
            },
            canClick() { return !player.zinc.destroying && player.zinc.found },
            onClick() {
                if (!player.zinc.destroying) player.zinc.destroying = true
            },
            unlocked() { return tmp.zinc.layerShown },
            style() {
                return {
                    'min-height': '50px',
                    'width': '120px',
                    'font-size': '20px'
                }
            },
        },
    },

    bars: {
        zincFinding: {
            direction: RIGHT,
            width: 360,
            height: 60,
            display() { return `找矿进度: ${format(player.zinc.findingProgress)}/${format(rarity(zinc))}` },
            progress() { let p = player.zinc.findingProgress.div(rarity(zinc)); if (player.zinc.found) p = d(1); return p },
            unlocked() { return tmp.zinc.layerShown },
            fillStyle() { return { "background-color": `${tmp[this.layer].color}` } },
            baseStyle() { return { "background-color": "rgba(0,0,0,0)" } },
            textStyle() { return { "color": "#4f6c62" } },
        },
        zincDestroying: {
            direction: RIGHT,
            width: 360,
            height: 60,
            display() { return `进度: ${format(player.zinc.progress)}/${format(hardness(zinc))}` },
            progress() { return player.zinc.progress.div(hardness(zinc)) },
            unlocked() { return tmp.zinc.layerShown },
            fillStyle() { return { "background-color": `${tmp[this.layer].color}` } },
            baseStyle() { return { "background-color": "rgba(0,0,0,0)" } },
            textStyle() { return { "color": "#4f6c62" } },
        },
    },

    update(diff) {
        if (player.zinc.finding) player.zinc.findingProgress = player.zinc.findingProgress.add(player.copper.speed.times(diff))
        if (player.zinc.findingProgress.gte(rarity(zinc))) player.zinc.findingProgress = d(0),
            player.zinc.finding = false,
            player.zinc.found = true

        if (player.zinc.destroying) player.zinc.progress = player.zinc.progress.add(player.stone.speed.times(diff))
        if (player.zinc.progress.gte(hardness(zinc))) player.zinc.progress = d(0),
            player.zinc.found = false,
            player.zinc.destroying = false,
            player.zinc.ore = player.zinc.ore.add(tmp.zinc.gainMult.times(d(Math.random()).lte(tmp.zinc.chainChance) && hasUpgrade(zinc, 13) ? tmp.zinc.chainMult : d(1)))

        if (player.zinc.points.gt(player.zinc.best)) player.zinc.best = player.zinc.points
    },

    tabFormat: [
        ["display-text", function () { return getPointsDisplay() }],
        ["display-text", () => `你有 ${textStyle_h2(formatWhole(player.zinc.ore), 'b7e6bf')} 锌矿石`],
        "main-display",
        ["display-text", () => `你同时最多拥有 ${formatWhole(player.zinc.best)} 锌锭`],
        "blank",
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "dig": {
                unlocked() { return tmp.zinc.layerShown },
                name() { return '挖掘' },
                content: [
                    ["blank", "15px"],
                    ["row", [["bar", "zincFinding"], "blank", ["clickable", 11],]],
                    "blank",
                    ["row", [["bar", "zincDestroying"], "blank", ["clickable", 12],]],
                    "blank",
                    ["display-text", function () { return player.zinc.found ? `你找到了一处锌矿石` : `你尚未找到锌矿石` }],
                    "blank",
                    ["display-text", function () { return `找矿速度：${format(player.copper.speed)}/秒` }],
                    ["display-text", function () { return `挖掘速度：${format(player.stone.speed)}/秒` }],
                    ["display-text", function () { return `破坏一次的锌矿石获取数量：${textStyle_h2(formatWhole(tmp.zinc.gainMult), 'b7e6bf')}` }],
                    ["display-text", function () { if (hasUpgrade(zinc, 13)) return `连锁挖掘率：${textStyle_h2(formatPercent(tmp.zinc.chainChance), 'b7e6bf')}` }],
                    ["display-text", function () { if (hasUpgrade(zinc, 13)) return `连锁倍数：${textStyle_h2(f(tmp.zinc.chainMult) + "x", 'b7e6bf')}` }],
                    ["display-text", function () {
                        if (hasUpgrade(zinc, 13)) {
                            if (!shiftDown)
                                return `连锁成功后的锌矿石获取数量：${textStyle_h2(fw(tmp.zinc.gainMult.times(tmp.zinc.chainMult)), 'b7e6bf')}（按shift查看期望值）`
                            if (shiftDown)
                                return `锌矿石获取期望：${textStyle_h2(f(tmp.zinc.chainExpectation), 'b7e6bf')}`
                        }
                    }
                    ],
                    ["display-text", function () { return `稀有度：${formatWhole(rarity(zinc))}` }],
                    ["display-text", function () { return `硬度：${formatWhole(hardness(zinc))}` }],
                    ["display-text", function () { return `挖掘等级：3` }],
                    ["display-text", function () { return `需要在主世界挖掘` }],
                ]
            },
            "upgrades": {
                unlocked() { return tmp.zinc.layerShown },
                name() { return '升级' },
                content: [
                    ["blank", "15px"],
                    "upgrades",
                ]
            },
        },
    },
})

const su_upg_text = {
    main1() {
        return `${textColor('[main1]', 'f8ac67')}主线路1<br>
        橡木原木的效果变为原来的^2.25<br>
        需要：5应力`
    },
    main2() {
        return `${textColor('[main2]', 'f8ac67')}主线路2<br>
            总应力加成丛林原木的效果<br>
            需要：7应力<br>
            当前效果：${f(upgradeEffect(brass, 'main2'))}x
            ${shiftDown ? "<br>公式：总应力<sup>3.5</sup>" : ""}`
    },
    main3() {
        return `${textColor('[main3]', 'f8ac67')}主线路3<br>
        金合欢原木的效果变为原来的^2.25<br>
        需要：135应力`
    },
    a1() {
        return `${textColor('[a1]', 'f8ac67')}合金1<br>
        解锁青铜力量强化器MK.5<br>
        需要：650应力`
    },
    a2() {
        return `${textColor('[a2]', 'f8ac67')}合金2<br>
        殷钢星系效果的基数+0.1<br>
        需要：12,750应力`
    },
    a3() {
        return `${textColor('[a3]', 'f8ac67')}合金3<br>
        移除康铜精华倍增：底数加强的等级上限，且其基数+0.1<br>
        需要：4,000应力`
    },
}

var su_upg_text_current


//世界1层14：黄铜
addLayer("brass", {
    componentStyles: {
        "clickable"() {
            return {
                'margin-left': '-7px',
                'margin-right': '-7px',
                'border-radius': '0',
            }
        }
    },
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: d(0),             // "points" is the internal name for the main resource of the layer.
            ore: d(0),
            molten: d(0),
            max_su: d(0),
        }
    },

    color: "#f8ac67",                       // The color for this layer, which affects many elements.
    nodeStyle: {
        "background": "linear-gradient(90deg, #fce892 0%, #fce892 30%, #f8ac67 60%, #f8ac67 80%, #75452c 100%)",
    },
    resource: "黄铜锭",            // The name of this layer's main prestige resource.
    symbol: "黄铜",
    row: 1,                                 // The row this layer is on (0 is the first row).
    position: 13,
    baseResource: "points",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.points },  // A function to return the current amount of baseResource.

    requires: d(10),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "normal",                         // Determines the formula used for calculating prestige currency.
    exponent: 0.5,                          // "normal" prestige gain is (currency^exponent).
    layerShown() { return hasNormalAchievement(97) },

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        m = d(1)                            // 合金的gainMult是给对应合金倍率的？
        return m
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return d(1)
    },

    doReset() {
        return undefined
    },

    upgrades: {
        11: {
            title: "高爆率",
            description: "锌矿石连锁率+20%",
            cost() { return new ExpantaNum(30) },
            unlocked() { return tmp.brass.layerShown },
        },
        12: {
            title: "殷钢-铝黄铜",
            description: "殷钢锭加成铝黄铜锭合金倍率",
            cost() { return new ExpantaNum(50) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = d(10).pow(player.invar.points.max(1).root(60).log(10).add(1).pow(0.9))
                return eff
            },
            effectDisplay() {
                return `${f(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：10<sup>(lg(殷钢锭)/60+1)<sup>0.9</sup></sup>`
                return t
            },
        },
        13: {
            title: "铝黄铜-锌",
            description: "需求：等级8,525<br>铝黄铜锭加成锌矿石获取和锌矿石连锁倍率",
            canAfford() { return player.level.gte(8525) }, //1.00e114,514经验（喜）
            cost() { return new ExpantaNum(150) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.alumbrass.points.max(1).root(18)
                return eff
            },
            effectDisplay() {
                return `${f(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：铝黄铜锭<sup>1/18</sup>`
                return t
            },
        },
        14: {
            title: "应力对机械化的提升",
            description: "需求：等级11,011<br>合成的速度基于总应力而提升，上限为20x",
            canAfford() { return player.level.gte(11011) },
            cost() { return new ExpantaNum(450) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.brass.max_su.max(0).add(1).root(1.2).sub(5).max(1).min(20)
                return eff
            },
            effectDisplay() {
                return `${f(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：min(<sup>1.2</sup>√(总应力+1)-5, 20)`
                return t
            },
        },
        15: {
            title: "应力效率",
            description: "需求：等级11,200<br>等级在11,200之后加成应力获取",
            canAfford() { return player.level.gte(11200) },
            cost() { return new ExpantaNum(750) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.level.max(11200).sub(11199).pow(0.25)
                return eff
            },
            effectDisplay() {
                return `${f(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：(等级-11,199)<sup>0.25</sup>`
                return t
            },
        },
        21: {
            title: "黄铜应力",
            description: "需求：等级12,345<br>黄铜锭加成应力获取，但是生效的黄铜锭不能超过对应合金倍率的400x",
            canAfford() { return player.level.gte(12345) },
            cost() { return new ExpantaNum(1250) },
            unlocked() { return hasUpgrade(brass, 15) },
            effect() {
                let eff = player.brass.points.max(1).min(tmp.alloy_s.clickables[15].mult.times(400)).logBase(8).max(1)
                return eff
            },
            effectDisplay() {
                return `${f(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：log<sub>8</sub>(生效的黄铜锭)<br>
                生效的黄铜锭：min(黄铜锭合金倍率·400, 黄铜锭)`
                return t
            },
        },
        22: {
            title: "黄铜倍率",
            description: "需求：等级12,950<br>黄铜锭合金倍率被锁定为锌锭的^0.6",
            canAfford() { return player.level.gte(12950) },
            cost() { return new ExpantaNum(1250) },
            unlocked() { return hasUpgrade(brass, 21) },
        },
        23: {
            title: "锌锁定",
            description: "锌锭熔炼倍率锁定为锌矿石的10%",
            canAfford() { return player.level.gte(12950) },
            cost() { return new ExpantaNum(777777) },
            unlocked() { return hasUpgrade(brass, 22) },
        },
        24: {
            title: "量产水车",
            description: "需求：等级13,575<br>水车合成倍率变为黄铜锭数量的^0.3",
            canAfford() { return player.level.gte(13575) },
            cost() { return new ExpantaNum(777777777) },
            unlocked() { return hasUpgrade(brass, 23) },
        },
        25: {
            title: "全自动维度",
            description: "需求：等级14,325<br>殷钢维度现在自动购买最大，殷钢维度提升的基数再次+1",
            canAfford() { return player.level.gte(14325) },
            cost() { return new ExpantaNum(1077777777) },
            unlocked() { return hasUpgrade(brass, 24) },
        },
        main1: {
            fullDisplay() { return "main1" },
            canAfford() { return tmp.brass.suCur.gte(5) },
            cost() { return new ExpantaNum(0) },
            need_su() { return d(5) },
            unlocked() { return hasNormalAchievement(103) },
            hoverShowText() {
                if (isUpgradeCovered(this.layer, this.id)) su_upg_text_current = su_upg_text.main1()
            },
            style() {
                let color = '#000000'
                if (hasUpgrade(this.layer, this.id)) color = '#f8ac67'
                let s = {
                    'border-radius': '0%',
                    'border-color': '#ffffff',
                    'background-color': color,
                    'font-size': '20px',
                    'color': '#ffffff',
                    'min-height': '60px',
                    'width': '60px',
                }
                return s
            },
        },
        main2: {
            fullDisplay() { return "main2" },
            canAfford() { return tmp.brass.suCur.gte(7) },
            cost() { return new ExpantaNum(0) },
            need_su() { return d(7) },
            unlocked() { return hasUpgrade(brass, 'main1') },
            hoverShowText() {
                if (isUpgradeCovered(this.layer, this.id)) su_upg_text_current = su_upg_text.main2()
            },
            effect() {
                let eff = player.brass.max_su.max(1).pow(3.5)
                return eff
            },
            style() {
                let color = '#000000'
                if (hasUpgrade(this.layer, this.id)) color = '#f8ac67'
                let s = {
                    'border-radius': '0%',
                    'border-color': '#ffffff',
                    'background-color': color,
                    'font-size': '20px',
                    'color': '#ffffff',
                    'min-height': '60px',
                    'width': '60px',
                }
                return s
            },
        },
        main3: {
            fullDisplay() { return "main3" },
            canAfford() { return tmp.brass.suCur.gte(135) },
            cost() { return new ExpantaNum(0) },
            need_su() { return d(135) },
            unlocked() { return hasUpgrade(brass, 'main2') },
            hoverShowText() {
                if (isUpgradeCovered(this.layer, this.id)) su_upg_text_current = su_upg_text.main3()
            },
            style() {
                let color = '#000000'
                if (hasUpgrade(this.layer, this.id)) color = '#f8ac67'
                let s = {
                    'border-radius': '0%',
                    'border-color': '#ffffff',
                    'background-color': color,
                    'font-size': '20px',
                    'color': '#ffffff',
                    'min-height': '60px',
                    'width': '60px',
                }
                return s
            },
        },
        a1: {
            fullDisplay() { return "a1" },
            canAfford() { return tmp.brass.suCur.gte(650) },
            cost() { return new ExpantaNum(0) },
            need_su() { return d(650) },
            unlocked() { return hasUpgrade(brass, 'main3') },
            hoverShowText() {
                if (isUpgradeCovered(this.layer, this.id)) su_upg_text_current = su_upg_text.a1()
            },
            style() {
                let color = '#000000'
                if (hasUpgrade(this.layer, this.id)) color = '#f8ac67'
                let s = {
                    'border-radius': '0%',
                    'border-color': '#ffffff',
                    'background-color': color,
                    'font-size': '20px',
                    'color': '#ffffff',
                    'min-height': '60px',
                    'width': '60px',
                }
                return s
            },
        },
        a2: {
            fullDisplay() { return "a2" },
            canAfford() { return tmp.brass.suCur.gte(12750) },
            cost() { return new ExpantaNum(0) },
            need_su() { return d(12750) },
            unlocked() { return hasUpgrade(brass, 'a1') },
            hoverShowText() {
                if (isUpgradeCovered(this.layer, this.id)) su_upg_text_current = su_upg_text.a2()
            },
            style() {
                let color = '#000000'
                if (hasUpgrade(this.layer, this.id)) color = '#f8ac67'
                let s = {
                    'border-radius': '0%',
                    'border-color': '#ffffff',
                    'background-color': color,
                    'font-size': '20px',
                    'color': '#ffffff',
                    'min-height': '60px',
                    'width': '60px',
                }
                return s
            },
        },
        a3: {
            fullDisplay() { return "a3" },
            canAfford() { return tmp.brass.suCur.gte(4000) },
            cost() { return new ExpantaNum(0) },
            need_su() { return d(4000) },
            unlocked() { return hasUpgrade(brass, 'a2') },
            hoverShowText() {
                if (isUpgradeCovered(this.layer, this.id)) su_upg_text_current = su_upg_text.a3()
            },
            style() {
                let color = '#000000'
                if (hasUpgrade(this.layer, this.id)) color = '#f8ac67'
                let s = {
                    'border-radius': '0%',
                    'border-color': '#ffffff',
                    'background-color': color,
                    'font-size': '20px',
                    'color': '#ffffff',
                    'min-height': '60px',
                    'width': '60px',
                }
                return s
            },
        },
    },

    clickables: {
        11: {
            display() { return su_upg_text_current },
            unlocked() { return hasNormalAchievement(103) },
            style() {
                let s = {
                    'border-radius': '0%',
                    'border-color': '#ffffff',
                    'background-color': '#000000',
                    'color': '#ffffff',
                    'min-height': '120px',
                    'width': '320px',
                }
                return s
            },
        },
    },

    milestones: {
        0: {
            requirementDescription() { return `到达等级10,277` },
            effectDescription() { return `解锁新的自动化，并且使 殷钢维度提升 的基数+1，100x铝黄铜锭合金倍率，10x锌矿石获取以及锌锭熔炼倍率` },
            done() { return player.level.gte(10277) },
            unlocked() { return hasNormalAchievement(103) },
        },
        1: {
            requirementDescription() { return `到达等级14,700` },
            effectDescription() { return `自动购买最大青铜力量强化器MK.5、康铜精华倍增：底数加强、殷钢维度提升和星系，解锁当前进度对应所有的资源、熔炼自动化，1.5x RF发电速度，允许你在破坏石头时获得粘土。另外请注意接下来会新出现的里程碑（在石头、熔炉层）` },
            done() { return player.level.gte(14700) },
            unlocked() { return hasNormalAchievement(103) },
        },
    },

    suGain() {
        let g = d(0)
        let item282 = player.crafting_table.items[282]
        if (hasNormalAchievement(103)) g = g.add(item282.max(0).times(256)).root(3)
        if (hasUpgrade(brass, 15)) g = g.times(upgradeEffect(brass, 15))
        if (hasUpgrade(brass, 21)) g = g.times(upgradeEffect(brass, 21))
        if (hasMilestone(furnace, 1)) g = g.times(10)
        if (hasUpgrade(steel, 12)) g = g.times(tmp.steel.effect2)
        return g
    },

    suSpent() {
        let s = d(0)
        if (hasUpgrade(brass, "main1")) s = s.add(tmp.brass.upgrades.main1.need_su)
        if (hasUpgrade(brass, "main2")) s = s.add(tmp.brass.upgrades.main2.need_su)
        if (hasUpgrade(brass, "main3")) s = s.add(tmp.brass.upgrades.main3.need_su)
        if (hasUpgrade(brass, "a1")) s = s.add(tmp.brass.upgrades.a1.need_su)
        if (hasUpgrade(brass, "a2")) s = s.add(tmp.brass.upgrades.a2.need_su)
        if (hasUpgrade(brass, "a3")) s = s.add(tmp.brass.upgrades.a3.need_su)
        return s
    },

    suCur() {
        let g = tmp.brass.suGain
        let s = tmp.brass.suSpent
        let c = g.sub(s)
        return c
    },



    update(diff) {
        if (player.brass.points.gt(player.brass.best)) player.brass.best = player.brass.points
        if (tmp.brass.suGain.gt(player.brass.max_su)) player.brass.max_su = tmp.brass.suGain
    },

    tabFormat: [
        ["display-text", function () { return getPointsDisplay() }],
        "main-display",
        ["display-text", () => `你同时最多拥有 ${formatWhole(player.brass.best)} 黄铜锭`],
        "blank",
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "upgrades": {
                unlocked() { return tmp.brass.layerShown },
                name() { return '升级' },
                content: [
                    ["blank", "15px"],
                    ["raw-html", () => `<h4 style="opacity:.5">本层级没有烈焰人受伤`],
                    ["upgrades", [1, 2]],
                ]
            },
            "milestones": {
                unlocked() { return hasNormalAchievement(103) },
                name() { return '里程碑' },
                content: [
                    ["blank", "15px"],
                    "milestones",
                ]
            },
            "su": {
                unlocked() { return hasNormalAchievement(103) },
                name() { return '应力' },
                content: [
                    ["blank", "15px"],
                    "blank",
                    ["display-text", function () { return `你有 ${textStyle_h2(fw(player[ct].items[282]), 'f8ac67')} 水车` }],
                    ["display-text", function () { return `你有 ${textStyle_h2(f(tmp.brass.suCur) + "/" + f(tmp.brass.suGain.max(player.brass.max_su)), 'f8ac67')} 应力（基于水车数量）` }],
                    ["display-text", function () {
                        return shiftDown ? `基础应力获取公式：<sup>3</sup>√(水车·256)` : ""
                    }],
                    "blank",
                    "clickables",
                    "blank",
                    ["row", [["upgrade", "main1"], ["upgrade", "main2"], ["upgrade", "main3"]]],
                    ["row", [["upgrade", "a1"], ["upgrade", "a2"], ["upgrade", "a3"]]],
                    "blank",
                    ["display-text", function () { return `鼠标悬停查看升级详情` }],
                ]
            },
        },
    },
})

//世界1层15：钢
addLayer("steel", {
    componentStyles: {
    },
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: d(0),             // "points" is the internal name for the main resource of the layer.
            molten: d(0),
            cooling: false,
            filled: d(0),
            stored: d(0),
            cooltime: d(10),
            coolingProgress: d(0),
        }
    },

    color: "#adadad",                       // The color for this layer, which affects many elements.
    nodeStyle: {
        "background": "linear-gradient(90deg, #7a7a7a 0%, #adadad 30%, #adadad 80%, #989898 90%, #414141 100%)",
    },
    resource: "钢锭",            // The name of this layer's main prestige resource.
    symbol: "钢",
    row: 1,                                 // The row this layer is on (0 is the first row).
    position: 14,
    baseResource: "points",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.points },  // A function to return the current amount of baseResource.

    requires: d(10),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "normal",                         // Determines the formula used for calculating prestige currency.
    exponent: 0.5,                          // "normal" prestige gain is (currency^exponent).
    layerShown() { return hasMilestone(blast_furnace, 0) },

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        m = d(1)                            // 合金的gainMult是给对应合金倍率的？
        if (hasUpgrade(steel, 13)) m = m.times(3)
        if (hasUpgrade(steel, 14)) m = m.times(upgradeEffect(steel, 14))
        if (hasMilestone(steel, 0)) m = m.times(3)
        if (hasUpgrade(steel, 21)) m = m.times(upgradeEffect(steel, 21))
        if (hasUpgrade(steel, 22)) m = m.times(upgradeEffect(steel, 22))
        if (hasUpgrade(steel, 24)) m = m.times(upgradeEffect(steel, 24))
        if (hasUpgrade(silver, 13)) m = m.times(upgradeEffect(silver, 13))
        if (hasUpgrade(silver, 21)) m = m.times(upgradeEffect(silver, 21))
        m = m.floor()
        return m
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return d(1)
    },

    doReset() {
        return undefined
    },

    effect1() {
        let eff1 = player.steel.best.max(0).add(1).pow(3.25)
        return eff1
    },

    effect2() {
        let eff2 = player.steel.best.max(0).add(1).pow(0.7)
        return eff2
    },

    effectDescription() {
        let d = `<br>锌矿石的基础获取${hasCraftingItem(301) ? "和连锁倍率" : ""}变为 ${textStyle_h2(f(tmp.steel.effect1) + "x", 'a4a4a4')}<br>应力获取变为原来的 ${textStyle_h2(f(tmp.steel.effect2) + "x", 'a4a4a4')}`
        return d
    },

    upgrades: {
        11: {
            title: "144mB=1锭",
            description: "3倍高炉熔炼钢倍率，被动获取合成倍率100%的水车",
            currencyInternalName: "molten",
            currencyDisplayName: "mB 熔融钢",
            currencyLayer: steel,
            cost() { return new ExpantaNum(288) },
            unlocked() { return tmp.steel.layerShown },
        },
        12: {
            title: "1296mB=1块",
            description: "解锁熔融钢浇铸钢锭",
            currencyInternalName: "molten",
            currencyDisplayName: "mB 熔融钢",
            currencyLayer: steel,
            cost() { return new ExpantaNum(1296) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        13: {
            title: "16mB=1粒",
            description: "需求：等级17,577<br>3倍钢锭浇铸倍率和高炉炼钢倍率",
            canAfford() { return player.level.gte(17577) },
            cost() { return new ExpantaNum(10) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        14: {
            title: "钢锭自增I",
            description: "需求：等级18,450<br>钢锭加成自身浇铸倍率和高炉炼钢倍率",
            canAfford() { return player.level.gte(18450) },
            cost() { return new ExpantaNum(30) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = d(10).pow(player.steel.points.add(1).log10().div(3).pow(0.9))
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：10<sup>(lg(钢锭+1)/3)<sup>0.9</sup></sup>`
                return t
            },
        },
        15: {
            title: "钢铁制造",
            description: "现在可以解锁更多制造配方",
            cost() { return new ExpantaNum(144) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        21: {
            title: "叠乘效应",
            description: "需求：等级25,400<br>每个已购买的钢升级都能使钢锭浇铸倍率和高炉炼钢倍率变为2x",
            canAfford() { return player.level.gte(25400) },
            cost() { return new ExpantaNum(500) },
            unlocked() { return hasCraftingItem(302) },
            effect() {
                let eff = d(2).pow(player.steel.upgrades.length)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：2<sup>购买的钢升级数量</sup>`
                return t
            },
        },
        22: {
            title: "钢铁：等级加成",
            description: "需求：等级30,303<br>等级在30,303之后加成钢锭浇铸倍率和高炉炼钢倍率",
            canAfford() { return player.level.gte(30303) },
            cost() { return new ExpantaNum(130000) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.level.max(30303).sub(30302).pow(0.18)
                return eff
            },
            effectDisplay() {
                return `${f(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：(等级-30,302)<sup>0.18</sup>`
                return t
            },
        },
        23: {
            title: "经验等级膨胀器",
            description: "每升1级，经验获取变为10x",
            cost() { return new ExpantaNum(2400000) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = d(10).pow(player.level.max(0))
                return eff
            },
            effectDisplay() {
                return `${f(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：10<sup>等级</sup>`
                return t
            },
        },
        24: {
            title: "钢锭自增II",
            description: "需求：等级45,678<br>钢锭继续加成自身浇铸倍率和高炉炼钢倍率",
            canAfford() { return player.level.gte(45678) },
            cost() { return new ExpantaNum(30000000) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = d(10).pow(player.steel.points.add(1).log10().div(5).pow(0.8))
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：10<sup>(lg(钢锭+1)/5)<sup>0.8</sup></sup>`
                return t
            },
        },
        25: {
            title: "谁不喜欢呢？",
            description: "需求：等级57,800<br>解锁2种新的矿物（挖掘随进度解锁）",
            canAfford() { return player.level.gte(57800) },
            cost() { return new ExpantaNum(1.2e10) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
    },

    milestones: {
        0: {
            requirementDescription() { return `到达等级21,000` },
            effectDescription() { return `钢锭浇铸倍率再次变为3x` },
            done() { return player.level.gte(21000) },
            unlocked() { return tmp.steel.layerShown },
        },
    },

    clickables: {
        11: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = "点击填充"
                return d
            },
            canClick() { return !player.steel.cooling && player.steel.stored.eq(0) && player.steel.filled.eq(0) && player.steel.molten.gte(144) },
            onClick() {
                if (!player.steel.cooling) player.steel.cooling = true,
                    player.steel.filled = player.steel.filled.add(tmp.steel.gainMult.min(player.steel.molten.div(144).floor()).times(144)),
                    player.steel.molten = player.steel.molten.sub(tmp.steel.gainMult.min(player.steel.molten.div(144).floor()).times(144))
            },
            unlocked() { return hasUpgrade(steel, 12) },
            style() {
                return {
                    'min-height': '50px',
                    'width': '120px',
                    'font-size': '20px'
                }
            },
        },
        12: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = "点击拾取"
                return d
            },
            canClick() { return player.steel.stored.gt(0) },
            onClick() {
                player.steel.points = player.steel.points.add(player.steel.stored),
                    player.steel.stored = d(0)
            },
            unlocked() { return hasUpgrade(steel, 12) },
            style() {
                return {
                    'min-height': '50px',
                    'width': '120px',
                    'font-size': '20px'
                }
            },
        },
    },

    bars: {
        drain: {
            direction: RIGHT,
            width: 360,
            height: 60,
            display() { return `浇铸进度: ${ftl(player.steel.coolingProgress)}/${ftl(player.steel.cooltime)}` },
            progress() { let p = player.steel.coolingProgress.div(player.steel.cooltime); if (player.steel.stored.gt(0)) p = d(1); return p },
            unlocked() { return hasUpgrade(steel, 12) },
            fillStyle() { return { "background-color": `${tmp[this.layer].color}` } },
            baseStyle() { return { "background-color": "rgba(0,0,0,0)" } },
            textStyle() { return { "color": "white" } },
        },
    },

    update(diff) {
        if (player.steel.cooling) player.steel.coolingProgress = player.steel.coolingProgress.add(d(1).times(diff))
        if (player.steel.coolingProgress.gte(player.steel.cooltime)) player.steel.coolingProgress = d(0),
            player.steel.cooling = false,
            player.steel.stored = player.steel.stored.add(player.steel.filled.div(144).round()),
            player.steel.filled = d(0)

        if (player.steel.points.gt(player.steel.best)) player.steel.best = player.steel.points
    },

    tabFormat: [
        ["display-text", function () { return getPointsDisplay() }],
        ["display-text", () => `你有 ${textStyle_h2(formatWhole(player.steel.molten) + ' mB', 'a4a4a4')} 熔融钢`],
        "main-display",
        ["display-text", function () {
            return shiftDown ? `效果公式：(x+1)<sup>3.25</sup>，(x+1)<sup>0.7</sup>` : ""
        }],
        ["display-text", () => `你同时最多拥有 ${formatWhole(player.steel.best)} 钢锭`],
        "blank",
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "drain": {
                unlocked() { return hasUpgrade(steel, 12) },
                name() { return '浇铸' },
                content: [
                    ["blank", "15px"],
                    ["row", [
                        ["clickable", 11],
                        "blank",
                        ["bar", "drain"],
                        "blank",
                        ["clickable", 12],
                    ]],
                    "blank",
                    ["display-text", function () {
                        return `填入的熔融钢：${fw(player.steel.filled)} mB | 储存的钢锭：${fw(player.steel.stored)}`
                    }],
                    ["display-text", function () { return `钢锭浇铸倍率：${textStyle_h2(fw(tmp.steel.gainMult) + "x", 'a4a4a4')}` }]
                ]
            },
            "upgrades": {
                unlocked() { return tmp.steel.layerShown },
                name() { return '升级' },
                content: [
                    ["blank", "15px"],
                    ["upgrades", [1, 2]],
                ]
            },
            "milestones": {
                unlocked() { return tmp.steel.layerShown },
                name() { return '里程碑' },
                content: [
                    ["blank", "15px"],
                    "milestones",
                ]
            },
        },
    },
})

//世界1层16：银
addLayer("silver", {
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: d(0),             // "points" is the internal name for the main resource of the layer.
            ore: d(0),
            molten: d(0),
            miningLevel: d(3),
            rarity: d(120),
            progress: d(0),
            findingProgress: d(0),
            hardness: d(3330),
            destroying: false,
            finding: false,
            found: false,
            vein: d(0),
            veinCooldown: d(0),
            singularity: d(0),
        }
    },

    color: "#ddf2f5",                       // The color for this layer, which affects many elements.
    nodeStyle: { "background": "linear-gradient(90deg, #65696b 0%, #bbc7ce 20%, #ddf2f5 40%, #9cc1ca 70%, #5ca0a6 100%)" },
    resource: "银锭",            // The name of this layer's main prestige resource.
    row: 1,                                 // The row this layer is on (0 is the first row).
    position: 15,
    symbol: '银',

    baseResource: "points",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.points },  // A function to return the current amount of baseResource.

    requires: d(10),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "normal",                         // Determines the formula used for calculating prestige currency.
    exponent: 0.5,                          // "normal" prestige gain is (currency^exponent).

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        let m = d(1)                            // 矿物的gainMult是给对应矿石的
        if (hasUpgrade(silver, 11)) m = m.times(3)
        if (hasUpgrade(silver, 12)) m = m.times(upgradeEffect(silver, 12))
        if (hasUpgrade(silver, 22)) m = m.times(5)
        if (hasCraftingItem(312)) m = m.times(clickableEffect(ct, 312))
        if (hasUpgrade(silver, 32)) m = m.times(124.1)
        if (hasUpgrade(gold, 15)) m = m.times(upgradeEffect(gold, 15))
        if (hasCraftingItem(341)) m = m.times(1e50)
        if (hasMilestone(sing_fus, 7)) m = m.times(buyableEffect(sing_fus, 24))
        m = m.floor()
        return m
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return d(1)
    },

    layerShown() { return hasNormalAchievement(113) },          // Returns a bool for if this layer's node should be visible in the tree.

    doReset(resettingLayer) {
        return undefined
    },

    upgrades: {
        11: {
            title: "更深处",
            description: "3x银矿石挖掘倍率",
            currencyInternalName: "ore",
            currencyDisplayName: "银矿石",
            currencyLayer: silver,
            cost() { return new ExpantaNum(6) },
            unlocked() { return tmp.silver.layerShown },
        },
        12: {
            title: "来自钢锭的提升",
            description: "钢锭加成银矿石挖掘倍率",
            currencyInternalName: "ore",
            currencyDisplayName: "银矿石",
            currencyLayer: silver,
            cost() { return new ExpantaNum(20) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.steel.points.div(5e9).pow(0.35).max(1)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：(钢锭/5e9)<sup>0.35</sup>`
                return t
            },
        },
        13: {
            title: "银矿加成",
            description: "银矿石加成钢锭浇铸倍率和高炉炼钢倍率",
            currencyInternalName: "ore",
            currencyDisplayName: "银矿石",
            currencyLayer: silver,
            cost() { return new ExpantaNum(35) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.silver.ore.max(1).pow(0.2)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：银矿石<sup>0.2</sup>`
                return t
            },
        },
        14: {
            title: "连锁到银矿石了",
            description: "需求：等级64,000<br>解锁银矿石的连锁挖掘",
            currencyInternalName: "ore",
            currencyDisplayName: "银矿石",
            currencyLayer: silver,
            canAfford() { return player.level.gte(64000) },
            cost() { return new ExpantaNum(108) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        15: {
            title: "常规流程",
            description: "需求：等级66,000<br>解锁新的熔炼配方",
            currencyInternalName: "ore",
            currencyDisplayName: "银矿石",
            currencyLayer: silver,
            canAfford() { return player.level.gte(66000) },
            cost() { return new ExpantaNum(216) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        21: {
            title: "熔融银",
            description: "现在银锭也可以加成钢锭浇铸倍率和高炉炼钢倍率",
            cost() { return new ExpantaNum(25) },
            unlocked() { return hasUpgrade(this.layer, 15) },
            effect() {
                let eff = player.silver.points.max(1).pow(0.3)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：银锭<sup>0.3</sup>`
                return t
            },
        },
        22: {
            title: "银牌板",
            description: "需求：等级70,000<br>5x基础银矿石以及银锭熔炼倍率",
            canAfford() { return player.level.gte(70000) },
            cost() { return new ExpantaNum(60) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        23: {
            title: "银制造",
            description: "需求：等级75,000<br>解锁更多合成图纸",
            canAfford() { return player.level.gte(75000) },
            cost() { return new ExpantaNum(450) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        24: {
            title: "连锁熔炼",
            description: "需求：等级90,000<br>银矿石连锁倍率现在同时加成银锭熔炼倍率",
            canAfford() { return player.level.gte(90000) },
            currencyInternalName: "vein",
            currencyDisplayName: "银矿脉",
            currencyLayer: silver,
            cost() { return new ExpantaNum(49) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = tmp.silver.chainMult
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：银矿石连锁倍率`
                return t
            },
        },
        25: {
            title: "加大银矿脉",
            description: "需求：等级95,000<br>4x银矿脉获取",
            canAfford() { return player.level.gte(95000) },
            cost() { return new ExpantaNum(142857) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        31: {
            title: "集合银矿脉",
            description: "需求：等级100,000<br>银矿脉的发现数量加成银矿脉获取",
            canAfford() { return player.level.gte(100000) },
            currencyInternalName: "vein",
            currencyDisplayName: "银矿脉",
            currencyLayer: silver,
            cost() { return new ExpantaNum(244) },
            unlocked() { return hasUpgrade(this.layer, 25) },
            effect() {
                let v = 0
                for (i = 0; i < 49; i++) {
                    if (getGridData(silver, getEveryGridIDArray(7, 7)[i]) == 1)
                        v++
                }
                v = d(v)
                if (hasUpgrade(silver, 33)) v = v.pow(2)
                return v.max(1)
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：银矿脉的发现数量`
                let silverUpg13 = ""
                if (hasUpgrade(silver, 33)) silverUpg13 = "<sup>2</sup>"
                return t + silverUpg13
            },
        },
        32: {
            title: "银矿，更多，更强",
            description: "124.1x银矿石获取以及银锭熔炼倍率（别问我为什么是这个数）",
            currencyInternalName: "vein",
            currencyDisplayName: "银矿脉",
            currencyLayer: silver,
            cost() { return new ExpantaNum(999) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        33: {
            title: "孤注一掷",
            description: "需求：等级111,111<br>第11银升级的效果变为原来的平方",
            canAfford() { return player.level.gte(111111) },
            currencyInternalName: "ore",
            currencyDisplayName: "银矿石",
            currencyLayer: silver,
            cost() { return new ExpantaNum(3.6e10) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        34: {
            title: "银白色的",
            description: "银矿脉对银矿石连锁倍率的效果变为^2",
            currencyInternalName: "vein",
            currencyDisplayName: "银矿脉",
            currencyLayer: silver,
            cost() { return new ExpantaNum(12300) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        35: {
            title: "更加珍贵的",
            description: "需求：等级125,000<br>现在可以挖掘金矿石",
            currencyInternalName: "ore",
            currencyDisplayName: "银矿石",
            currencyLayer: silver,
            cost() { return new ExpantaNum(1e14) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
    },

    clickables: {
        11: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = "点击寻找"
                return d
            },
            canClick() { return !player.silver.finding && !player.silver.destroying && !player.silver.found && isAtLocation('overworld') },
            onClick() {
                if (!player.silver.finding) player.silver.finding = true
            },
            unlocked() { return tmp.silver.layerShown },
            style() {
                return {
                    'min-height': '50px',
                    'width': '120px',
                    'font-size': '20px'
                }
            },
        },
        12: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = "点击挖掘"
                return d
            },
            canClick() { return !player.silver.destroying && player.silver.found },
            onClick() {
                if (!player.silver.destroying) player.silver.destroying = true
            },
            unlocked() { return tmp.silver.layerShown },
            style() {
                return {
                    'min-height': '50px',
                    'width': '120px',
                    'font-size': '20px'
                }
            },
        },
        21: {
            title() {
                let t = "刷新矿场"
                return t
            },
            display() {
                let d = `发现${fw(tmp.silver.vein_in_mine)}个银矿脉${tmp.silver.vein_in_mine.lte(0) ? "。" : "！"}<br>
                冷却：${ftl(player.silver.veinCooldown)}/${ftl(30)}`
                return d
            },
            canClick() { return tmp.silver.vein_in_mine.round().eq(0) && player.silver.veinCooldown.lte(0) },
            onClick() {
                for (i = 0; i < 49; i++) {
                    player.silver.grid[getEveryGridIDArray(7, 7)[i]] = d(Math.random()).lte(tmp.silver.chainChance) ? 1 : 2,
                        player.silver.veinCooldown = d(30)
                }
            },
            unlocked() { return hasCraftingItem(312) },
            style() {
                return {
                    'min-height': '80px',
                    'width': '180px',
                }
            },
        },
    },

    bars: {
        silverFinding: {
            direction: RIGHT,
            width: 360,
            height: 60,
            display() { return `找矿进度: ${format(player.silver.findingProgress)}/${format(rarity(silver))}` },
            progress() { let p = player.silver.findingProgress.div(rarity(silver)); if (player.silver.found) p = d(1); return p },
            unlocked() { return tmp.silver.layerShown },
            fillStyle() { return { "background-color": `${tmp[this.layer].color}` } },
            baseStyle() { return { "background-color": "rgba(0,0,0,0)" } },
            textStyle() { return { "color": "#5f6465" } },
        },
        silverDestroying: {
            direction: RIGHT,
            width: 360,
            height: 60,
            display() { return `进度: ${format(player.silver.progress)}/${format(hardness(silver))}` },
            progress() { return player.silver.progress.div(hardness(silver)) },
            unlocked() { return tmp.silver.layerShown },
            fillStyle() { return { "background-color": `${tmp[this.layer].color}` } },
            baseStyle() { return { "background-color": "rgba(0,0,0,0)" } },
            textStyle() { return { "color": "#5f6465" } },
        },
    },

    chainChance() {
        let c = d(0.05)
        if (hasCraftingItem(312)) c = c.add(tmp.silver.veinEff.toCC)
        return c
    },

    chainMult() {
        let m = d(1)
        if (hasUpgrade(silver, 14)) m = m.times(20)
        if (hasCraftingItem(312)) m = m.times(tmp.silver.veinEff.toCM)
        m = m.floor()
        return m
    },

    chainExpectation() {
        let e = d(0)
        let m = tmp.silver.gainMult
        let cm = tmp.silver.chainMult
        let c = tmp.silver.chainChance.max(1e-10)
        e = m.times(cm).add(m.times(d(1).div(c).sub(1))).times(c)
        return e
    },

    veinEff: {
        toCM() {
            let v = player.silver.vein
            let eff = d(10).pow(v.max(0).add(1).log10().pow(0.9)).pow(0.6)
            if (hasUpgrade(silver, 34)) eff = eff.pow(2)
            return eff
        },
        toCC() {
            let v = player.silver.vein
            let eff = v.max(0).add(1).logBase(2).times(5).pow(0.66).div(100).min(0.95)
            return eff
        },
    },

    veinMult() {
        let m = d(1)
        if (hasUpgrade(silver, 25)) m = m.times(4)
        if (hasUpgrade(silver, 31)) m = m.times(upgradeEffect(silver, 31))
        if (hasUpgrade(gold, 24)) m = m.times(upgradeEffect(gold, 24))
        if (goldSkillActived(2)) m = m.times(clickableEffect(gold, 22))
        return m
    },

    vein_in_mine() {
        let v = 0
        for (i = 0; i < 49; i++) {
            if (getGridData(silver, getEveryGridIDArray(7, 7)[i]) == 1)
                v++
        }
        return d(v)
    },

    grid: {
        rows: 7, // If these are dynamic make sure to have a max value as well!
        cols: 7,
        getStartData(id) {
            return 0
        },
        getUnlocked(id) { // Default
            return hasCraftingItem(312)
        },
        getCanClick(data, id) {
            return data == 1
        },
        onClick(data, id) {
            player[this.layer].grid[id] = 0,
                player.silver.vein = player.silver.vein.add(tmp.silver.veinMult)
        },
        getTitle(data, id) {
            if (data == 0) return '空'
            if (data == 1) return '矿'
            if (data == 2) return '石'
        },
        getStyle(data, id) {
            if (data == 0) return {
                'background-color': 'rgba(0,0,0,0)',
                'border-color': 'white',
                'color': 'white',
                'height': '50px',
                'width': '50px',
            }
            else if (data == 1) return {
                'border-color': 'white',
                'background': "linear-gradient(45deg, #65696b 0%, #bbc7ce 20%, #ddf2f5 40%, #9cc1ca 70%, #5ca0a6 100%)",
                'height': '50px',
                'width': '50px',
            }
            else return {
                'background-color': '#4a4a4a',
                'border-color': 'white',
                'color': 'white',
                'height': '50px',
                'width': '50px',
            }
        },
    },

    update(diff) {
        if (player.silver.finding) player.silver.findingProgress = player.silver.findingProgress.add(player.copper.speed.times(diff))
        if (player.silver.findingProgress.gte(rarity(silver))) player.silver.findingProgress = d(0),
            player.silver.finding = false,
            player.silver.found = true

        if (player.silver.destroying) player.silver.progress = player.silver.progress.add(player.stone.speed.times(diff))
        if (player.silver.progress.gte(hardness(silver))) player.silver.progress = d(0),
            player.silver.found = false,
            player.silver.destroying = false,
            player.silver.ore = player.silver.ore.add(tmp.silver.gainMult.times(d(Math.random()).lte(tmp.silver.chainChance) && hasUpgrade(silver, 14) ? tmp.silver.chainMult : d(1)))

        if (player.silver.points.gt(player.silver.best)) player.silver.best = player.silver.points

        if (player.silver.veinCooldown.gt(0.06)) player.silver.veinCooldown = player.silver.veinCooldown.sub(diff).max(0)
        else player.silver.veinCooldown = d(0)

        if (goldSkillActived(2)) player.silver.vein = player.silver.vein.add(tmp.silver.veinMult.times(0.01).times(diff))
    },

    tabFormat: [
        ["display-text", function () { return getPointsDisplay() }],
        ["display-text", () => `你有 ${textStyle_h2(formatWhole(player.silver.ore), 'ddf2f5')} 银矿石`],
        "main-display",
        ["display-text", () => `你同时最多拥有 ${formatWhole(player.silver.best)} 银锭`],
        "blank",
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "dig": {
                unlocked() { return tmp.silver.layerShown },
                name() { return '挖掘' },
                content: [
                    ["blank", "15px"],
                    ["row", [["bar", "silverFinding"], "blank", ["clickable", 11],]],
                    "blank",
                    ["row", [["bar", "silverDestroying"], "blank", ["clickable", 12],]],
                    "blank",
                    ["display-text", function () { return player.silver.found ? `你找到了一处银矿石` : `你尚未找到银矿石` }],
                    "blank",
                    ["display-text", function () { return `找矿速度：${format(player.copper.speed)}/秒` }],
                    ["display-text", function () { return `挖掘速度：${format(player.stone.speed)}/秒` }],
                    ["display-text", function () { return `破坏一次的银矿石获取数量：${textStyle_h2(formatWhole(tmp.silver.gainMult), 'ddf2f5')}` }],
                    ["display-text", function () { if (hasUpgrade(silver, 14)) return `连锁挖掘率：${textStyle_h2(formatPercent(tmp.silver.chainChance), 'ddf2f5')}` }],
                    ["display-text", function () { if (hasUpgrade(silver, 14)) return `连锁倍数：${textStyle_h2(f(tmp.silver.chainMult) + "x", 'ddf2f5')}` }],
                    ["display-text", function () {
                        if (hasUpgrade(silver, 14)) {
                            if (!shiftDown)
                                return `连锁成功后的银矿石获取数量：${textStyle_h2(fw(tmp.silver.gainMult.times(tmp.silver.chainMult)), 'ddf2f5')}（按shift查看期望值）`
                            if (shiftDown)
                                return `银矿石获取期望：${textStyle_h2(f(tmp.silver.chainExpectation), 'ddf2f5')}`
                        }
                    }
                    ],
                    ["display-text", function () { return `稀有度：${formatWhole(rarity(silver))}` }],
                    ["display-text", function () { return `硬度：${formatWhole(hardness(silver))}` }],
                    ["display-text", function () { return `挖掘等级：3` }],
                    ["display-text", function () { return `需要在主世界挖掘` }],
                ]
            },
            "upgrades": {
                unlocked() { return tmp.silver.layerShown },
                name() { return '升级' },
                content: [
                    ["blank", "15px"],
                    "upgrades",
                ]
            },
            "mine": {
                unlocked() { return hasCraftingItem(312) },
                name() { return '矿场' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { if (hasCraftingItem(312)) return `你挖掘了 ${textStyle_h2(formatWhole(player.silver.vein), 'ddf2f5')} 个银矿脉 （${textStyle_h2(formatWhole(tmp.silver.veinMult), 'ddf2f5')}/次）` }],
                    ["display-text", function () { return `银矿石连锁率增加 ${textStyle_h2(fp(tmp.silver.veinEff.toCC), 'ddf2f5')}` }],
                    ["display-text", function () { return `银矿石连锁倍率变为 ${textStyle_h2(f(tmp.silver.veinEff.toCM) + "x", 'ddf2f5')}` }],
                    ["display-text", function () {
                        let toCMpow = d(0.6)
                        if (hasUpgrade(silver, 34)) toCMpow = toCMpow.times(2)
                        if (shiftDown) return `银矿脉效果公式：min((5log<sub>2</sub>(x+1))<sup>0.66</sup>/100, 0.95)，10<sup>${f(toCMpow)}lg(x+1)<sup>0.9</sup></sup>`
                    }],
                    "blank",
                    "grid",
                    "blank",
                    ["clickable", 21],
                    "blank",
                    ["display-text", () => `在7x7的区域中寻找对应的矿脉，每次刷新每个格子有一定概率刷新对应矿脉，概率等同于对应矿石连锁率`],
                    ["display-text", () => `点击写着“矿”字的格子挖掘矿脉，每次获得一定数量的矿脉，挖掘后格子清空`],
                    ["display-text", () => `挖掘完所有的矿脉且冷却时间已过30秒可刷新矿脉`],
                ]
            },
        },
    },
})

function updateClock() {
    // 获取当前时间
    const now = new Date();
    const hours = now.getHours();
    const minutes = now.getMinutes();
    const seconds = now.getSeconds();

    // 计算指针旋转角度
    const hourDeg = (hours % 12) * 30 + minutes * 0.5; // 每小时30度，每分钟0.5度
    const minuteDeg = minutes * 6 + seconds * 0.1; // 每分钟6度，每秒0.1度
    const secondDeg = seconds * 6; // 每秒6度

    document.body.style.setProperty('--hourDeg', `rotate(${hourDeg}deg)`)
    document.body.style.setProperty('--minuteDeg', `rotate(${minuteDeg}deg)`)
    document.body.style.setProperty('--secondDeg', `rotate(${secondDeg}deg)`)

    const dayornight = hours >= 6 && hours < 18
    document.body.style.setProperty('--clockBg', dayornight ? '#4968d8' : '#1e1c1c')
}
updateClock()

function resetClockAndBuyables() {
    player.gold.stored_time = d(0)
    let STBs = [11, 12,]
    for (i = 0; i < STBs.length; i++) {
        if (player.gold.buyables[STBs[i]].gt(0)) player.gold.buyables[STBs[i]] = d(0)
    }
}

function goldSkillActived(id) {
    let pg = player.gold
    return pg.skillactivetime[id].gt(0) || pg.skillpermanentactive[id]
}

function activeGoldSkill(id) { //当技能可永久激活时可以随时开关
    let tg = tmp.gold
    if (tg.skillcooldown[id].gt(0.05)) player.gold.skillactivetime[id] = tg.skillactivetime[id],
        player.gold.skillused[id] = true
    else if (tg.skillcooldown[id].lte(0.05)) player.gold.skillpermanentactive[id] = !player.gold.skillpermanentactive[id]
}

function inAnyGoldChallenge() { //绷不住了，提前设置好的function到头来只有1个金挑战
    let inChal = 0
    for (let id in player.gold.challenges) {
        if (inChallenge(gold, id)) inChal += 1
    }
    return inChal >= 1
}

function goldSkillCanActive(id) {
    let pg = player.gold
    let tg = tmp.gold
    return (pg.skillactivetime[id].eq(0) && !pg.skillused[id] && pg.skillcooldown[id].eq(0) || tg.skillcooldown[id].lt(0.05)) && !inAnyGoldChallenge()
}

function stopGoldSkill(id) {
    let tg = tmp.gold
    let pg = player.gold
    if (inAnyGoldChallenge()) {
        if (tg.skillcooldown[id].gt(0.05) && goldSkillActived(id)) player.gold.skillcooldown[id] = tg.skillcooldown[id],
            player.gold.skillactivetime[id] = d(0)
    }
    else if (tg.skillcooldown[id].gt(0.05) && !goldSkillActived(id)) player.gold.skillcooldown[id] = tg.skillcooldown[id],
        player.gold.skillactivetime[id] = d(0)
    else if (tg.skillcooldown[id].lte(0.05) || pg.skillpermanentactive[id]) player.gold.skillpermanentactive[id] = false
}

function stopAllGoldSkill() { //进入挑战时
    for (let id in player.gold.skillactivetime) {
        if (goldSkillActived(id)) stopGoldSkill(id)
    }
}

//世界1层17：金
addLayer("gold", {
    componentStyles: {
        "buyable"() {
            return {
                'margin-left': '-7px',
                'margin-right': '-7px',
            }
        }
    },
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: d(0),             // "points" is the internal name for the main resource of the layer.
            ore: d(0),
            molten: d(0),
            miningLevel: d(3),
            rarity: d(140),
            progress: d(0),
            findingProgress: d(0),
            hardness: d(3600),
            destroying: false,
            finding: false,
            found: false,
            singularity: d(0),
            stored_time: d(0),
            chal1t: d(0),
            skillcooldown: {
                1: d(0), 2: d(0), 3: d(0),
            },
            skillused: {
                1: false, 2: false, 3: false,
            },
            skillactivetime: {
                1: d(0), 2: d(0), 3: d(0),
            },
            skillpermanentactive: {
                1: false, 2: false, 3: false,
            },
        }
    },

    color: "#fdf55f",                       // The color for this layer, which affects many elements.
    nodeStyle: { "background": "linear-gradient(90deg, #b26411 0%, #fdf55f 10%, #fffde0 20%, #fdf55f 30%, #fdf55f 80%, #752802 100%)" },
    resource: "金锭",            // The name of this layer's main prestige resource.
    row: 1,                                 // The row this layer is on (0 is the first row).
    position: 16,
    symbol: '金',

    baseResource: "points",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.points },  // A function to return the current amount of baseResource.

    requires: d(10),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "normal",                         // Determines the formula used for calculating prestige currency.
    exponent: 0.5,                          // "normal" prestige gain is (currency^exponent).

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        let m = d(1)                            // 矿物的gainMult是给对应矿石的
        if (hasUpgrade(gold, 11)) m = m.times(3)
        if (hasUpgrade(gold, 12)) m = m.times(upgradeEffect(gold, 12))
        if (hasCraftingItem(322)) m = m.times(15),
            m = m.times(tmp.gold.timeEff)
        if (hasUpgrade(gold, 32)) m = m.times(1e8)
        if (hasCraftingItem(342)) m = m.times(1e25)
        if (hasMilestone(sing_fus, 8)) m = m.times(buyableEffect(sing_fus, 31))
        m = m.floor()
        return m
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return d(1)
    },

    layerShown() { return hasNormalAchievement(113) },          // Returns a bool for if this layer's node should be visible in the tree.

    doReset(resettingLayer) {
        return undefined
    },

    upgrades: {
        11: {
            title: "来源于超新星的爆发",
            description: "3x金矿石挖掘倍率",
            currencyInternalName: "ore",
            currencyDisplayName: "金矿石",
            currencyLayer: gold,
            cost() { return new ExpantaNum(6) },
            unlocked() { return tmp.gold.layerShown },
        },
        12: {
            title: "银提升金",
            description() {
                let d = `银锭加成金矿石挖掘倍率`
                if (hasUpgrade(gold, 31)) d += '和金锭熔炼倍率（第11金升级效果）'
                if (this.effect().gte('1e500')) d += '(受软上限限制)'
                return d
            },
            currencyInternalName: "ore",
            currencyDisplayName: "金矿石",
            currencyLayer: gold,
            cost() { return new ExpantaNum(24) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.silver.points.div(1e10).pow(0.3).max(1)
                if (eff.gte('1e500')) eff = d(10).pow(eff.log10().pow(0.8)).times('5.3704343164e355')
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：(银锭/1e10)<sup>0.3</sup>`
                if (this.effect().gte('1e500')) t += '<br>软上限：x→10<sup>lg(x)<sup>0.8</sup></sup>·5.3704343164e355'
                return t
            },
        },
        13: {
            title: "连锁金",
            description: "解锁金矿石的连锁挖掘",
            currencyInternalName: "ore",
            currencyDisplayName: "金矿石",
            currencyLayer: gold,
            cost() { return new ExpantaNum(88) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        14: {
            title: "金光闪闪",
            description: "解锁金锭熔炼配方",
            currencyInternalName: "ore",
            currencyDisplayName: "金矿石",
            currencyLayer: gold,
            cost() { return new ExpantaNum(150) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        15: {
            title: "猪灵眼里放光",
            description: "金锭加成银矿石和银锭熔炼倍率",
            cost() { return new ExpantaNum(25) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let sc = d(1e12)
                let eff = player.gold.points.max(1).add(1).pow(2.3).div(sc).max(1).pow(0.2).times(player.gold.points.max(1).add(1).pow(2.3).min(sc))
                return eff
            },
            effectDisplay() {
                let sc = ""
                if (this.effect().gte(1e12)) sc = "（受软上限限制）"
                return `${format(upgradeEffect(this.layer, this.id))}x${sc}`
            },
            tooltip() {
                let t = `公式：(金锭+1)<sup>2.3</sup><br>到1e12x到达软上限：x→(x/1e12)<sup>0.2</sup>·1e12`
                return t
            },
        },
        21: {
            title: "耐久低，但是速度超快",
            description: "需求：等级155,000<br>解锁新的合成图纸",
            currencyInternalName: "ore",
            currencyDisplayName: "金矿石",
            currencyLayer: gold,
            canAfford() { return player.level.gte(155000) },
            cost() { return new ExpantaNum(99) },
            unlocked() { return hasUpgrade(this.layer, 15) },
        },
        22: {
            title: "开始扭曲",
            description: "解锁一个购买项",
            currencyInternalName: "stored_time",
            currencyDisplayName: "时钟储存的时间",
            currencyLayer: gold,
            costTime: true,
            cost() { return new ExpantaNum(50) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        23: {
            title: "额外扭曲",
            description: "3x时钟时间扭曲",
            cost() { return new ExpantaNum(30000) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        24: {
            title: "矿脉提升",
            description: "需求：等级247,000<br>时钟储存的时间加成银矿脉获取，但是效果更弱",
            canAfford() { return player.level.gte(247000) },
            cost() { return new ExpantaNum(150000) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = tmp.gold.timeEff.pow(0.7)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：时钟储存的时间效果<sup>0.4</sup>`
                return t
            },
        },
        25: {
            title: "洗劫猪堡",
            description: "需求：等级260,000<br>解锁下一个购买项",
            canAfford() { return player.level.gte(260000) },
            cost() { return new ExpantaNum(150000) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        31: {
            title: "更多，还要更多！",
            description: "第2金升级现在也可以加成金锭熔炼倍率",
            currencyInternalName: "stored_time",
            currencyDisplayName: "时钟储存的时间",
            currencyLayer: gold,
            costTime: true,
            cost() { return new ExpantaNum(432000) },
            unlocked() { return hasUpgrade(this.layer, 25) },
        },
        32: {
            title: "金矿石大陆",
            description() { return `${f(1e8)}x金矿石获取，${f(1e6)}x金锭熔炼倍率` },
            canAfford() { return player.gold.points.gte(1.44e12) },
            onPurchase() { player.gold.points = player.gold.points.sub(1.44e12) },
            currencyInternalName: "points",
            currencyDisplayName() { return `银锭 + ${f(1.44e12)} 金锭` },
            currencyLayer: silver,
            cost() { return new ExpantaNum(3e27) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        33: {
            title: "沉积暴击",
            description: "解锁时钟储存的时间加成金矿石连锁倍率和连锁率的效果",
            currencyInternalName: "stored_time",
            currencyDisplayName: "时钟储存的时间",
            currencyLayer: gold,
            cost() { return new ExpantaNum(1.5778476e20) }, //5 teraannums
            costTime: true,
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        34: {
            title: "连锁熔炼组",
            description: "金矿石连锁倍率加成金锭熔炼倍率",
            currencyInternalName: "ore",
            currencyDisplayName: "金矿石",
            currencyLayer: gold,
            cost() { return new ExpantaNum(1e30) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = tmp.gold.chainMult.pow(0.8)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：金矿石连锁倍率<sup>0.8</sup>`
                return t
            },
        },
        35: {
            title: "扭曲助力",
            description: "黄金时间扭曲的基数+0.5",
            currencyInternalName: "stored_time",
            currencyDisplayName: "时钟储存的时间",
            currencyLayer: gold,
            cost() { return new ExpantaNum(1.5778476e26) }, //5 exaannums
            costTime: true,
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        41: {
            title: "金银合力",
            description: "解锁琥珀金层级，以及其合金配方",
            canAfford() { return player.gold.points.gte(1e35) },
            onPurchase() { player.gold.points = player.gold.points.sub(1e35) },
            currencyInternalName: "points",
            currencyDisplayName() { return `银锭 + ${f(1e35)} 金锭` },
            currencyLayer: silver,
            cost() { return new ExpantaNum(1e42) },
            unlocked() { return hasUpgrade(this.layer, 35) },
        },
        42: {
            title: "等级黄金",
            description: "等级加成时钟储存的时间对金矿石挖掘倍率和金锭熔炼倍率的效果",
            cost() { return new ExpantaNum(1e40) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.level.max(10).log10().sub(4).max(1)
                return eff
            },
            effectDisplay() {
                return `^${format(upgradeEffect(this.layer, this.id))}`
            },
            tooltip() {
                let t = `公式：max(lg(等级)-4, 1)`
                return t
            },
        },
        43: {
            title: "宇宙，寂灭",
            description: "解锁2个新购买项，可以提升技能：扭曲黑洞的力量，降低其冷却",
            currencyInternalName: "stored_time",
            currencyDisplayName: "时钟储存的时间",
            currencyLayer: gold,
            cost() { return new ExpantaNum(3.1556952e167) }, //1e60 black hole eras
            costTime: true,
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        44: {
            title: "琥珀金加倍器",
            description: "12x琥珀金锭合金倍率",
            currencyInternalName: "stored_time",
            currencyDisplayName: "时钟储存的时间",
            currencyLayer: gold,
            cost() { return new ExpantaNum(3.1556952e203) }, //1e96 black hole eras
            costTime: true,
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        45: {
            title: "更高效的储存",
            description: "时钟储存的时间对金矿石获取和熔炼倍率的效果变为^1.1，对连锁倍率效果^1.9",
            currencyInternalName: "stored_time",
            currencyDisplayName: "时钟储存的时间",
            currencyLayer: gold,
            cost() { return new ExpantaNum(3.1556952e209) }, //1e102 black hole eras
            costTime: true,
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
    },

    buyables: {
        11: {
            title() {
                let t = "基础时间扭曲"
                if (getBuyableAmount(gold, 11).gte(5000)) t = "稀有的" + t
                return t
            },
            cost(x) {
                let c = d(1.75).pow(x.max(0).pow(1.05)).times(10)
                if (x.gte(5000)) c = d(3.5).pow(x.sub(4999).pow(1.25)).times('8.9383653085428e1860')
                return c
            },
            free() {
                let f = d(0)
                return f
            },
            display() {
                let freedis = ""
                if (this.free().gte(1)) freedis = ` + ${formatWhole(this.free())}`
                let display = `提升时间扭曲倍率<br>
                效果公式：${format(this.effRankBase())}<sup>⌊(x/10)⌋</sup>${format(this.effBase())}x+1<br>
                等级：${formatWhole(player[this.layer].buyables[this.id])}${freedis}<br>
                当前效果：${format(this.effect())}x<br>
                价格：${ftl(this.cost())} 时钟储存的时间`
                return display
            },
            canAfford() { return player[this.layer].stored_time.gte(this.cost()) },
            buyMax() {
                if (this.canAfford()) {
                    if (player.gold.stored_time.lt('2e1861')) setBuyableAmount(gold, 11, player.gold.stored_time.div(10).max(1).logBase(1.75).root(1.05).floor().add(1))
                    else setBuyableAmount(gold, 11, player.gold.stored_time.div('8.9383653085428e1860').max(1).logBase(3.5).root(1.25).floor().add(5000))
                }
            },
            enableHoldBuy_diff() {
                return inChallenge(gold, 11)
            },
            holdBuy_diff() {
                if (this.canAfford()) setBuyableAmount(gold, 11, getBuyableAmount(gold, 11).add(options.updatingRate / 20).min(player.gold.stored_time.div('8.9383653085428e1860').max(1).logBase(3.5).root(1.25).floor().add(5000)))
            },
            holdBuy_stop() {
                if (this.canAfford()) setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).floor())
            },
            canBuyMax() { return hasMilestone(electrum, 0) },
            buy() {
                if (!this.canBuyMax()) player[this.layer].stored_time = player[this.layer].stored_time.sub(this.cost()).max(0),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (this.canBuyMax()) this.buyMax()
            },
            effBase() {
                let b = d(1)
                if (hasUpgrade(gold, 25)) b = b.times(buyableEffect(gold, 12))
                return b
            },
            effRankBase() {
                let b = d(10)
                if (hasChallenge(this.layer, 11)) b = b.times(challengeEffect(this.layer, 11))
                if (hasUpgrade(electrum, 22)) b = b.times(upgradeEffect(electrum, 22))
                return b
            },
            effect(x) {
                let effect = this.effBase().times(x).times(this.effRankBase().pow((x.div(10).floor()))).add(1)
                return effect
            },
            unlocked() { return hasUpgrade(gold, 22) },
            canAuto() { return hasCraftingItem(361) },
            auto() {
                if (this.canAuto())
                    this.buyMax()
            },
            style() { if (this.canAfford()) return { "background": "linear-gradient(45deg, #b26411 0%, #fdf55f 10%, #fffde0 20%, #fdf55f 30%, #fdf55f 80%, #752802 100%)" } },
        },
        12: {
            title() {
                let t = "黄金时间扭曲"
                if (getBuyableAmount(gold, 12).gte(120)) t = "稀有的" + t
                return t
            },
            cost(x) {
                let c = d(3).pow(x.max(0).pow(1.2)).times(50000) //7e153分界自动购买
                if (x.gte(120)) c = d(1000).pow(x.sub(120).max(0).pow(1.25)).times(7.1923300262e153)
                return c
            },
            free() {
                let f = d(0)
                return f
            },
            display() {
                let freedis = ""
                if (this.free().gte(1)) freedis = ` + ${formatWhole(this.free())}`
                let display = `提升“基础时间扭曲”的基础倍率<br>
                效果公式：${f(this.effBase())}<sup>x</sup><br>
                等级：${formatWhole(player[this.layer].buyables[this.id])}${freedis}<br>
                当前效果：${format(this.effect())}x<br>
                价格：${fw(this.cost())} 金锭`
                return display
            },
            canAfford() { return player[this.layer].points.gte(this.cost()) },
            buyMax() {
                if (this.canAfford()) {
                    if (player.gold.points.lt(7.1923300262e153)) return setBuyableAmount(gold, 12, player.gold.points.div(500000).max(1).logBase(3).root(1.2).floor().add(1))
                    else return setBuyableAmount(gold, 12, player.gold.points.div(7.1923300262e153).max(1).logBase(1000).root(1.25).floor().add(121))
                }
            },
            enableHoldBuy_diff() {
                return inChallenge(gold, 11)
            },
            holdBuy_diff() {
                if (this.canAfford()) setBuyableAmount(gold, 12, getBuyableAmount(gold, 12).add(options.updatingRate / 20).min(player.gold.points.div(500000).max(1).logBase(3).root(1.2).floor().add(1)))
            },
            holdBuy_stop() {
                if (this.canAfford()) setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).floor())
            },
            canBuyMax() { return hasMilestone(electrum, 1) },
            buy() {
                if (!this.canBuyMax()) player[this.layer].points = player[this.layer].points.sub(this.cost()).max(0),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (this.canBuyMax()) this.buyMax()
            },
            effBase() {
                let b = d(3)
                if (hasUpgrade(gold, 35)) b = b.add(0.5)
                if (hasUpgrade(red_ele, 14)) b = b.add(1.5)
                if (hasUpgrade(red_ele, 25)) b = b.add(20)
                return b
            },
            effect(x) {
                let effect = this.effBase().pow(x).max(1)
                return effect
            },
            unlocked() { return hasUpgrade(gold, 25) },
            canAuto() { return hasCraftingItem(361) },
            auto() {
                if (this.canAuto())
                    this.buyMax()
            },
            style() { if (this.canAfford()) return { "background": "linear-gradient(45deg, #b26411 0%, #fdf55f 10%, #fffde0 20%, #fdf55f 30%, #fdf55f 80%, #752802 100%)" } },
        },
        21: {
            title: "扭曲黑洞：力量",
            cost(x) { return d(100000).pow(x.max(0).pow(2)).times(3.1556952e167) },
            free() {
                let f = d(0)
                if (hasUpgrade(diamond, 35)) f = f.add(getBuyableAmount(gold, 22).sub(75))
                return f
            },
            display() {
                let freedis = ""
                if (this.free().gte(1)) freedis = ` + ${formatWhole(this.free())}`
                let display = `提升技能：扭曲黑洞的力量<br>
                效果公式：${format(this.effBase())}<sup>x</sup><br>
                等级：${formatWhole(player[this.layer].buyables[this.id])}${freedis}<br>
                当前效果：${format(this.effect())}x<br>
                价格：${ftl(this.cost())} 时钟储存的时间`
                return display
            },
            canAfford() { return player[this.layer].stored_time.gte(this.cost()) },
            buyMax() {
                if (this.canAfford())
                    return setBuyableAmount(gold, 21, player.gold.stored_time.div(3.1556952e167).max(1).logBase(100000).root(2).floor().add(1))
            },
            enableHoldBuy_diff() {
                return inChallenge(gold, 11)
            },
            holdBuy_diff() {
                if (this.canAfford()) setBuyableAmount(gold, 21, getBuyableAmount(gold, 21).add(options.updatingRate / 20).min(player.gold.stored_time.div(3.1556952e167).max(1).logBase(100000).root(2).floor().add(1)))
            },
            holdBuy_stop() {
                if (this.canAfford()) setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).floor())
            },
            canBuyMax() { return false },
            buy() {
                if (!this.canBuyMax()) player[this.layer].stored_time = player[this.layer].stored_time.sub(this.cost()).max(0),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (this.canBuyMax()) this.buyMax()
            },
            effBase() {
                let b = d(100000)
                if (hasUpgrade(electrum, 21)) b = b.times(1000)
                return b
            },
            effect(x) {
                let effect = this.effBase().pow(x.add(this.free()).max(0))
                return effect
            },
            unlocked() { return hasUpgrade(gold, 43) },
            canAuto() { return hasCraftingItem(361) },
            auto() {
                if (this.canAuto())
                    this.buyMax()
            },
            style() { if (this.canAfford()) return { "background": "linear-gradient(45deg, #b26411 0%, #fdf55f 10%, #fffde0 20%, #fdf55f 30%, #fdf55f 80%, #752802 100%)" } },
        },
        22: {
            title: "扭曲黑洞：间隔",
            cost(x) { return d(1000).pow(x.max(0).pow(1.33)).times(3.1556952e167) },
            free() {
                let f = d(0)
                return f
            },
            purchaseLimit() {
                let l = d(75)
                if (hasUpgrade(diamond, 35)) l = d(Infinity)
                return l
            },
            display() {
                let freedis = ""
                if (this.free().gte(1)) freedis = ` + ${formatWhole(this.free())}`
                let display = `降低技能：扭曲黑洞的冷却时间<br>
                效果公式：${format(this.effBase())}<sup>x</sup><br>
                等级：${formatWhole(player[this.layer].buyables[this.id])}${freedis}${!hasUpgrade(diamond, 35) ? "/" + fw(this.purchaseLimit()) : ""}<br>
                当前效果：/${format(this.effect())}<br>
                价格：${ftl(this.cost())} 时钟储存的时间`
                return display
            },
            canAfford() { return player[this.layer].stored_time.gte(this.cost()) },
            buyMax() {
                if (this.canAfford())
                    return setBuyableAmount(gold, 22, player.gold.stored_time.div(3.1556952e167).max(1).logBase(1000).root(1.33).floor().add(1).min(this.purchaseLimit()))
            },
            enableHoldBuy_diff() {
                return inChallenge(gold, 11)
            },
            holdBuy_diff() {
                if (this.canAfford()) setBuyableAmount(gold, 22, getBuyableAmount(gold, 22).add(options.updatingRate / 20).min(player.gold.stored_time.div(3.1556952e167).max(1).logBase(1000).root(1.33).floor().add(1).min(this.purchaseLimit())))
            },
            holdBuy_stop() {
                if (this.canAfford()) setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).floor())
            },
            canBuyMax() { return false },
            buy() {
                if (!this.canBuyMax()) player[this.layer].stored_time = player[this.layer].stored_time.sub(this.cost()).max(0),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (this.canBuyMax()) this.buyMax()
            },
            effBase() {
                let b = d(1.1)
                return b
            },
            effect(x) {
                let effect = this.effBase().pow(x.max(0)).min(1200)
                return effect
            },
            unlocked() { return hasUpgrade(gold, 43) },
            canAuto() { return hasCraftingItem(361) },
            auto() {
                if (this.canAuto())
                    this.buyMax()
            },
            style() { if (this.canAfford()) return { "background": "linear-gradient(45deg, #b26411 0%, #fdf55f 10%, #fffde0 20%, #fdf55f 30%, #fdf55f 80%, #752802 100%)" } },
        },
    },

    clickables: {
        11: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = "点击寻找"
                return d
            },
            canClick() { return !player.gold.finding && !player.gold.destroying && !player.gold.found && hasUpgrade(silver, 35) && isAtLocation('overworld') },
            onClick() {
                if (!player.gold.finding) player.gold.finding = true
            },
            unlocked() { return tmp.gold.layerShown },
            style() {
                return {
                    'min-height': '50px',
                    'width': '120px',
                    'font-size': '20px'
                }
            },
        },
        12: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = "点击挖掘"
                return d
            },
            canClick() { return !player.gold.destroying && player.gold.found && hasUpgrade(silver, 35) },
            onClick() {
                if (!player.gold.destroying) player.gold.destroying = true
            },
            unlocked() { return tmp.gold.layerShown },
            style() {
                return {
                    'min-height': '50px',
                    'width': '120px',
                    'font-size': '20px'
                }
            },
        },
        21: {
            title() {
                let t = "技能：扭曲黑洞"
                return t
            },
            display() {
                let sit = ''
                let dur = ''
                let cool = ''
                let perm = ''
                if (goldSkillCanActive(this.id - 20) && tmp.gold.skillcooldown[this.id - 20].gt(0.05)) sit = '技能现在可用'
                else if (goldSkillActived(this.id - 20)) {
                    if (player.gold.skillpermanentactive[this.id - 20]) sit = `技能生效中`
                    else sit = `技能生效中(${ftl(player.gold.skillactivetime[this.id - 20])})`
                }
                else if (tmp.gold.skillcooldown[this.id - 20].lte(0.05)) sit = '技能未生效'
                else if (player.gold.skillcooldown[this.id - 20].gte(0.05)) sit = `技能冷却中(${ftl(player.gold.skillcooldown[this.id - 20])})`
                else sit = '无法在金层级挑战中激活'
                sit += '<br>'
                if (tmp.gold.skillcooldown[this.id - 20].gt(0.05)) dur = `持续时间：${ftl(tmp.gold.skillactivetime[this.id - 20])}<br>`,
                    cool = `冷却时间：${ftl(tmp.gold.skillcooldown[this.id - 20])}`
                else perm = '技能可永久激活'
                let d = `技能激活期间，时钟时间扭曲变为${f(this.effect())}x<br>` + sit + dur + cool + perm
                return d
            },
            canClick() { return goldSkillCanActive(this.id - 20) },
            onClick() { return activeGoldSkill(this.id - 20) },
            effect() {
                let eff = d(1e10)
                if (hasUpgrade(gold, 43)) eff = eff.times(buyableEffect(gold, 21))
                return eff
            },
            unlocked() { return challengeCompletions(gold, 11) >= 2 },
            style() {
                let s = {
                    "min-height": "150px",
                    "width": "150px",
                }
                if (this.canClick() || goldSkillActived(this.id - 20)) s.background = "linear-gradient(45deg, #b26411 0%, #fdf55f 10%, #fffde0 20%, #fdf55f 30%, #fdf55f 80%, #752802 100%)"
                return s
            },
        },
        22: {
            title() {
                let t = "技能：银矿脉农场"
                return t
            },
            display() {
                let sit = ''
                let dur = ''
                let cool = ''
                let perm = ''
                if (goldSkillCanActive(this.id - 20) && tmp.gold.skillcooldown[this.id - 20].gt(0.05)) sit = '技能现在可用'
                else if (goldSkillActived(this.id - 20)) {
                    if (player.gold.skillpermanentactive[this.id - 20]) sit = `技能生效中`
                    else sit = `技能生效中(${ftl(player.gold.skillactivetime[this.id - 20])})`
                }
                else if (tmp.gold.skillcooldown[this.id - 20].lte(0.05)) sit = '技能未生效'
                else if (player.gold.skillcooldown[this.id - 20].gte(0.05)) sit = `技能冷却中(${ftl(player.gold.skillcooldown[this.id - 20])})`
                else sit = '无法在金层级挑战中激活'
                sit += '<br>'
                if (tmp.gold.skillcooldown[this.id - 20].gte(0.05)) dur = `持续时间：${ftl(tmp.gold.skillactivetime[this.id - 20])}<br>`,
                    cool = `冷却时间：${ftl(tmp.gold.skillcooldown[this.id - 20])}`
                else perm = '技能可永久激活'
                let d = `技能激活期间，银矿脉的获取变为${f(this.effect())}x，同时每秒被动获取1%的银矿脉<br>` + sit + dur + cool + perm
                return d
            },
            canClick() { return goldSkillCanActive(this.id - 20) },
            onClick() { return activeGoldSkill(this.id - 20) },
            effect() {
                let eff = d(1e25)
                if (hasCraftingItem(342)) eff = eff.times(1e25)
                return eff
            },
            unlocked() { return hasCraftingItem(341) },
            style() {
                let s = {
                    "min-height": "150px",
                    "width": "150px",
                }
                if (this.canClick() || goldSkillActived(this.id - 20)) s.background = "linear-gradient(45deg, #65696b 0%, #bbc7ce 20%, #ddf2f5 40%, #9cc1ca 70%, #5ca0a6 100%)"
                return s
            },
        },
        23: {
            title() {
                let t = "技能：琥珀金合金单元"
                return t
            },
            display() {
                let sit = ''
                let dur = ''
                let cool = ''
                let perm = ''
                if (goldSkillCanActive(this.id - 20) && tmp.gold.skillcooldown[this.id - 20].gt(0.05)) sit = '技能现在可用'
                else if (goldSkillActived(this.id - 20)) {
                    if (player.gold.skillpermanentactive[this.id - 20]) sit = `技能生效中`
                    else sit = `技能生效中(${ftl(player.gold.skillactivetime[this.id - 20])})`
                }
                else if (tmp.gold.skillcooldown[this.id - 20].lte(0.05)) sit = '技能未生效'
                else if (player.gold.skillcooldown[this.id - 20].gte(0.05)) sit = `技能冷却中(${ftl(player.gold.skillcooldown[this.id - 20])})`
                else sit = '无法在金层级挑战中激活'
                sit += '<br>'
                if (tmp.gold.skillcooldown[this.id - 20].gte(0.05)) dur = `持续时间：${ftl(tmp.gold.skillactivetime[this.id - 20])}<br>`,
                    cool = `冷却时间：${ftl(tmp.gold.skillcooldown[this.id - 20])}`
                else perm = '技能可永久激活'
                let d = `技能激活期间，琥珀金合金倍率变为${f(this.effect())}x<br>` + sit + dur + cool + perm
                return d
            },
            canClick() { return goldSkillCanActive(this.id - 20) },
            onClick() { return activeGoldSkill(this.id - 20) },
            effect() {
                let eff = d(75)
                if (hasUpgrade(electrum, 25)) eff = eff.times(upgradeEffect(electrum, 14))
                return eff
            },
            unlocked() { return hasUpgrade(electrum, 24) },
            style() {
                let s = {
                    "min-height": "150px",
                    "width": "150px",
                }
                if (this.canClick() || goldSkillActived(this.id - 20)) s.background = "linear-gradient(45deg, #c6ae49 0%, #f8ef85 20%, #ffff98 50%, #fffcbc 70%, #eee155 90%, #6c5e23 100%)"
                return s
            },
        },
    },

    challenges: {
        11: {
            name: "反向扭曲",
            challengeDescription() {
                return `时钟时间扭曲倍率随着时间降低，但不会小于1x。进入挑战会重置时钟储存的时间和前两个购买项。更新频率越低，按住的购买频率越低，但是会增加每一刻的批量购买<br>`
            },
            goal() {
                let comps = d(player.gold.challenges[11])
                return ExpantaNum.pow(1e72, comps).times(3.1556952e20)
            },
            goalDescription() {
                return `${ftl(challengeGoal(gold, 11))} 时钟储存的时间<br>目标公式: 1e72<sup>x</sup>·3.1556952e20
            <br>完成次数: ${formatWhole(challengeCompletions(gold, 11))}/${formatWhole(this.completionLimit())}`
            },
            completionLimit() {
                let l = d(5)
                return l
            },
            canComplete: function () {
                return player.gold.stored_time.gte(challengeGoal(gold, 11))
            },
            rewardDescription() {
                return `每完成一次都能使基础扭曲强化的每升10级倍数加成变为${f(this.rewardBase())}x，第2次完成解锁一个主动技能`
            },
            rewardBase() {
                let base = d(2)
                return base
            },
            rewardEffect() {
                let comps = d(player.gold.challenges[11])
                let eff = this.rewardBase().pow(comps).max(1)
                return eff
            },
            rewardDisplay() {
                return `${format(challengeEffect(this.layer, 11))}x`
            },
            onEnter() {
                resetClockAndBuyables(),
                    player.gold.chal1t = d(0),
                    stopAllGoldSkill()
            },
            onExit() {
                player.gold.chal1t = d(0)
            },
            durating() {
                if (inChallenge(this.layer, this.id)) player.gold.chal1t = player.gold.chal1t.add(diffout)
            },
            nerf() {
                if (inChallenge(this.layer, this.id)) return d(1.25).pow(player.gold.chal1t.max(1).pow(1.65))
                else return d(1)
            },
            unlocked() { return hasUpgrade(electrum, 11) },
            style() {
                return {
                    'border-radius': '10px',
                    'height': '360px'
                }
            },
        },
    },

    bars: {
        goldFinding: {
            direction: RIGHT,
            width: 360,
            height: 60,
            display() { return `找矿进度: ${format(player.gold.findingProgress)}/${format(rarity(gold))}` },
            progress() { let p = player.gold.findingProgress.div(rarity(gold)); if (player.gold.found) p = d(1); return p },
            unlocked() { return tmp.gold.layerShown },
            fillStyle() { return { "background-color": `${tmp[this.layer].color}` } },
            baseStyle() { return { "background-color": "rgba(0,0,0,0)" } },
            textStyle() { return { "color": "#b26411" } },
        },
        goldDestroying: {
            direction: RIGHT,
            width: 360,
            height: 60,
            display() { return `进度: ${format(player.gold.progress)}/${format(hardness(gold))}` },
            progress() { return player.gold.progress.div(hardness(gold)) },
            unlocked() { return tmp.gold.layerShown },
            fillStyle() { return { "background-color": `${tmp[this.layer].color}` } },
            baseStyle() { return { "background-color": "rgba(0,0,0,0)" } },
            textStyle() { return { "color": "#b26411" } },
        },
    },

    chainChance() {
        let c = d(0.05)
        if (hasUpgrade(gold, 33)) c = c.add(tmp.gold.goldUpg13eff.toCC)
        return c
    },

    chainMult() {
        let m = d(1)
        if (hasUpgrade(gold, 13)) m = d(10)
        if (hasUpgrade(gold, 33)) m = m.times(tmp.gold.goldUpg13eff.toCM)
        //if (hasUpgrade(gold, 35)) m = m.times(tmp.gold.timeEff)
        m = m.floor()
        return m
    },

    goldUpg13eff: {
        toCM() {
            let t = player.gold.stored_time
            let eff = d(10).pow(t.add(1).log10().pow(0.85).div(3)).max(1)
            if (hasUpgrade(gold, 45)) eff = eff.pow(1.9)
            return eff
        },
        toCC() {
            let t = player.gold.stored_time
            let eff = t.max(10).log10().div(300).min(0.95)
            return eff
        },
    },

    chainExpectation() {
        let e = d(0)
        let m = tmp.gold.gainMult
        let cm = tmp.gold.chainMult
        let c = tmp.gold.chainChance.max(1e-10)
        e = m.times(cm).add(m.times(d(1).div(c).sub(1))).times(c)
        return e
    },

    timewarp() {
        let m = d(1)
        if (hasUpgrade(gold, 22)) m = m.times(buyableEffect(gold, 11))
        if (hasUpgrade(gold, 23)) m = m.times(3)
        if (goldSkillActived(1)) m = m.times(clickableEffect(gold, 21))
        if (inChallenge(gold, 11)) m = m.div(tmp.gold.challenges[11].nerf)
        //if (player.gold.stored_time.gte(tmp.gold.softcapStart)) m = m.div(tmp.gold.timeSoftcap)
        m = m.max(1)
        return m
    },

    timeEff() {
        let t = player.gold.stored_time
        let eff = d(10).pow(t.add(1).log10().pow(0.9).div(2)).max(1)
        if (hasUpgrade(gold, 42)) eff = eff.pow(upgradeEffect(gold, 42))
        if (hasUpgrade(gold, 45)) eff = eff.pow(1.1)
        return eff
    },

    softcapStart() {
        let start = d(3.1556952e16)
        return start
    },
    /*
    timeSoftcap() {
        let start = tmp.gold.softcapStart
        let time = player.gold.stored_time.max(start)
        let nerf = time.div(start).pow(1.25)
        if (nerf.gte(1e25)) nerf = nerf.div(1e25).pow(2).times(1e25)
        return nerf
    },
    */
    growthLimit() {
        let l = d(9)
        return l
    },

    skillcooldown: {
        1() {
            let c = d(60)
            if (hasUpgrade(gold, 43)) c = c.div(buyableEffect(gold, 22))
            return c
        },
        2() {
            let c = d(180)
            if (hasCraftingItem(342)) c = c.div(2)
            if (hasMilestone(redstone, 0)) c = c.div(10)
            if (hasMilestone(redstone, 2)) c = c.div(180.001)
            return c
        },
        3() {
            let c = d(90)
            if (hasMilestone(redstone, 0)) c = c.div(10)
            if (hasMilestone(redstone, 2)) c = c.div(180.001)
            return c
        },
    },

    skillactivetime: {
        1() {
            let t = d(10)
            return t
        },
        2() {
            let t = d(300)
            return t
        },
        3() {
            let t = d(180)
            return t
        },
    },

    update(diff) {
        if (player.gold.finding) player.gold.findingProgress = player.gold.findingProgress.add(player.copper.speed.times(diff))
        if (player.gold.findingProgress.gte(rarity(gold))) player.gold.findingProgress = d(0),
            player.gold.finding = false,
            player.gold.found = true

        if (player.gold.destroying) player.gold.progress = player.gold.progress.add(player.stone.speed.times(diff))
        if (player.gold.progress.gte(hardness(gold))) player.gold.progress = d(0),
            player.gold.found = false,
            player.gold.destroying = false,
            player.gold.ore = player.gold.ore.add(tmp.gold.gainMult.times(d(Math.random()).lte(tmp.gold.chainChance) && hasUpgrade(gold, 13) ? tmp.gold.chainMult : d(1)))

        if (player.gold.points.gt(player.gold.best)) player.gold.best = player.gold.points

        //时钟
        updateClock()

        if (hasCraftingItem(332)) player.gold.stored_time = player.gold.stored_time.add(tmp.gold.timewarp.times(diff))//.min(player.gold.stored_time.times(tmp.gold.growthLimit).add(1)))

        let pg = player.gold
        let tg = tmp.gold
        //主动技能
        for (let id in player.gold.skillactivetime) {
            if (goldSkillActived(id) && tg.skillcooldown[id].gte(0.05)) player.gold.skillactivetime[id] = player.gold.skillactivetime[id].sub(diff).max(0)
            if (tg.skillcooldown[id].gte(0.05) && pg.skillused[id] && pg.skillactivetime[id].eq(0) && pg.skillcooldown[id].eq(0)) stopGoldSkill(id)
            if (pg.skillcooldown[id].gt(0) && tg.skillcooldown[id].gte(0.05)) player.gold.skillcooldown[id] = player.gold.skillcooldown[id].sub(diff).max(0)
            if (pg.skillcooldown[id].lte(0.05) && pg.skillused[id] && tg.skillcooldown[id].gte(0.05) && !goldSkillActived(id)) player.gold.skillused[id] = !pg.skillused[id]
            if (tg.skillcooldown[id].lt(0.05)) player.gold.skillused[id] = false,
                player.gold.skillcooldown[id] = d(0),
                player.gold.skillactivetime[id] = d(0)
            if (pg.skillcooldown[id].gte(tg.skillcooldown[id])) player.gold.skillcooldown[id] = tg.skillcooldown[id] //技能刚开始冷却就降低冷却的情况
        }
    },

    tabFormat: [
        ["display-text", function () { return getPointsDisplay() }],
        ["display-text", () => `你有 ${textStyle_h2(formatWhole(player.gold.ore), 'fdf55f')} 金矿石`],
        "main-display",
        ["display-text", () => `你同时最多拥有 ${formatWhole(player.gold.best)} 金锭`],
        "blank",
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "dig": {
                unlocked() { return tmp.gold.layerShown },
                name() { return '挖掘' },
                content: [
                    ["blank", "15px"],
                    ["row", [["bar", "goldFinding"], "blank", ["clickable", 11],]],
                    "blank",
                    ["row", [["bar", "goldDestroying"], "blank", ["clickable", 12],]],
                    "blank",
                    ["display-text", function () { return player.gold.found ? `你找到了一处金矿石` : `你尚未找到金矿石` }],
                    "blank",
                    ["display-text", function () { return `找矿速度：${format(player.copper.speed)}/秒` }],
                    ["display-text", function () { return `挖掘速度：${format(player.stone.speed)}/秒` }],
                    ["display-text", function () { return `破坏一次的金矿石获取数量：${textStyle_h2(formatWhole(tmp.gold.gainMult), 'fdf55f')}` }],
                    ["display-text", function () { if (hasUpgrade(gold, 13)) return `连锁挖掘率：${textStyle_h2(formatPercent(tmp.gold.chainChance), 'fdf55f')}` }],
                    ["display-text", function () { if (hasUpgrade(gold, 13)) return `连锁倍数：${textStyle_h2(f(tmp.gold.chainMult) + "x", 'fdf55f')}` }],
                    ["display-text", function () {
                        if (hasUpgrade(gold, 13)) {
                            if (!shiftDown)
                                return `连锁成功后的金矿石获取数量：${textStyle_h2(fw(tmp.gold.gainMult.times(tmp.gold.chainMult)), 'fdf55f')}（按shift查看期望值）`
                            if (shiftDown)
                                return `金矿石获取期望：${textStyle_h2(f(tmp.gold.chainExpectation), 'fdf55f')}`
                        }
                    }
                    ],
                    ["display-text", function () { return `稀有度：${formatWhole(rarity(gold))}` }],
                    ["display-text", function () { return `硬度：${formatWhole(hardness(gold))}` }],
                    ["display-text", function () { return `挖掘等级：3` }],
                    ["display-text", function () { return `获得第15银升级后可寻找并挖掘金矿石` }],
                    ["display-text", function () { return `需要在主世界挖掘` }],
                ]
            },
            "upgrades": {
                unlocked() { return tmp.gold.layerShown },
                name() { return '升级' },
                content: [
                    ["blank", "15px"],
                    "upgrades",
                ]
            },
            "the_clock": {
                unlocked() { return hasCraftingItem(332) },
                name() { return '时钟' },
                content: [
                    ["blank", "15px"],
                    ["row",
                        [
                            ["raw-html", function () {
                                return `<div class="clock">
                        <div class="clockBg"></div>
                        <div class="hour-hand"></div>
                        <div class="minute-hand"></div>
                        <div class="second-hand"></div>
                        </div>` }
                            ],
                            ["blank", ["40px", "40px"]],
                            ["clickables", [2], function () {
                                let s = {}
                                if (tmp.gold.clickables[21].unlocked) s = {
                                    'background-color': '#35341c',
                                    height: '230px',
                                    width: '518px',
                                    border: '2px solid',
                                    'border-color': 'white',
                                }
                                return s
                            },
                            ]
                        ],
                    ],
                    "blank",
                    ["display-text", function () { return `你的时钟已经储存了 ${textStyle_h2(ftl(player.gold.stored_time), 'fdf55f')}` }],
                    ["display-text", function () {
                        return `金矿石、金锭熔炼倍率变为 ${textStyle_h2(f(tmp.gold.timeEff) + "x", 'fdf55f')}`
                    }],
                    ["display-text", function () {
                        let effPowerFactor = d(0.5)
                        if (hasUpgrade(gold, 42)) effPowerFactor = effPowerFactor.times(upgradeEffect(gold, 42))
                        if (hasUpgrade(gold, 45)) effPowerFactor = effPowerFactor.times(1.1)
                        if (shiftDown) return `效果公式：10<sup>${f(effPowerFactor)}lg(t+1)<sup>0.9</sup></sup>`
                    }],
                    ["display-text", function () {
                        if (hasUpgrade(gold, 33)) return `金矿石连锁率提升 ${textStyle_h2("+" + fp(tmp.gold.goldUpg13eff.toCC), 'fdf55f')}`
                    }],
                    ["display-text", function () {
                        if (shiftDown && hasUpgrade(gold, 33)) return `效果公式：min(lg(t)/300, 0.95)`
                    }],
                    ["display-text", function () {
                        if (hasUpgrade(gold, 33)) return `金矿石连锁倍率变为 ${textStyle_h2(f(tmp.gold.goldUpg13eff.toCM) + "x", 'fdf55f')}`
                    }],
                    ["display-text", function () {
                        let effPowerFactor = d(1)
                        if (hasUpgrade(gold, 45)) effPowerFactor = effPowerFactor.times(1.9)
                        let pd = effPowerFactor.eq(1) ? "" : f(effPowerFactor)
                        if (shiftDown && hasUpgrade(gold, 33)) return `效果公式：10<sup>${pd}lg(t+1)<sup>0.85</sup>/3</sup>`
                    }],
                    ["display-text", function () { return `时钟时间扭曲：${textStyle_h2(f(tmp.gold.timewarp) + "x", 'fdf55f')}` }],
                    ["display-text", function () { if (inChallenge(gold, 11)) return `你在挑战“反向扭曲”中，因此时钟时间扭曲/${f(tmp.gold.challenges[11].nerf)}！` }],
                    ["display-text", function () { if (inChallenge(gold, 11)) return buyBuyableRateText() }],
                    //["display-text", function () { if (player.gold.stored_time.gte(tmp.gold.softcapStart)) return `由于时间储存超过了${ftl(tmp.gold.softcapStart)}，时钟时间扭曲/${f(tmp.gold.timeSoftcap)}！` }],
                    //["display-text", function () { return `当前每刻(tick)储存的时间不能大于上一刻的${f(tmp.gold.growthLimit.add(1))}倍+1` }],
                    ["row",
                        [
                            "buyables",
                            "blank",
                            "challenges",
                        ]
                    ],

                    "blank",
                    ["display-text", function () {
                        if (player.gold.challenges[11] >= 2) return `你无法在金挑战中激活金层级主动技能，进入挑战会强行将已激活的主动技能撤销`
                    }],
                    ["display-text", function () {
                        if (hasUpgrade(gold, 43)) return `主动技能冷却时间如果小于等于50 milliseconds，（50毫秒，1tick）技能将持续生效，可以开启或关闭`
                    }],
                ]
            }
        },
    },
})

//世界1层18：琥珀金
addLayer("electrum", {
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: d(0),             // "points" is the internal name for the main resource of the layer.
            ore: d(0),
            molten: d(0),
        }
    },

    color: "#fffcbc",                       // The color for this layer, which affects many elements.
    nodeStyle: {
        "background": "linear-gradient(90deg, #c6ae49 0%, #f8ef85 20%, #ffff98 50%, #fffcbc 70%, #eee155 90%, #6c5e23 100%)",
    },
    resource: "琥珀金锭",            // The name of this layer's main prestige resource.
    symbol: "琥珀金",
    row: 1,                                 // The row this layer is on (0 is the first row).
    position: 17,
    baseResource: "points",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.points },  // A function to return the current amount of baseResource.

    requires: d(10),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "normal",                         // Determines the formula used for calculating prestige currency.
    exponent: 0.5,                          // "normal" prestige gain is (currency^exponent).
    layerShown() { return hasNormalAchievement(123) },

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        let m = d(1)                            // 合金的gainMult是给对应合金倍率的？
        return m
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return d(1)
    },

    doReset() {
        return undefined
    },

    upgrades: {
        11: {
            title: "反向扭曲的时间",
            description: "在时钟界面解锁一个挑战",
            cost() { return new ExpantaNum(25) },
            unlocked() { return tmp.electrum.layerShown },
        },
        12: {
            title: "充能",
            description: "第9镍升级的效果变为^1.5",
            canAfford() { return player.electrum.points.gte(4180) },
            onPurchase() { player.electrum.points = player.electrum.points.sub(4180) },
            currencyInternalName: "points",
            currencyDisplayName() { return `金锭 + ${f(4180)} 琥珀金锭` },
            currencyLayer: gold,
            cost() { return new ExpantaNum('3e314') },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        13: {
            title: "蓄能",
            description: "第7铅升级的效果变为^3.5",
            currencyInternalName: "points",
            currencyDisplayName() { return `铁锭` },
            currencyLayer: iron,
            cost() { return new ExpantaNum('1e47600') },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        14: {
            title: "释放",
            description() {
                let des = `二阶等级加成琥珀金锭合金倍率`
                if (hasUpgrade(electrum, 25)) des = `二阶等级加成琥珀金锭合金以及金层级第3主动技能的倍率`
                return des
            },
            currencyInternalName: "points",
            currencyDisplayName() { return `铁锭` },
            currencyLayer: iron,
            cost() { return new ExpantaNum('1e61100') },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effBase() {
                let b = d(10)
                if (hasUpgrade(redstone, 14)) b = b.times(upgradeEffect(redstone, 14))
                if (hasUpgrade(electrum, 33)) b = b.times(upgradeEffect(electrum, 33))
                return b
            },
            effect() {
                let eff = this.effBase().pow(player.tiers[0])
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：${f(this.effBase())}<sup>二阶等级</sup>`
                return t
            },
        },
        15: {
            title: "电力充盈",
            description: "解锁琥珀金相关的合成图纸",
            cost() { return new ExpantaNum(17600) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        21: {
            title: "超越力量",
            description: "扭曲黑洞：力量的基数变为原来的1,000x",
            canAfford() { return player.electrum.points.gte(64000) },
            onPurchase() { player.electrum.points = player.electrum.points.sub(64000) },
            currencyInternalName: "ore",
            currencyDisplayName() { return `金矿石 + ${f(64000)} 琥珀金锭` },
            currencyLayer: gold,
            cost() { return new ExpantaNum('1e700') },
            unlocked() { return hasUpgrade(this.layer, 15) },
        },
        22: {
            title: "琥珀金加成器",
            description: "琥珀金锭可以加成基础时间扭曲每购买10级的加成倍数",
            canAfford() { return player.electrum.points.gte(222000) },
            onPurchase() { player.electrum.points = player.electrum.points.sub(222000) },
            currencyInternalName: "ore",
            currencyDisplayName() { return `金矿石 + ${f(222000)} 琥珀金锭` },
            currencyLayer: gold,
            cost() { return new ExpantaNum('1e1685') },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.electrum.points.max(0).add(1).log10().pow(d(2).logBase(20)).max(1)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：lg(琥珀金锭+1)<sup>log<sub>20</sub>2</sup>`
                return t
            },
        },
        23: {
            title: "琥珀金自增",
            description: "琥珀金微弱加成自身合金倍率",
            canAfford() { return player.electrum.points.gte(322000) },
            onPurchase() { player.electrum.points = player.electrum.points.sub(322000) },
            currencyInternalName: "ore",
            currencyDisplayName() { return `金矿石 + ${f(322000)} 琥珀金锭` },
            currencyLayer: gold,
            cost() { return new ExpantaNum('1e2077') },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.electrum.points.max(0).add(10).log10().pow(2)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：lg(琥珀金锭+10)<sup>2</sup>`
                return t
            },
        },
        24: {
            title: "不知不觉我们快要有11个OoM^2了",
            description: "解锁金层级的第3个主动技能",
            canAfford() { return player.electrum.points.gte(5e6) },
            onPurchase() { player.electrum.points = player.electrum.points.sub(5e6) },
            currencyInternalName: "ore",
            currencyDisplayName() { return `金矿石 + ${f(5e6)} 琥珀金锭` },
            currencyLayer: gold,
            cost() { return new ExpantaNum('1e2110') },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        25: {
            title: "不过是一个过渡层级",
            description: "第4琥珀金升级也能对金层级第3个主动技能生效",
            canAfford() { return player.electrum.points.gte(555555555) },
            onPurchase() { player.electrum.points = player.electrum.points.sub(555555555) },
            currencyInternalName: "ore",
            currencyDisplayName() { return `金矿石 + ${f(555555555)} 琥珀金锭` },
            currencyLayer: gold,
            cost() { return new ExpantaNum('2.222e2222') },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        31: {
            title: "琥珀金膨胀#1",
            description: '第三行的琥珀金升级购买数量加成一次挖掘红石矿石的数量',
            canAfford() { return player.electrum.points.gte(3e61) },
            onPurchase() { player.electrum.points = player.electrum.points.sub(3e61) },
            currencyInternalName: "points",
            currencyDisplayName() { return `金锭 + ${f(3e61)} 琥珀金锭` },
            currencyLayer: gold,
            cost() { return new ExpantaNum('1e6630') },
            unlocked() { return hasCraftingItem(361) },
            effect() {
                let amt = tmp.electrum.row3upgsbought
                let eff = d(1e15).pow(amt)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：${f(1e15)}<sup>第三行琥珀金升级购买数量</sup>`
                return t
            },
        },
        32: {
            title: "琥珀金膨胀#2",
            description: '第三行的琥珀金升级购买数量加成生成的时运附魔等级',
            canAfford() { return player.electrum.points.gte(3e61) },
            onPurchase() { player.electrum.points = player.electrum.points.sub(3e61) },
            currencyInternalName: "points",
            currencyDisplayName() { return `红石粉 + ${f(3e61)} 琥珀金锭` },
            currencyLayer: redstone,
            cost() { return new ExpantaNum(1e267) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let amt = tmp.electrum.row3upgsbought
                let eff = d(2).times(amt).floor()
                return eff
            },
            effectDisplay() {
                return `+${formatWhole(upgradeEffect(this.layer, this.id))}`
            },
            tooltip() {
                let t = `公式：⌊2·第三行琥珀金升级购买数量⌋`
                return t
            },
        },
        33: {
            title: "琥珀金膨胀#3",
            description: '第三行的琥珀金升级购买数量加成第4琥珀金升级的效果底数',
            canAfford() { return player.electrum.points.gte(1e67) },
            onPurchase() { player.electrum.points = player.electrum.points.sub(1e67) },
            currencyInternalName: "points",
            currencyDisplayName() { return `红石粉 + ${f(1e67)} 琥珀金锭` },
            currencyLayer: redstone,
            cost() { return new ExpantaNum(1e267) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let amt = tmp.electrum.row3upgsbought
                let eff = d(2).pow(amt.pow(1.5))
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：2<sup>第三行琥珀金升级购买数量<sup>1.5</sup></sup>`
                return t
            },
        },
        34: {
            title: "琥珀金膨胀#4",
            description: '额外力量卡的力量+1',
            canAfford() { return player.electrum.points.gte(1e82) },
            onPurchase() { player.electrum.points = player.electrum.points.sub(1e82) },
            currencyInternalName: "points",
            currencyDisplayName() { return `红石粉 + ${f(1e82)} 琥珀金锭` },
            currencyLayer: redstone,
            cost() { return new ExpantaNum('1e343') },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        35: {
            title: "琥珀金膨胀#5",
            description: '每个不稳红石矿石都使额外等级卡的出现概率+2.5%，上限为+45%',
            canAfford() { return player.electrum.points.gte(1e93) },
            onPurchase() { player.electrum.points = player.electrum.points.sub(1e93) },
            currencyInternalName: "points",
            currencyDisplayName() { return `红石粉 + ${f(1e93)} 琥珀金锭` },
            currencyLayer: redstone,
            cost() { return new ExpantaNum('1e379') },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = d(0.025).times(player.redstone.destabilized).min(0.45)
                return eff
            },
            effectDisplay() {
                return `+${formatPercent(upgradeEffect(this.layer, this.id))}`
            },
            tooltip() {
                let t = `公式：0.025·不稳红石矿石`
            },
        },
    },

    row3upgsbought() {
        let upgs = player.electrum.upgrades
        let amt = d(0)
        for (let i = 0; i < upgs.length; i++) {
            let id = upgs[i]
            if (id >= 41) break
            if (Math.floor(id / 10) == 3) amt = amt.add(1)
        }
        if (hasCraftingItem(362)) amt = amt.add(tmp.red_ele.toElectrumUpgRow3)
        return amt
    },

    milestones: {
        0: {
            requirementDescription() { return `获得${f('e2.38e9')}经验` },
            effectDescription() { return `“基础时间扭曲”可以购买最大` },
            done() { return player.points.gte('e2.38e9') },
            unlocked() { return tmp.electrum.layerShown },
        },
        1: {
            requirementDescription() { return `获得${ftl('3.1556952e317')}时钟储存的时间` },
            effectDescription() { return `“黄金时间扭曲”可以购买最大` },
            done() { return player.gold.stored_time.gte('3.1556952e317') },
            unlocked() { return tmp.electrum.layerShown },
        },
    },

    update(diff) {
        if (player.electrum.points.gt(player.electrum.best)) player.electrum.best = player.electrum.points
    },

    tabFormat: [
        ["display-text", function () { return getPointsDisplay() }],
        "main-display",
        ["display-text", () => `你同时最多拥有 ${formatWhole(player.electrum.best)} 琥珀金锭`],
        "blank",
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "upgrades": {
                unlocked() { return tmp.electrum.layerShown },
                name() { return '升级' },
                content: [
                    ["blank", "15px"],
                    ["upgrades", [1, 2, 3, 4]],
                    ["display-text", function () {
                        if (hasCraftingItem(361)) return `生效的第三行琥珀金升级购买数量：${textStyle_h2(format(tmp.electrum.row3upgsbought), 'fffcbc')}`
                    }],
                ]
            },
            "milestones": {
                unlocked() { return tmp.electrum.layerShown },
                name() { return '里程碑' },
                content: [
                    ["blank", "15px"],
                    "milestones",
                ]
            },
        },
    },
})

//世界1层19：红石
addLayer("redstone", {
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: d(0),             // "points" is the internal name for the main resource of the layer.
            ore: d(0),
            destabilized: d(0),
            destabilized_clathrate: d(0),
            molten: d(0),
            miningLevel: d(3),
            rarity: d(175),
            progress: d(0),
            findingProgress: d(0),
            hardness: d(5400),
            destroying: false,
            finding: false,
            found: false,
            singularity: d(0),
            signal: d(0),
            signalupdatetime: d(0),
            fortune: d(0),
            chosenID: undefined,
            silk_touch: false,
        }
    },

    color: "#fc0000",                       // The color for this layer, which affects many elements.
    resource: "红石粉",            // The name of this layer's main prestige resource.
    symbol: "红石",
    row: 1,                                 // The row this layer is on (0 is the first row).
    position: 18,
    baseResource: "points",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.points },  // A function to return the current amount of baseResource.

    requires: d(10),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "normal",                         // Determines the formula used for calculating prestige currency.
    exponent: 0.5,                          // "normal" prestige gain is (currency^exponent).
    layerShown() { return hasNormalAchievement(126) },

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        let m = d(1)                            // 红石矿石倍率
        if (hasUpgrade(redstone, 12)) m = m.times(upgradeEffect(redstone, 12))
        if (hasUpgrade(redstone, 13)) m = m.times(tmp.redstone.signalEff)
        if (hasCraftingItem(352)) m = m.times(clickableEffect(ct, 352))
        if (hasUpgrade(electrum, 31)) m = m.times(upgradeEffect(electrum, 31))
        if (hasCraftingItem(391)) m = m.times(1e100)
        if (hasUpgrade(platinum, 21)) m = m.times(1e50)
        if (hasMilestone(sing_fus, 9)) m = m.times(buyableEffect(sing_fus, 32))
        m = m.floor()
        return m
    },

    minimumGain() {
        let g = d(4)
        if (hasUpgrade(redstone, 21)) g = g.pow(tmp.redstone.fortuneEff)
        return g
    },
    maximumGain() {
        let g = d(5)
        if (hasUpgrade(redstone, 21)) g = g.pow(tmp.redstone.fortuneEff)
        return g
    },
    minimumGainT() {
        let g = tmp.redstone.minimumGain
        g = g.times(tmp.redstone.gainMult)
        return g
    },
    maximumGainT() {
        let g = tmp.redstone.maximumGain
        g = g.times(tmp.redstone.gainMult)
        return g
    },

    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return d(1)
    },

    doReset() {
        return undefined
    },

    upgrades: {
        11: {
            title: "粉末",
            description: "红石粉以极强的效果加成经验获取",
            cost() { return new ExpantaNum(55) },
            unlocked() { return tmp.redstone.layerShown },
            extraPower() {
                let exp = d(1e10)
                if (hasUpgrade(redstone, 31)) exp = exp.times(upgradeEffect(redstone, 31))
                if (hasUpgrade(redstone, 32)) exp = exp.times(upgradeEffect(redstone, 32))
                if (hasUpgrade(redstone, 33)) exp = exp.times(upgradeEffect(redstone, 33))
                if (hasUpgrade(red_ele, 12)) exp = exp.times(upgradeEffect(red_ele, 12))
                if (hasAchievement('achievements', 135)) exp = exp.times(3.2)
                if (hasUpgrade(manasteel, 13)) exp = exp.times(upgradeEffect(manasteel, 13))
                if (hasUpgrade(diamond, 12)) exp = exp.times(upgradeEffect(diamond, 12))
                if (hasCraftingItem(422)) exp = exp.times(upgradeEffect(aluminum, 24)).times(tmp.achievements.effect)
                if (hasUpgrade(diamond, 34)) exp = exp.times(100)
                if (hasUpgrade(emerald, 13)) exp = exp.times(8)
                if (hasUpgrade(emerald, 21)) exp = exp.times(upgradeEffect(emerald, 21))
                return exp
            },
            effect() {
                let exp = this.extraPower()
                let eff = player.redstone.points.max(0).add(1).pow(exp)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let exp = this.extraPower()
                let t = `公式：(红石粉+1)<sup>${f(exp)}</sup>`
                return t
            },
        },
        12: {
            title: "生电核心",
            description: "需求：等级600,000,000<br>等级加成一次挖掘红石矿石的数量",
            canAfford() { return player.level.gte(6e8) },
            cost() { return new ExpantaNum(145) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.level.add(1).log10().add(1)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：lg(等级+1)+1`
                return t
            },
        },
        13: {
            title: "信号",
            description: "解锁“红石信号”界面",
            cost() { return new ExpantaNum(1445) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        14: {
            title: "红石激活",
            description: "红石粉加成第4琥珀金升级的效果公式底数",
            cost() { return new ExpantaNum(512000) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let exp = d(1.11)
                if (hasUpgrade(redstone, 34)) exp = exp.times(2)
                let eff = player.redstone.points.add(1).log10().add(1).pow(exp)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let exp = d(1.11)
                if (hasUpgrade(redstone, 34)) exp = exp.times(2)
                let t = `公式：(lg(红石粉+1)+1)${quickSUP(f(exp))}`
                return t
            },
        },
        15: {
            title: "超-红石信号",
            description: "红石信号的强度上限变为5x",
            canAfford() { return player.redstone.points.gte(4180) },
            onPurchase() { player.redstone.points = player.redstone.points.sub(780000) },
            currencyInternalName: "points",
            currencyDisplayName() { return `琥珀金锭 + ${f(780000)} 红石粉` },
            currencyLayer: electrum,
            cost() { return new ExpantaNum(1e15) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        21: {
            title: "准备附魔",
            description: "解锁“时运”界面",
            cost() { return new ExpantaNum(25000000) },
            unlocked() { return hasUpgrade(this.layer, 15) },
        },
        22: {
            title: "信号过载",
            description: "红石粉加成红石信号的强度上限",
            cost() { return new ExpantaNum(1e17) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.redstone.points.add(1).logBase(1000).add(1).pow(1.8)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：(log${quickSUB(f(1000))}(红石粉+1)+1)${quickSUP(f(1.8))}`
                return t
            },
        },
        23: {
            title: "知识加成",
            description() {
                return `每个二阶等级都能使初始生成的时运附魔等级+${fw(this.base())}`
            },
            cost() { return new ExpantaNum(1.21e21) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            base() {
                let b = d(1)
                if (hasUpgrade(platinum, 25)) b = b.times(3)
                return b
            },
            effect() {
                let eff = player.tiers[0].times(this.base()).max(0)
                return eff
            },
            effectDisplay() {
                return `+${formatWhole(upgradeEffect(this.layer, this.id))}`
            },
            tooltip() {
                let t = `公式：二阶等级` + hasUpgrade(platinum, 25) ? `·3` : ``
                return t
            },
        },
        24: {
            title: "精炼时运",
            description: "时运附魔的效果公式的指数参数+0.3",
            cost() { return new ExpantaNum(2.23e23) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        25: {
            title: "无尽涌出的魔力",
            description: "解锁2个时运页面的购买项",
            canAfford() { return player.redstone.points.gte(3e48) },
            onPurchase() { player.redstone.points = player.redstone.points.sub(3e48) },
            currencyInternalName: "points",
            currencyDisplayName() { return `金锭 + ${f(3e48)} 红石粉` },
            currencyLayer: gold,
            cost() { return new ExpantaNum('1e2910') },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        31: {
            title: '超指数膨胀经验池',
            description: '第三行的红石升级购买数量以指数加成第一个红石升级的效果',
            cost() { return new ExpantaNum(1.44e62) },
            effect() {
                let upgs = player.redstone.upgrades
                let eff = d(1)
                for (let i = 0; i < upgs.length; i++) {
                    let id = upgs[i]
                    if (id >= 41) break
                    if (Math.floor(id / 10) == 3) eff = eff.add(1)
                }
                if (hasUpgrade(platinum, 24)) eff = eff.pow(upgradeEffect(platinum, 24))
                return eff
            },
            effectDisplay() {
                return `^${format(upgradeEffect(this.layer, this.id))}`
            },
            unlocked() { return hasUpgrade(this.layer, 25) },
            tooltip() {
                let bl = ""
                let br = ""
                if (hasUpgrade(platinum, 24)) bl = "(",
                    br = `)${quickSUP(f(upgradeEffect(platinum, 24)))}`
                let t = `公式：${bl}第三行红石升级购买数量+1${br}`
                return t
            },
        },
        32: {
            title: '时间储存的剧变',
            description: '需求：等级7,600,000,000<br>时钟储存的时间以指数加成第一个红石升级的效果',
            cost() { return new ExpantaNum(1.68e62) },
            effect() {
                let eff = player.gold.stored_time.add(1).div('1e1400').log10().pow(0.34).max(1)
                if (hasUpgrade(platinum, 24)) eff = eff.pow(upgradeEffect(platinum, 24))
                return eff
            },
            effectDisplay() {
                return `^${format(upgradeEffect(this.layer, this.id))}`
            },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            tooltip() {
                let pow = d(0.34)
                if (hasUpgrade(platinum, 24)) pow = pow.times(upgradeEffect(platinum, 24))
                let t = `公式：(lg(时钟储存的时间+1)/1e1400)<sup>${f(pow)}</sup>`
                return t
            },
        },
        33: {
            title: '时运经验膨胀',
            description: '最高的时运附魔等级以指数加成第一个红石升级的效果',
            cost() { return new ExpantaNum(1e72) },
            effect() {
                let eff = tmp.redstone.highestFortuneLv.div(10).add(1).pow(1.35)
                if (hasUpgrade(platinum, 24)) eff = eff.pow(upgradeEffect(platinum, 24))
                return eff
            },
            effectDisplay() {
                return `^${format(upgradeEffect(this.layer, this.id))}`
            },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            tooltip() {
                let pow = d(1.35)
                if (hasUpgrade(platinum, 24)) pow = pow.times(upgradeEffect(platinum, 24))
                let t = `公式：(时运/10+1)<sup>${f(pow)}</sup>`
                return t
            },
        },
        34: {
            title: '终端是琥珀金',
            description: '第4红石升级的效果变为原来的^2',
            currencyDisplayName() { return `金锭 + ${f(1e72)} 红石粉` },
            currencyInternalName: "points",
            currencyLayer: gold,
            canAfford() { return player.redstone.points.gte(1e72) },
            onPurchase() { player.redstone.points = player.redstone.points.sub(1e72) },
            cost() { return new ExpantaNum('1e4100') },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        35: {
            title: '采集本体',
            description: '解锁精准采集，你可以直接获取红石矿石',
            currencyDisplayName() { return `琥珀金 + ${f(1e72)} 红石粉` },
            currencyInternalName: "points",
            currencyLayer: electrum,
            canAfford() { return player.redstone.points.gte(1e72) },
            onPurchase() { player.redstone.points = player.redstone.points.sub(1e72) },
            cost() { return new ExpantaNum(1.25e39) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        41: {
            title: "矿石信号",
            description: "红石矿石加成红石信号的强度上限",
            currencyDisplayName() { return `红石矿石` },
            currencyInternalName: "ore",
            currencyLayer: redstone,
            cost() { return new ExpantaNum(1e13) },
            unlocked() { return hasUpgrade(this.layer, 35) },
            effect() {
                let eff = player.redstone.ore.add(1).logBase(1000).add(1).pow(2.4)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：(log${quickSUB(f(1000))}(红石矿石+1)+1)${quickSUP(f(2.4))}`
                return t
            },
        },
        42: {
            title: "红石的不稳定状态",
            description: "解锁2个购买项以加成红石信号的强度上限",
            canAfford() { return player.redstone.points.gte(1e77) },
            onPurchase() { player.redstone.points = player.redstone.points.sub(1e77) },
            currencyDisplayName() { return `红石矿石 + ${f(1e77)}红石粉` },
            currencyInternalName: "ore",
            currencyLayer: redstone,
            cost() { return new ExpantaNum(3e17) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        43: {
            title: "场地加成",
            description: "“更大的场地”的等级以一定效果提供“时运等级保底机制”的免费等级",
            canAfford() { return player.redstone.points.gte(1e90) },
            onPurchase() { player.redstone.points = player.redstone.points.sub(1e90) },
            currencyDisplayName() { return `红石矿石 + ${f(1e90)}红石粉` },
            currencyInternalName: "ore",
            currencyLayer: redstone,
            cost() { return new ExpantaNum(3.1313e31) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = getBuyableAmount(redstone, 11).pow(2).times(2)
                return eff
            },
            effectDisplay() {
                return `+${formatWhole(upgradeEffect(this.layer, this.id))}`
            },
            tooltip() {
                let t = `公式：2“更大的场地”等级<sup>2</sup>`
                return t
            },
        },
        44: {
            title: "信号爆裂",
            description: "“信号基础提升”的等级以一定效果提供“信号突破”的免费等级",
            canAfford() { return player.redstone.points.gte(2.5e100) },
            onPurchase() { player.redstone.points = player.redstone.points.sub(2.5e100) },
            currencyDisplayName() { return `红石矿石 + ${f(2.5e100)}红石粉` },
            currencyInternalName: "ore",
            currencyLayer: redstone,
            cost() { return new ExpantaNum(1.25e32) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = getBuyableAmount(redstone, 22).pow(0.5)
                return eff
            },
            effectDisplay() {
                return `+${format(upgradeEffect(this.layer, this.id))}`
            },
            tooltip() {
                let t = `公式：“信号基础提升”等级<sup>0.5</sup>`
                return t
            },
        },
        45: {
            title: "不稳定",
            description: "解锁不稳红石矿石和不稳红石络合物，它会在部分的红石矿石中产生",
            canAfford() { return player.redstone.points.gte(1e180) },
            onPurchase() { player.redstone.points = player.redstone.points.sub(1e180) },
            currencyDisplayName() { return `红石矿石 + ${f(1e180)}红石粉` },
            currencyInternalName: "ore",
            currencyLayer: redstone,
            cost() { return new ExpantaNum(1e112) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        51: {
            title: "不稳定膨胀",
            description: "最高时运附魔等级的效果加成每个不稳红石矿石破坏获得的不稳红石络合物数量，但是从指数加成变成倍数加成",
            currencyDisplayName() { return `不稳红石络合物` },
            currencyInternalName: "destabilized_clathrate",
            currencyLayer: redstone,
            cost() { return new ExpantaNum(8) },
            unlocked() { return hasUpgrade(this.layer, 45) },
            effect() {
                let eff = tmp.redstone.fortuneEff
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：最高时运附魔等级的效果`
                return t
            },
        },
        52: {
            title: "液态红石",
            description: "在高炉层级解锁熔融红石的配方（数量在红石层级主界面显示）",
            currencyDisplayName() { return `不稳红石络合物` },
            currencyInternalName: "destabilized_clathrate",
            currencyLayer: redstone,
            cost() { return new ExpantaNum(2025) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        53: {
            title: "合金加入红石",
            description: "解锁红石琥珀金层级，现在可以解锁红石琥珀金锭的配方",
            currencyDisplayName() { return `mB 熔融红石` },
            currencyInternalName: "molten",
            currencyLayer: redstone,
            cost() { return new ExpantaNum(1500) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        54: {
            title: "时运额外突破机制",
            description: "你现在可以以一定概率在生成时运额外等级卡，其中有概率、力量、上限三种因子",
            canAfford() { return player.redstone.points.gte(2.5e185) },
            onPurchase() { player.redstone.points = player.redstone.points.sub(2.5e185) },
            currencyDisplayName() { return `琥珀金锭 + ${f(2.5e185)}红石粉` },
            currencyInternalName: "points",
            currencyLayer: electrum,
            cost() { return new ExpantaNum(3e56) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        55: {
            title: "扩散附魔效果",
            description: "最高时运附魔等级在XX之后加成挖掘一个不稳红石矿石的不稳红石络合物获取、熔融红石高炉熔炼倍率、琥珀金和红石琥珀金熔炼倍率",
            cost() { return new ExpantaNum(2.5e204) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effBase() {
                let b = d(10)
                return b
            },
            effect() {
                let lv = tmp.redstone.highestFortuneLv.max(20)
                let eff = this.effBase().pow(lv.sub(20))
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：${this.effBase() + quickSUP('时运-20')}`
                return t
            },
        },
    },

    milestones: {
        0: {
            requirementDescription() { return `到达二阶等级3` },
            effectDescription() { return `第2和第3个金层级主动技能的冷却时间变为原来的/10` },
            done() { return player.tiers[0].gte(3) },
            unlocked() { return tmp.redstone.layerShown },
        },
        1: {
            requirementDescription() { return `最高的时运附魔等级到达${roman(15)}` },
            effectDescription() { return `你现在可以整理栏位上的时运附魔` },
            done() { return tmp.redstone.highestFortuneLv.gte(15) },
            unlocked() { return hasUpgrade(redstone, 21) },
        },
        2: {
            requirementDescription() { return `最高的时运附魔等级到达${roman(20)}` },
            effectDescription() { return `第2和第3个金层级主动技能的冷却时间变为原来的/180` },
            done() { return tmp.redstone.highestFortuneLv.gte(20) },
            unlocked() { return hasUpgrade(redstone, 21) },
        },
        3: {
            requirementDescription() { return `最高的时运附魔等级到达${roman(1000)}` },
            effectDescription() { return `你现在可以一次性挖掘出尽可能多的不稳红石矿石` },
            done() { return tmp.redstone.highestFortuneLv.gte(1000) },
            unlocked() { return hasUpgrade(redstone, 45) },
        },
        4: {
            requirementDescription() { return `最高的时运附魔等级到达${roman(2025)}` },
            effectDescription() { return `自动购买最大两个红石信号的购买项` },
            done() { return tmp.redstone.highestFortuneLv.gte(2025) },
            unlocked() { return hasUpgrade(redstone, 45) },
        },
    },

    buyables: {
        11: {
            title: "更大的场地",
            cost(x) { return d(1e50).pow(d(10).pow(x).max(1)) },
            free() {
                let f = d(0)
                return f
            },
            purchaseLimit() {
                return d(6)
            },
            display() {
                let freedis = ""
                if (this.free().gte(1)) freedis = ` + ${formatWhole(this.free())}`
                let display = `增加附魔栏位的行和列<br>
                效果公式：x<br>
                等级：${formatWhole(player[this.layer].buyables[this.id])}${freedis}/${fw(this.purchaseLimit())}<br>
                当前效果：+${formatWhole(this.effect())}<br>
                价格：${fw(this.cost())} 红石粉`
                return display
            },
            canAfford() { return player[this.layer].points.gte(this.cost()) },
            canBuyMax() { return false },
            buy() {
                player[this.layer].points = player[this.layer].points.sub(this.cost()).max(0),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
            },
            effect(x) {
                return x.min(6)
            },
            unlocked() { return hasUpgrade(redstone, 25) },
        },
        12: {
            title: "时运等级保底机制",
            cost(x) { return d(9).add(x.pow(2)) },
            free() {
                let f = d(0)
                if (hasUpgrade(redstone, 43)) f = f.add(upgradeEffect(redstone, 43))
                return f
            },
            display() {
                let freedis = ""
                if (this.free().gte(1)) freedis = ` + ${formatWhole(this.free())}`
                let display = `提升生成的时运附魔等级<br>
                效果公式：x<br>
                等级：${formatWhole(player[this.layer].buyables[this.id])}${freedis}<br>
                当前效果：+${formatWhole(this.effect())}<br>
                需求：最高拥有时运 ${roman(this.cost())}`
                return display
            },
            canAfford() { return tmp[this.layer].highestFortuneLv.gte(this.cost()) },
            canBuyMax() { return false },
            buyMax() { if (this.canAfford() && tmp[this.layer].highestFortuneLv.gte(9)) setBuyableAmount(redstone, 12, tmp[this.layer].highestFortuneLv.sub(9).root(2).floor().add(1)) },
            buy() {
                if (this.canBuyMax()) this.buyMax()
                setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
            },
            effect(x) {
                return x.add(this.free())
            },
            unlocked() { return hasUpgrade(redstone, 25) },
            canAuto() { return hasNormalAchievement(162) },
            auto() {
                if (this.canAuto())
                    this.buyMax()
            },
        },
        21: {
            title() {
                let t = "信号突破"
                if (getBuyableAmount(this.layer, this.id).gte(35)) t = "稀有的" + t
                return t
            },
            cost(x) {
                let c = d(1e17).times(d(10).pow(x.pow(1.25)))
                if (getBuyableAmount(this.layer, this.id).gte(35)) c = d(1.2619370581206266e99).times(d(2025).pow(x.sub(34).pow(1.65)))
                return c
            },
            free() {
                let f = d(0)
                if (hasUpgrade(redstone, 44)) f = f.add(upgradeEffect(redstone, 44))
                return f
            },
            display() {
                let freedis = ""
                if (this.free().gte(1)) freedis = ` + ${format(this.free())}`
                let display = `加成红石信号的强度上限<br>
                效果公式：${f(this.effBase())}${quickSUP('x')}<br>
                等级：${formatWhole(player[this.layer].buyables[this.id])}${freedis}<br>
                当前效果：${format(this.effect())}x<br>
                价格：${formatWhole(this.cost())} 红石矿石`
                return display
            },
            canAfford() { return player[this.layer].ore.gte(this.cost()) },
            canBuyMax() { return false },
            buyMax() {
                if (this.canAfford() && player.redstone.ore.gte(1e17)) {
                    if (player.redstone.ore.lt(1.2619370581206266e99)) setBuyableAmount(redstone, 21, player[this.layer].ore.div(1e17).log10().root(1.25).floor().add(1))
                    else setBuyableAmount(redstone, 21, player[this.layer].ore.div(1.2619370581206266e99).logBase(2025).root(1.65).add(34).floor().add(1))
                }
            },
            buy() {
                if (this.canBuyMax()) this.buyMax()
                else player[this.layer].ore = player[this.layer].ore.sub(this.cost()).max(0),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
            },
            effBase() {
                let b = d(2)
                b = b.add(buyableEffect(redstone, 22))
                return b
            },
            effect(x) {
                return this.effBase().pow(x.add(this.free()))
            },
            unlocked() { return hasUpgrade(redstone, 42) },
            canAuto() { return hasMilestone(redstone, 4) },
            auto() {
                if (this.canAuto())
                    this.buyMax()
            },
        },
        22: {
            title: "信号基础提升",
            cost(x) { return d(3e21).times(d(100).pow(x.pow(1.6))) },
            free() {
                let f = d(0)
                return f
            },
            display() {
                let freedis = ""
                if (this.free().gte(1)) freedis = ` + ${formatWhole(this.free())}`
                let display = `加成信号突破的效果基数<br>
                效果公式：${f(this.effBase())}x<br>
                等级：${formatWhole(player[this.layer].buyables[this.id])}${freedis}<br>
                当前效果：+${format(this.effect())}<br>
                价格：${formatWhole(this.cost())} 红石矿石`
                return display
            },
            canAfford() { return player[this.layer].ore.gte(this.cost()) },
            canBuyMax() { return false },
            buyMax() { if (this.canAfford() && player.redstone.ore.gte(3e21)) setBuyableAmount(redstone, 22, player[this.layer].ore.div(3e21).logBase(100).root(1.6).floor().add(1)) },
            buy() {
                if (this.canBuyMax()) this.buyMax()
                else player[this.layer].ore = player[this.layer].ore.sub(this.cost()).max(0),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
            },
            effBase() {
                let b = d(0.5)
                return b
            },
            effect(x) {
                return this.effBase().times(x)
            },
            unlocked() { return hasUpgrade(redstone, 42) },
            canAuto() { return hasMilestone(redstone, 4) },
            auto() {
                if (this.canAuto())
                    this.buyMax()
            },
        },
    },

    clickables: {
        11: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = "点击寻找"
                return d
            },
            canClick() { return !player.redstone.finding && !player.redstone.destroying && !player.redstone.found && isAtLocation('overworld') },
            onClick() {
                if (!player.redstone.finding) player.redstone.finding = true
            },
            unlocked() { return tmp.redstone.layerShown },
            style() {
                return {
                    'min-height': '50px',
                    'width': '120px',
                    'font-size': '20px'
                }
            },
        },
        12: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = "点击挖掘"
                return d
            },
            canClick() { return !player.redstone.destroying && player.redstone.found },
            onClick() {
                if (!player.redstone.destroying) player.redstone.destroying = true
            },
            unlocked() { return tmp.redstone.layerShown },
            style() {
                return {
                    'min-height': '50px',
                    'width': '120px',
                    'font-size': '20px'
                }
            },
        },
        21: {
            title() {
                let t = "时运附魔"
                return t
            },
            display() {
                let d = `点击在附魔栏位上随机生成对应等级的附魔<br>生成的时运附魔等级：${roman(this.generatedEnchantmentLv())}`
                return d
            },
            generatedEnchantmentLv() {
                let l = d(1)
                if (hasUpgrade(redstone, 23)) l = l.add(upgradeEffect(redstone, 23))
                if (hasUpgrade(redstone, 25)) l = l.add(buyableEffect(redstone, 12))
                if (hasUpgrade(electrum, 32)) l = l.add(upgradeEffect(electrum, 32))
                if (hasUpgrade(platinum, 21)) l = l.add(3)
                l = l.floor()
                return l
            },
            canClick() {
                let grid = tmp.redstone.grid
                let slots = grid.rows * grid.cols
                let empty = 0
                for (let i = 0; i < slots; i++) {
                    if (player.redstone.grid[getEveryGridIDArray(grid.rows, grid.cols)[i]] instanceof ExpantaNum) {
                        if (player.redstone.grid[getEveryGridIDArray(grid.rows, grid.cols)[i]].eq(0))
                            empty += 1
                    }
                }
                return empty >= 1
            },
            onClick() {
                let grid = tmp.redstone.grid
                let slots = grid.rows * grid.cols
                let emptyPos = []
                for (let i = 0; i < slots; i++) {
                    if (player.redstone.grid[getEveryGridIDArray(grid.rows, grid.cols)[i]].array) {
                        if (player.redstone.grid[getEveryGridIDArray(grid.rows, grid.cols)[i]].eq(0))
                            emptyPos.push(getEveryGridIDArray(grid.rows, grid.cols)[i])
                    }
                }
                let len = emptyPos.length
                let chosen = emptyPos[Math.min(len, Math.floor((len) * (Math.random())))]
                console.log('生成在格子' + chosen)
                if (hasUpgrade(redstone, 54)) {
                    if (d(Math.random()).lte(tmp.redstone.fortuneExtraCardChance)) player.redstone.grid[chosen] = [tmp.redstone.fortuneExtraCardPower, 1] //data[1] == 1即为额外等级卡
                    else player.redstone.grid[chosen] = this.generatedEnchantmentLv()
                }
                else return player.redstone.grid[chosen] = this.generatedEnchantmentLv()
            },
            unlocked() { return hasUpgrade(redstone, 21) },
            style() {
                return {
                    'min-height': '120px',
                    'width': '300px',
                    'border-radius': '5px',
                }
            },
        },
        22: {
            display() {
                let d = "整理栏位（从大到小排序）"
                return d
            },
            canClick() { return true },
            onClick() {
                let grid = tmp.redstone.grid
                let slots = grid.rows * grid.cols
                let fortunesArray = []
                let extraCardArray = []
                let cardPowerArray = []
                for (let i = 0; i < slots; i++) {
                    if (player.redstone.grid[getEveryGridIDArray(grid.rows, grid.cols)[i]].array)
                        fortunesArray.push(player.redstone.grid[getEveryGridIDArray(grid.rows, grid.cols)[i]])
                    if (player.redstone.grid[getEveryGridIDArray(grid.rows, grid.cols)[i]] instanceof Array)
                        cardPowerArray.push(player.redstone.grid[getEveryGridIDArray(grid.rows, grid.cols)[i]][0])
                }

                cardPowerArray = sortExpantaNumArray(cardPowerArray)
                console.log(cardPowerArray)
                for (let i = 0; i < cardPowerArray.length; i++) {
                    extraCardArray.push([cardPowerArray[i], 1])
                }
                fortunesArray = sortExpantaNumArray(fortunesArray)
                fortunesArray = fortunesArray.concat(extraCardArray)
                console.log(fortunesArray.toString())
                for (let i = 0; i < slots; i++) {
                    player.redstone.grid[getEveryGridIDArray(grid.rows, grid.cols)[i]] = fortunesArray[i]
                }
                player.redstone.chosenID = undefined
            },
            unlocked() { return hasMilestone(redstone, 1) },
            tooltip: "会取消当前选中的栏位",
            style() {
                return {
                    'min-height': '120px',
                    'width': '150px',
                    'font-size': '20px',
                }
            },
        },
        31: {
            display() {
                let d = "精准采集模式："
                d += player.redstone.silk_touch ? "开" : "关"
                return d
            },
            canClick() { return true },
            onClick() { player.redstone.silk_touch = !player.redstone.silk_touch },
            unlocked() { return hasUpgrade(redstone, 35) },
            style() {
                return {
                    'min-height': '50px',
                    'width': '200px',
                    'font-size': '20px'
                }
            },
        },
        41: {
            display() {
                let d = "挖掘全部不稳红石矿石"
                return d
            },
            canClick() { return player.redstone.destabilized.gte(1) },
            onClick() {
                player.redstone.destabilized_clathrate = player.redstone.destabilized_clathrate.add(player.redstone.destabilized.times(tmp.redstone.clathrate_in_ore)),
                    player.redstone.destabilized = d(0)
            },
            unlocked() { return hasUpgrade(redstone, 45) },
            style() {
                return {
                    'min-height': '50px',
                    'width': '220px',
                    'font-size': '20px'
                }
            },
        },
    },

    grid: {
        rows() {
            let r = 3
            if (hasUpgrade(redstone, 25)) r += buyableEffect(redstone, 11).toNumber()
            return r
        },
        maxRows: 9,
        cols() {
            let c = 3
            if (hasUpgrade(redstone, 25)) c += buyableEffect(redstone, 11).toNumber()
            return c
        },
        maxCols: 9,
        getStartData(id) {
            return d(0)
        },
        getUnlocked(id) { // Default
            return hasUpgrade(redstone, 21)
        },
        getCanClick(data, id) {
            return true
        },
        onClick(data, id) {
            if (!player.redstone.chosenID) player.redstone.chosenID = id
            else if (player.redstone.chosenID == id) player.redstone.chosenID = undefined
            //object: ExpantaNum数字（附魔等级） array: 额外等级卡
            else if (player.redstone.grid[player.redstone.chosenID].array) {
                if (player.redstone.grid[player.redstone.chosenID].eq(0)) player.redstone.chosenID = id
                else {
                    if (data.array) {
                        if (player.redstone.grid[player.redstone.chosenID].eq(data)) player.redstone.grid[player.redstone.chosenID] = d(0),
                            player.redstone.grid[id] = player.redstone.grid[id].add(1),
                            player.redstone.chosenID = undefined
                        else if (data.eq(0)) player.redstone.grid[id] = player.redstone.grid[player.redstone.chosenID],
                            player.redstone.grid[player.redstone.chosenID] = d(0),
                            player.redstone.chosenID = undefined
                        else player.redstone.chosenID = id
                    }
                    if (data instanceof Array) {
                        player.redstone.chosenID = id
                    }
                }
            }
            else if (player.redstone.grid[player.redstone.chosenID] instanceof Array) {
                if (data.array) {
                    if (data.eq(0)) player.redstone.grid[id] = player.redstone.grid[player.redstone.chosenID],
                        player.redstone.grid[player.redstone.chosenID] = d(0),
                        player.redstone.chosenID = undefined
                    else player.redstone.grid[id] = player.redstone.grid[id].add(player.redstone.grid[player.redstone.chosenID][0]).min(tmp.redstone.fortuneExtraMaxLevel.max(data)),
                        player.redstone.grid[player.redstone.chosenID] = d(0),
                        player.redstone.chosenID = undefined
                }
                if (data instanceof Array) {
                    player.redstone.chosenID = id
                }
            }
        },
        getTitle(data, id) {
            if (data.array) {
                if (data.eq(0)) return '空槽位'
                else return '时运 ' + roman(data)
            }
            if (data instanceof Array) return '额外等级卡<br>力量：' + fw(data[0])
        },
        getStyle(data, id) {
            let s
            if (data.array) {
                if (data.eq(0)) s = {
                    'background-color': 'rgba(0,0,0,0)',
                    'border-color': 'white',
                    'color': 'white',
                    'height': '75px',
                    'width': '75px',
                }
                else s = {
                    'border-color': 'white',
                    'color': 'white',
                    'height': '75px',
                    'width': '75px',
                    background: `repeating-linear-gradient(45deg,rgba(255, 0, 255, 0.5) 25%, rgba(255, 0, 255, 0) 50%, rgba(255, 0, 255, 0.5) 75%)`,
                    'background-size': '300% 300%',
                    animation: 'enchant-glow 12s linear infinite'
                }
            }
            if (data instanceof Array) s = {
                background: "linear-gradient(45deg, #c6ae49 0%, #f8ef85 20%, #ffff98 50%, #fffcbc 70%, #eee155 90%, #6c5e23 100%)",
                'height': '75px',
                'width': '75px',
            }
            if (id == player.redstone.chosenID) s['border-color'] = '#fc0000'
            return s
        },
    },

    highestFortuneLv() {
        if (hasMilestone(emerald, 0)) return tmp.redstone.fortuneExtraMaxLevel
        let lv = d(0)
        let grid = tmp.redstone.grid
        let slots = grid.rows * grid.cols
        for (let i = 0; i < slots; i++) {
            if (player.redstone.grid[getEveryGridIDArray(grid.rows, grid.cols)[i]] instanceof Array) continue
            if (player.redstone.grid[getEveryGridIDArray(grid.rows, grid.cols)[i]].gt(lv)) lv = player.redstone.grid[getEveryGridIDArray(grid.rows, grid.cols)[i]]
        }
        return lv
    },

    fortuneEff() {
        let lv = tmp.redstone.highestFortuneLv
        let p = d(0.8)
        if (hasUpgrade(redstone, 24)) p = p.add(0.3)
        let eff = lv.times(4).pow(p).add(1)
        return eff
    },

    fortuneExtraCardChance() {
        let c = d(0.05)
        if (hasUpgrade(electrum, 35)) c = c.add(upgradeEffect(electrum, 35))
        c = c.min(0.5)
        return c
    },

    fortuneExtraCardPower() {
        let p = d(1)
        if (hasUpgrade(electrum, 34)) p = p.add(1)
        if (hasUpgrade(red_ele, 22)) p = p.add(1)
        if (hasUpgrade(diamond, 43)) p = p.add(upgradeEffect2(diamond, 43))
        return p
    },

    fortuneExtraCardLimit() {
        let l = d(10)
        if (hasUpgrade(red_ele, 22)) l = l.add(5)
        if (hasUpgrade(diamond, 43)) l = l.add(upgradeEffect(diamond, 43))
        return l
    },

    fortuneExtraMaxLevel() {
        let lim = tmp.redstone.fortuneExtraCardLimit
        return tmp.redstone.clickables[21].generatedEnchantmentLv.add(lim)
    },

    bars: {
        redstoneFinding: {
            direction: RIGHT,
            width: 360,
            height: 60,
            display() { return `找矿进度: ${format(player.redstone.findingProgress)}/${format(rarity(redstone))}` },
            progress() { let p = player.redstone.findingProgress.div(rarity(redstone)); if (player.redstone.found) p = d(1); return p },
            unlocked() { return tmp.redstone.layerShown },
            fillStyle() { return { "background-color": `${tmp[this.layer].color}` } },
            baseStyle() { return { "background-color": "rgba(0,0,0,0)" } },
            textStyle() { return { "color": "#710000" } },
        },
        redstoneDestroying: {
            direction: RIGHT,
            width: 360,
            height: 60,
            display() { return `进度: ${format(player.redstone.progress)}/${format(hardness(redstone))}` },
            progress() { return player.redstone.progress.div(hardness(redstone)) },
            unlocked() { return tmp.redstone.layerShown },
            fillStyle() { return { "background-color": `${tmp[this.layer].color}` } },
            baseStyle() { return { "background-color": "rgba(0,0,0,0)" } },
            textStyle() { return { "color": "#710000" } },
        },
        signalDisplay: {
            direction: RIGHT,
            width: 480,
            height: 30,
            progress() { return player.redstone.signal.div(tmp.redstone.maxSignal).max(0) },
            unlocked() { return hasUpgrade(redstone, 13) },
            fillStyle() { return { "background-color": `${tmp[this.layer].color}` } },
            baseStyle() { return { "background-color": "rgba(0,0,0,0)" } },
            borderStyle() {
                return { 'border-radius': '0' }
            },
        },
    },

    maxSignal() {
        let s = d(15)
        if (hasUpgrade(redstone, 15)) s = s.times(5)
        if (hasUpgrade(redstone, 22)) s = s.times(upgradeEffect(redstone, 22))
        if (hasUpgrade(redstone, 41)) s = s.times(upgradeEffect(redstone, 41))
        if (hasUpgrade(redstone, 42)) s = s.times(buyableEffect(redstone, 21))
        if (hasUpgrade(red_ele, 21)) s = s.times(1e10)
        s = s.floor()
        return s
    },

    signalEff() {
        let eff = player.redstone.signal.add(1).pow(2.5)
        if (hasUpgrade(red_ele, 21)) eff = eff.pow(1.1)
        return eff
    },

    destabilized_appear_chance() { //记录倒数
        let destabilized = player.redstone.destabilized
        let rec_chance = d(1)
        rec_chance = d(2e111).pow(destabilized.add(1).pow(1.25))
        if (hasUpgrade(red_ele, 23)) rec_chance = rec_chance.div(1e32)
        return rec_chance
    },

    clathrate_in_ore() {
        let g = d(4)
        if (hasUpgrade(redstone, 51)) g = g.times(upgradeEffect(redstone, 51))
        if (hasUpgrade(redstone, 55)) g = g.times(upgradeEffect(redstone, 55))
        return g
    },

    destabilized_real_chance() {
        let destabilized_appear_chance = tmp.redstone.destabilized_appear_chance
        let normal_ore_mult = tmp.redstone.gainMult
        let lambda = destabilized_appear_chance.div(normal_ore_mult)
        let real_chance
        if (lambda.lte(1e-5)) real_chance = d(1)
        else if (lambda.lte(10000)) real_chance = d(1).sub(d(Math.E).pow(lambda.rec().neg())).rec()
        else if (lambda.lte(1e308)) real_chance = lambda.rec().sub(lambda.rec().pow(2).div(2)).add(lambda.rec().pow(3).div(6)).sub(lambda.rec().pow(4).div(24)).add(lambda.rec().pow(5).div(120)).rec()
        else real_chance = lambda
        return real_chance
    },

    destabilized_gain() {
        let gm = tmp.redstone.gainMult
        if (hasUpgrade(red_ele, 23)) gm = gm.times(1e32)
        let gain = gm.max(1).logBase(2e111).root(1.25).sub(1).floor().add(1)
        return gain
    },

    destabilized_pending() { // 1000级时运里程碑
        let gain = tmp.redstone.destabilized_gain
        let pending = gain.sub(player.redstone.destabilized)
        return pending
    },

    update(diff) {
        if (player.redstone.finding) player.redstone.findingProgress = player.redstone.findingProgress.add(player.copper.speed.times(diff))
        if (player.redstone.findingProgress.gte(rarity(redstone))) player.redstone.findingProgress = d(0),
            player.redstone.finding = false,
            player.redstone.found = true

        if (player.redstone.destroying) player.redstone.progress = player.redstone.progress.add(player.stone.speed.times(diff))
        if (player.redstone.progress.gte(hardness(redstone))) {
            player.redstone.progress = d(0),
                player.redstone.found = false,
                player.redstone.destroying = false
            if (player.redstone.silk_touch) {
                player.redstone.ore = player.redstone.ore.add(tmp.redstone.gainMult)
                if (hasUpgrade(redstone, 45)) {
                    if (hasMilestone(redstone, 3) && tmp.redstone.destabilized_pending.gt(0)) {
                        player.redstone.destabilized = player.redstone.destabilized.add(tmp.redstone.destabilized_pending)
                    }
                    else {
                        let real_chance = tmp.redstone.destabilized_real_chance.rec()
                        if (d(Math.random()).lt(real_chance)) player.redstone.destabilized = player.redstone.destabilized.add(1)
                    }
                }
            }
            else player.redstone.points = player.redstone.points.add(tmp.redstone.maximumGainT.sub(tmp.redstone.minimumGainT).times(Math.random()).add(tmp.redstone.minimumGainT).round())
        }

        if (player.redstone.points.gt(player.redstone.best)) player.redstone.best = player.redstone.points

        //信号
        if (hasUpgrade(redstone, 13)) {
            player.redstone.signalupdatetime = player.redstone.signalupdatetime.add(diff / player.gameSpeed)
            if (player.redstone.signalupdatetime.gte(1 - options.updatingRate / 1000)) player.redstone.signalupdatetime = d(0),
                player.redstone.signal = tmp.redstone.maxSignal.add(1).times(Math.random()).floor().min(tmp.redstone.maxSignal)

            player.random = Math.random() * 10000 //借用计时器每秒产生随机数
        }
        //附魔更新等级
        let grid = tmp.redstone.grid
        let slots = grid.rows * grid.cols
        for (let i = 0; i < slots; i++) {
            if (player.redstone.grid[getEveryGridIDArray(grid.rows, grid.cols)[i]] instanceof Array) continue
            else if (player.redstone.grid[getEveryGridIDArray(grid.rows, grid.cols)[i]].neq(0) && player.redstone.grid[getEveryGridIDArray(grid.rows, grid.cols)[i]].lt(tmp.redstone.clickables[21].generatedEnchantmentLv)) {
                player.redstone.grid[getEveryGridIDArray(grid.rows, grid.cols)[i]] = (tmp.redstone.clickables[21].generatedEnchantmentLv)
            }
        }
    },

    tabFormat: [
        ["display-text", function () { return getPointsDisplay() }],
        ["display-text", () => `你有 ${textStyle_h2(formatWhole(player.redstone.ore), 'fc0000')} 红石矿石`],
        ["display-text", function () { if (tmp.redstone.layerShown) return `你有 ${textStyle_h2(formatWhole(player.redstone.points), 'fc0000')} 红石粉` }],
        ["display-text", function () { if (hasUpgrade(redstone, 52)) return `你有 ${textStyle_h2(formatWhole(player.redstone.molten) + ' mB', 'fc0000')} 熔融红石` }],
        "blank",
        ["display-text", () => `你同时最多拥有 ${formatWhole(player.redstone.best)} 红石粉`],
        "blank",
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "dig": {
                unlocked() { return tmp.redstone.layerShown },
                name() { return '挖掘' },
                content: [
                    ["blank", "15px"],
                    ["row", [["bar", "redstoneFinding"], "blank", ["clickable", 11],]],
                    "blank",
                    ["row", [["bar", "redstoneDestroying"], "blank", ["clickable", 12],]],
                    ["blank", function () { return hasUpgrade(redstone, 35) ? "17px" : '0' }],
                    [function () { return hasUpgrade(redstone, 35) ? "clickables" : "blank" }, function () { return hasUpgrade(redstone, 35) ? [3] : '0' }],
                    "blank",
                    ["display-text", function () { return player.redstone.found ? `你找到了一处红石矿石` : `你尚未找到红石矿石` }],
                    "blank",
                    ["display-text", function () { return `找矿速度：${format(player.copper.speed)}/秒` }],
                    ["display-text", function () { return `挖掘速度：${format(player.stone.speed)}/秒` }],
                    ["display-text", function () { return `破坏单个红石矿石可获得红石粉的范围：${textStyle_h2(fw(tmp.redstone.minimumGain) + "~" + fw(tmp.redstone.maximumGain), 'fc0000')}` }],
                    ["display-text", function () {
                        let t
                        if (player.redstone.silk_touch && !shiftDown || !player.redstone.silk_touch && shiftDown) t = `一次破坏红石矿石的数量：${textStyle_h2(fw(tmp.redstone.gainMult), 'fc0000')} （需要精准采集）`
                        else t = `一次破坏的红石粉获取范围：${textStyle_h2(fw(tmp.redstone.minimumGainT) + "~" + fw(tmp.redstone.maximumGainT), 'fc0000')}`
                        if (!shiftDown) t += " （按shift显示另一种资源）"
                        return t
                    }],
                    ["display-text", function () { return `稀有度：${fw(rarity(redstone))}` }],
                    ["display-text", function () { return `硬度：${fw(hardness(redstone))}` }],
                    ["display-text", function () { return `挖掘等级：3` }],
                    ["display-text", function () { return `需要在主世界挖掘` }],
                ]
            },
            "upgrades": {
                unlocked() { return tmp.redstone.layerShown },
                name() { return '升级' },
                content: [
                    ["blank", "15px"],
                    "upgrades",
                ]
            },
            "milestones": {
                unlocked() { return tmp.redstone.layerShown },
                name() { return '里程碑' },
                content: [
                    ["blank", "15px"],
                    "milestones",
                ]
            },
            "signal": {
                unlocked() { return hasUpgrade(redstone, 13) },
                name() { return '红石信号' },
                content: [
                    ["blank", "15px"],
                    ["bar", "signalDisplay"],
                    "blank",
                    ["display-text", function () { return `你释放了强度 ${textStyle_h2(fw(player.redstone.signal), 'fc0000')} 的红石信号，一次挖掘红石矿石的数量变为 ${textStyle_h2(f(tmp.redstone.signalEff) + 'x', 'fc0000')}` }],
                    ["display-text", function () {
                        let power = d(2.5)
                        if (hasUpgrade(red_ele, 21)) power = power.times(1.1)
                        if (shiftDown) return `效果公式：(强度+1)${quickSUP(f(power))}`
                    }],
                    ["display-text", function () { return `红石信号的强度上限为 ${textStyle_h2(fw(tmp.redstone.maxSignal), 'fc0000')}` }],
                    ["display-text", function () { return `红石信号每现实秒会在强度范围中随机一个整数` }],
                    ["blank", function () { return hasUpgrade(redstone, 42) ? "17px" : '0' }],
                    [function () { return hasUpgrade(redstone, 42) ? "buyables" : "blank" }, function () { return hasUpgrade(redstone, 42) ? [2] : '0' }],
                ]
            },
            "fortune": {
                unlocked() { return hasUpgrade(redstone, 21) },
                name() { return '时运' },
                content: [
                    ["blank", "15px"],
                    "grid",
                    "blank",
                    ["clickables", [2]],
                    "blank",
                    ["buyables", [1]],
                    "blank",
                    ["display-text", function () { return `你最高有 ${textStyle_h2("时运 " + roman(tmp.redstone.highestFortuneLv), 'fc0000')}` }],
                    ["display-text", function () { return `将破坏单个红石矿石可获得红石粉的范围变为 ${textStyle_h2("^" + f(tmp.redstone.fortuneEff), 'fc0000')}` }],
                    ["display-text", function () {
                        let p = d(0.8)
                        if (hasUpgrade(redstone, 24)) p = p.add(0.3)
                        if (shiftDown) return `效果公式：(4x)${quickSUP(f(p))}+1`
                    }],
                    ["display-text", function () { if (hasUpgrade(redstone, 54)) return `出现额外等级卡的概率为 ${textStyle_h2(fp(tmp.redstone.fortuneExtraCardChance), 'fffcbc')}` }],
                    ["display-text", function () { if (hasUpgrade(redstone, 54)) return `额外等级卡的力量为 ${textStyle_h2(fw(tmp.redstone.fortuneExtraCardPower), 'fffcbc')}` }],
                    ["display-text", function () { if (hasUpgrade(redstone, 54)) return `额外等级卡最多能将附魔等级提升（基于生成的等级） ${textStyle_h2('+' + fw(tmp.redstone.fortuneExtraCardLimit), 'fffcbc')}` }],
                    ["display-text", function () { if (hasUpgrade(redstone, 54)) return `通过额外等级卡最高能使附魔等级到达 ${textStyle_h2(roman(tmp.redstone.fortuneExtraMaxLevel), 'fffcbc')}` }],
                    ["display-text", function () { return `点击选中，将两个同等级的附魔合成可将附魔等级+1` }],
                    ["display-text", function () { return `选中的格子边框会变红，再次点击一个格子可以合成/移动/换选/取消` }],
                    ["display-text", function () { return `如果存在附魔等级低于初始生成等级的附魔，则自动升级为初始生成等级` }],
                    ["display-text", function () { if (hasUpgrade(redstone, 54)) return `你现在可以以一定概率获得额外等级卡，选中额外等级卡后点击想要升级的附魔格子，可以直接提升等效于力量的等级，但不能突破其提升上限` }],
                ]
            },
            "destabilized": {
                unlocked() { return hasUpgrade(redstone, 45) },
                name() { return '不稳定' },
                content: [
                    ["blank", "15px"],
                    ["row", [["bar", "redstoneFinding"], "blank", ["clickable", 11],]],
                    "blank",
                    ["row", [["bar", "redstoneDestroying"], "blank", ["clickable", 12],]],
                    ["blank", function () { return hasUpgrade(redstone, 35) ? "17px" : '0' }],
                    [function () { return hasUpgrade(redstone, 35) ? "row" : "blank" }, function () {
                        return hasUpgrade(redstone, 35) ?
                            [
                                ["clickable", 31],
                                ["clickable", 41],
                            ]
                            : '0'
                    }],
                    "blank",
                    ["display-text", function () { return player.redstone.found ? `你找到了一处红石矿石` : `你尚未找到红石矿石` }],
                    "blank",
                    ["display-text", function () {
                        let t = `一次破坏红石矿石的数量：${textStyle_h2(fw(tmp.redstone.gainMult), 'fc0000')} （需要精准采集）`
                        return t
                    }],
                    ["display-text", function () { return `你有 ${textStyle_h2(formatWhole(player.redstone.destabilized), 'fc0000')} ${hasMilestone(redstone, 3) && tmp.redstone.destabilized_pending.gt(0) ? textStyle_h2("(+" + formatWhole(tmp.redstone.destabilized_pending) + ") ", 'fc0000') : ""}不稳红石矿石` }],
                    ["display-text", function () { return `你有 ${textStyle_h2(formatWhole(player.redstone.destabilized_clathrate), 'fc0000')} 不稳红石络合物` }],
                    ["display-text", function () {
                        if (!shiftDown) return `不稳红石矿石出现概率：${textStyle_h2(fesn(tmp.redstone.destabilized_appear_chance.div(100)) + '%', 'fc0000')} （按shift查看挖掘一次的概率）`
                        else return `挖掘一次红石矿石不稳红石矿石出现的概率：${textStyle_h2(fesn(tmp.redstone.destabilized_real_chance.div(100)) + '%', 'fc0000')}`
                    }],
                    ["display-text", function () {
                        let m = d(1)
                        if (hasUpgrade(red_ele, 23)) m = m.times(1e32)
                        if (shiftDown) return `概率公式：${f(2e111)}${quickSUP(`-(x+1)${quickSUP('1.25')}`)}${m.gt(1) ? "·" + f(m) : ""}`
                    }],
                    ["display-text", function () { return `挖掘不稳红石矿石获得的不稳红石络合物：${textStyle_h2(fw(tmp.redstone.clathrate_in_ore), 'fc0000')}` }],
                    ["display-text", function () { return `不稳红石矿石出现的概率取决于你的不稳定红石矿石数量，每获得一次红石矿石（需要精准采集）就会尝试获取一次不稳红石矿石` }],
                    ["display-text", function () { return `每次挖掘红石矿石最多只能获得1个不稳定红石矿石` }],
                    ["display-text", function () { return `你可以挖掘已有的不稳红石矿石来获取不稳红石络合物，挖掘后不稳红石矿石出现概率也会重置` }],
                ],
            },
        },
    },
})

//世界1层20：红石琥珀金
addLayer("red_ele", {
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: d(0),             // "points" is the internal name for the main resource of the layer.
            ore: d(0),
            molten: d(0),
            charged: d(0),
            chargingProgress: d(0),
        }
    },

    color: "#fffcbc",                       // The color for this layer, which affects many elements.
    nodeStyle: {
        "background": "linear-gradient(90deg, #c6ae49 0%, #f8ef85 20%, #ffff98 50%, #fffcbc 70%, #eee155 90%, #6c5e23 100%)",
        "border-color": "#fc0000",
    },
    resource: "红石琥珀金锭",            // The name of this layer's main prestige resource.
    symbol: "红石琥珀金",
    row: 1,                                 // The row this layer is on (0 is the first row).
    position: 19,
    baseResource: "points",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.points },  // A function to return the current amount of baseResource.

    requires: d(10),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "normal",                         // Determines the formula used for calculating prestige currency.
    exponent: 0.5,                          // "normal" prestige gain is (currency^exponent).
    layerShown() { return hasNormalAchievement(134) },

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        let m = d(1)                            // 合金的gainMult是给对应合金倍率的？
        return m
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return d(1)
    },

    doReset() {
        return undefined
    },

    upgrades: {
        11: {
            title: "RF充满力量！",
            description: "熔融红石加成熔融红石的高炉熔炼倍率",
            cost() { return new ExpantaNum(8) },
            unlocked() { return tmp.red_ele.layerShown },
            effect() {
                let eff = player.redstone.molten.add(1).log10().pow(2).add(1)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：lg(熔融红石+1)${quickSUP('2')}+1`
                return t
            },
        },
        12: {
            title: "红石琥珀金：能量迸发",
            description() {
                return `红石琥珀金锭以指数加成第1红石升级的效果 （到^${f(100000)}到达软上限）`
            },
            cost() { return new ExpantaNum(60) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.red_ele.points.add(1).log10().pow(3).add(1)
                if (eff.gte(100000)) eff = eff.div(100000).pow(0.25).times(100000)
                return eff
            },
            effectDisplay() {
                return `^${format(upgradeEffect(this.layer, this.id))}`
            },
            tooltip() {
                let t = `公式：lg(红石琥珀金锭+1)${quickSUP('3')}+1<br>
                软上限后公式：${f(100000)}(lg(红石琥珀金锭+1)/${f(100000)})${quickSUP('0.25')}`
                return t
            },
        },
        13: {
            title: "使用RF替代耐久度",
            description() { return `解锁红石琥珀金相关的合成图纸` },
            canAfford() { return player.red_ele.points.gte(9000) },
            onPurchase() { player.red_ele.points = player.red_ele.points.sub(9000) },
            currencyDisplayName() { return `红石粉 + ${f(9000)}红石琥珀金锭` },
            currencyInternalName: "points",
            currencyLayer: redstone,
            cost() { return new ExpantaNum(2.5e209) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        14: {
            title: "致密黄金扭曲",
            description() { return `“黄金时间扭曲”的效果基数+1.5` },
            canAfford() { return player.red_ele.points.gte(9000) },
            onPurchase() { player.red_ele.points = player.red_ele.points.sub(9000) },
            currencyDisplayName() { return `红石粉 + ${f(9000)}红石琥珀金锭` },
            currencyInternalName: "points",
            currencyLayer: redstone,
            cost() { return new ExpantaNum(2.75e236) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        15: {
            title: "红石琥珀金手柄",
            description() { return `二阶等级从5开始，每级将红石琥珀金传导线圈的合成倍率变为${f(this.base())}倍` },
            canAfford() { return player.red_ele.points.gte(5e28) },
            onPurchase() { player.red_ele.points = player.red_ele.points.sub(5e28) },
            currencyDisplayName() { return `红石粉 + ${f(5e28)}红石琥珀金锭` },
            currencyInternalName: "points",
            currencyLayer: redstone,
            cost() { return new ExpantaNum('1e545') },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            base() {
                let b = d(5)
                if (hasCraftingItem(412)) b = b.add(tmp.wood.logEffects.darkOak)
                return b
            },
            effect() {
                let eff = this.base().pow(player.tiers[0].max(4).sub(4))
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：${f(this.base())}${quickSUP('二阶等级-4')}`
                return t
            },
        },
        21: {
            title: "红石琥珀金大板",
            description() { return `红石信号的强度上限变为原来的${f(1e10)}x，并使其效果变为原来的^1.1` },
            canAfford() { return player.red_ele.points.gte(5e30) },
            onPurchase() { player.red_ele.points = player.red_ele.points.sub(5e30) },
            currencyDisplayName() { return `红石粉 + ${f(5e30)}红石琥珀金锭` },
            currencyInternalName: "points",
            currencyLayer: redstone,
            cost() { return new ExpantaNum('1e583') },
            unlocked() { return hasUpgrade(this.layer, 15) },
        },
        22: {
            title: "红石琥珀金齿轮",
            description() { return `额外等级卡能额外提升的等级上限+5，额外等级卡的力量+1` },
            canAfford() { return player.red_ele.points.gte(5e30) },
            onPurchase() { player.red_ele.points = player.red_ele.points.sub(5e30) },
            currencyDisplayName() { return `红石粉 + ${f(5e30)}红石琥珀金锭` },
            currencyInternalName: "points",
            currencyLayer: redstone,
            cost() { return new ExpantaNum('1e641') },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        23: {
            title: "红石琥珀金电池",
            description() { return `不稳红石矿石出现的概率变为原来的${f(1e32)}x` },
            canAfford() { return player.red_ele.points.gte(5e35) },
            onPurchase() { player.red_ele.points = player.red_ele.points.sub(5e35) },
            currencyDisplayName() { return `红石粉 + ${f(5e35)}红石琥珀金锭` },
            currencyInternalName: "points",
            currencyLayer: redstone,
            cost() { return new ExpantaNum('1e668') },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        24: {
            title: "红石琥珀金逻辑合成器",
            description() { return `合成速度变为10x` },
            canAfford() { return player.red_ele.points.gte(3e40) },
            onPurchase() { player.red_ele.points = player.red_ele.points.sub(3e40) },
            currencyDisplayName() { return `红石粉 + ${f(3e40)}红石琥珀金锭` },
            currencyInternalName: "points",
            currencyLayer: redstone,
            cost() { return new ExpantaNum('1e742') },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        25: {
            title: "红石琥珀金计时器",
            description() { return `“黄金时间扭曲”的效果底数+20` },
            canAfford() { return player.red_ele.points.gte(3e44) },
            onPurchase() { player.red_ele.points = player.red_ele.points.sub(3e44) },
            currencyDisplayName() { return `红石粉 + ${f(3e44)}红石琥珀金锭` },
            currencyInternalName: "points",
            currencyLayer: redstone,
            cost() { return new ExpantaNum('1e785') },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
    },

    clickables: {
        11: {
            title: "提供充能",
            display() {
                return `按住3秒，给红石琥珀金锭充能，产出同等数量的充能红石琥珀金锭<br>
                倍率：${fw(this.mult())}<br>
                进度：${ftl(player.red_ele.chargingProgress)}/${ftl(3)}`
            },
            canClick() { return player.red_ele.points.gte(1) && hasCraftingItem(362) },
            onHold_diff() {
                player.red_ele.chargingProgress = player.red_ele.chargingProgress.add(diffout)
            },
            mult() {
                let m = d(1)
                m = m.times(player[ct].items[362])
                return m
            },
            unlocked() { return hasNormalAchievement(137) },
            style() {
                let s = {
                    'min-height': '120px',
                    'width': '300px',
                    'border-radius': '5px',
                }
                if (this.canClick()) s.background = "linear-gradient(45deg, #c6ae49 0%, #f8ef85 20%, #ffff98 50%, #fffcbc 70%, #eee155 90%, #6c5e23 100%)",
                    s['border-color'] = '#fc0000'
                return s
            },
        },
    },

    update(diff) {
        if (player.red_ele.points.gt(player.red_ele.best)) player.red_ele.best = player.red_ele.points

        if (player.red_ele.chargingProgress.gte(3)) {
            player.red_ele.chargingProgress = d(0)
            player.red_ele.points = player.red_ele.points.sub(tmp.red_ele.clickables[11].mult.min(player.red_ele.points))
            player.red_ele.charged = player.red_ele.charged.add(tmp.red_ele.clickables[11].mult.min(player.red_ele.points))
        }

        if (hasMilestone(emerald, 2)) player.red_ele.charged = player.red_ele.charged.add(tmp.red_ele.clickables[11].mult.times(diff).div(3))
    },

    chargedEff() {
        let eff = player.red_ele.charged.add(1).log10().pow(0.8)
        return eff
    },

    toElectrumUpgRow3() {
        let eff = tmp.red_ele.chargedEff.times(player.redstone.destabilized)
        return eff
    },

    tabFormat: [
        ["display-text", function () { return getPointsDisplay() }],
        ["display-text", () => `你有 ${textResourceStyle(formatWhole(player.red_ele.points), 'text-redstoneElectrum')} 红石琥珀金锭`],
        "blank",
        ["display-text", () => `你同时最多拥有 ${formatWhole(player.red_ele.best)} 红石琥珀金锭`],
        "blank",
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "upgrades": {
                unlocked() { return tmp.red_ele.layerShown },
                name() { return '升级' },
                content: [
                    ["blank", "15px"],
                    ["upgrades", [1, 2, 3, 4]],
                ]
            },
            "charge": {
                unlocked() { return hasNormalAchievement(137) },
                name() { return '充能' },
                content: [
                    ["blank", "15px"],
                    "clickables",
                    ["display-text", function () {
                        return `你有 ${textResourceStyle(formatWhole(player[ct].items[362]), 'text-redstoneElectrum')} 红石琥珀金传导线圈`
                    }],
                    ["display-text", function () {
                        return `你有 ${textResourceStyle(formatWhole(player.red_ele.charged), 'text-redstoneElectrum')} 充能红石琥珀金锭`
                    }],
                    ["display-text", function () {
                        return `使每个不稳红石矿石提供 ${textResourceStyle(format(tmp.red_ele.chargedEff), 'text-redstoneElectrum')} 生效的第三行琥珀金升级的购买数量`
                    }],
                    ["display-text", function () {
                        if (shiftDown) return `效果公式：lg(充能红石琥珀金锭+1)${quickSUP('0.8')}`
                    }],
                    ["display-text", function () {
                        return `你当前额外获得了 ${textStyle_h2("+" + format(tmp.red_ele.toElectrumUpgRow3), 'fc0000')} 的第三行琥珀金升级的购买数量`
                    }],
                ]
            },
        },
    },
})

//世界1层21：铂
addLayer("platinum", {
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: d(0),             // "points" is the internal name for the main resource of the layer.
            ore: d(0),
            molten: d(0),
            miningLevel: d(3),
            rarity: d(280),
            progress: d(0),
            findingProgress: d(0),
            hardness: d(7200),
            destroying: false,
            finding: false,
            found: false,
            singularity: d(0),
        }
    },

    color: "#c8fbff",                       // The color for this layer, which affects many elements.
    nodeStyle: {
        "background": "linear-gradient(90deg, #62d1f3 0%, #c8fbff 30%, #ffffff 50%, #aae3ff 80%, #476fbe 100%)",
    },
    resource: "铂锭",            // The name of this layer's main prestige resource.
    symbol: "铂",
    row: 1,                                 // The row this layer is on (0 is the first row).
    position: 20,
    baseResource: "points",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.points },  // A function to return the current amount of baseResource.

    requires: d(10),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "normal",                         // Determines the formula used for calculating prestige currency.
    exponent: 0.5,                          // "normal" prestige gain is (currency^exponent).
    layerShown() { return hasNormalAchievement(146) },

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        let m = d(1)                            // 合金的gainMult是给对应合金倍率的？
        if (hasUpgrade(platinum, 11)) m = m.times(upgradeEffect(platinum, 11))
        if (hasUpgrade(obsidian, 11)) m = m.times(2000)
        if (hasCraftingItem(402)) m = m.times(5)
        if (hasCraftingItem(431)) m = m.times(tmp.diamond.flawlessEff)
        if (hasMilestone(sing_fus, 10)) m = m.times(buyableEffect(sing_fus, 33))
        return m
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return d(1)
    },

    doReset() {
        return undefined
    },

    upgrades: {
        11: {
            title: "粗铂",
            description: "最高的时运附魔等级在LX(60)之后加成铂矿石挖掘倍率",
            currencyInternalName: "ore",
            currencyDisplayName: "铂矿石",
            currencyLayer: platinum,
            cost() { return new ExpantaNum(15) },
            unlocked() { return tmp.platinum.layerShown },
            effect() {
                let eff = d(2).pow(tmp.redstone.highestFortuneLv.sub(60).max(0))
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：2${quickSUP('时运-60')}`
                return t
            },
        },
        12: {
            title: "铂连锁",
            description: "解锁铂矿石的连锁挖掘",
            currencyInternalName: "ore",
            currencyDisplayName: "铂矿石",
            currencyLayer: platinum,
            cost() { return new ExpantaNum(15000) },
            unlocked() { return hasUpgrade(platinum, this.id - 1) },
        },
        13: {
            title: "铂不稳定",
            description: "每个不稳红石矿石将铂矿石连锁倍率变为10x",
            currencyInternalName: "ore",
            currencyDisplayName: "铂矿石",
            currencyLayer: platinum,
            cost() { return new ExpantaNum(45000) },
            unlocked() { return hasUpgrade(platinum, this.id - 1) },
            effect() {
                let eff = d(10).pow(player.redstone.destabilized.max(0))
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：10${quickSUP('不稳红石矿石')}`
                return t
            },
        },
        14: {
            title: "铂不稳连锁",
            description: "每个不稳红石矿石将铂矿石连锁率增加5%（上限+95%）",
            currencyInternalName: "ore",
            currencyDisplayName: "铂矿石",
            currencyLayer: platinum,
            cost() { return new ExpantaNum(200000000) },
            unlocked() { return hasUpgrade(platinum, this.id - 1) },
            effect() {
                let eff = d(0.05).times(player.redstone.destabilized.max(0)).min(0.95)
                return eff
            },
            effectDisplay() {
                return `+${formatPercent(upgradeEffect(this.layer, this.id))}`
            },
            tooltip() {
                let t = `公式：不稳红石矿石·0.05`
                return t
            },
        },
        15: {
            title: "白金奖杯",
            description: "解锁铂锭的熔炼配方",
            currencyInternalName: "ore",
            currencyDisplayName: "铂矿石",
            currencyLayer: platinum,
            cost() { return new ExpantaNum(1e9) },
            unlocked() { return hasUpgrade(platinum, this.id - 1) },
        },
        21: {
            title: "某强力合金的原材料",
            description: "3x铂锭熔炼倍率，1e50x一次挖掘的红石矿石数量，且生成的时运附魔等级+3",
            cost() { return new ExpantaNum(30) },
            unlocked() { return hasUpgrade(platinum, 15) },
        },
        22: {
            title: "铂图纸",
            description: "解锁铂相关的合成图纸",
            cost() { return new ExpantaNum(125) },
            unlocked() { return hasUpgrade(platinum, this.id - 1) },
        },
        23: {
            title: "铂锁定倍率",
            description: "铂矿石数量的^0.1倍增铂锭熔炼倍率",
            currencyInternalName: "ore",
            currencyDisplayName: "铂矿石",
            currencyLayer: platinum,
            cost() { return new ExpantaNum(2e18) },
            unlocked() { return hasUpgrade(platinum, this.id - 1) },
            effect() {
                let eff = player.platinum.ore.max(1).pow(0.1)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：铂矿石${quickSUP('0.1')}`
                return t
            },
        },
        24: {
            title: "铂外壳红石器械",
            description: "铂锭以指数加成第11~13红石升级的效果 （到^2到达硬上限）",
            cost() { return new ExpantaNum(50000) },
            unlocked() { return hasUpgrade(platinum, this.id - 1) },
            effect() {
                let eff = player.platinum.points.add(10).log10().root(2).div(10).add(1).min(2)
                return eff
            },
            effectDisplay() {
                return `^${format(upgradeEffect(this.layer, this.id))}`
            },
            tooltip() {
                let t = `公式：0.1lg(铂锭+10)${quickSUP('0.5')}+1`
                return t
            },
        },
        25: {
            title: "铂齿轮",
            description: "需求：二阶等级6<br>5x一次挖掘的钻石矿石数量，红石升级8的效果变为3x",
            canAfford() { return player.tiers[0].gte(6) },
            cost() { return new ExpantaNum(150000) },
            unlocked() { return hasUpgrade(platinum, this.id - 1) },
        },
    },

    clickables: {
        11: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = "点击寻找"
                return d
            },
            canClick() { return !player.platinum.finding && !player.platinum.destroying && !player.platinum.found && isAtLocation('overworld') },
            onClick() {
                if (!player.platinum.finding) player.platinum.finding = true
            },
            unlocked() { return tmp.platinum.layerShown },
            style() {
                return {
                    'min-height': '50px',
                    'width': '120px',
                    'font-size': '20px'
                }
            },
        },
        12: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = "点击挖掘"
                return d
            },
            canClick() { return !player.platinum.destroying && player.platinum.found },
            onClick() {
                if (!player.platinum.destroying) player.platinum.destroying = true
            },
            unlocked() { return tmp.platinum.layerShown },
            style() {
                return {
                    'min-height': '50px',
                    'width': '120px',
                    'font-size': '20px'
                }
            },
        },
    },

    bars: {
        platinumFinding: {
            direction: RIGHT,
            width: 360,
            height: 60,
            display() { return `找矿进度: ${format(player.platinum.findingProgress)}/${format(rarity(platinum))}` },
            progress() { let p = player.platinum.findingProgress.div(rarity(platinum)); if (player.platinum.found) p = d(1); return p },
            unlocked() { return tmp.platinum.layerShown },
            fillStyle() { return { "background-color": `${tmp[this.layer].color}` } },
            baseStyle() { return { "background-color": "rgba(0,0,0,0)" } },
            textStyle() { return { "color": "#476fbe" } },
        },
        platinumDestroying: {
            direction: RIGHT,
            width: 360,
            height: 60,
            display() { return `进度: ${format(player.platinum.progress)}/${format(hardness(platinum))}` },
            progress() { return player.platinum.progress.div(hardness(platinum)) },
            unlocked() { return tmp.platinum.layerShown },
            fillStyle() { return { "background-color": `${tmp[this.layer].color}` } },
            baseStyle() { return { "background-color": "rgba(0,0,0,0)" } },
            textStyle() { return { "color": "#476fbe" } },
        },
    },

    update(diff) {
        if (player.platinum.finding) player.platinum.findingProgress = player.platinum.findingProgress.add(player.copper.speed.times(diff))
        if (player.platinum.findingProgress.gte(rarity(gold))) player.platinum.findingProgress = d(0),
            player.platinum.finding = false,
            player.platinum.found = true

        if (player.platinum.destroying) player.platinum.progress = player.platinum.progress.add(player.stone.speed.times(diff))
        if (player.platinum.progress.gte(hardness(platinum))) player.platinum.progress = d(0),
            player.platinum.found = false,
            player.platinum.destroying = false,
            player.platinum.ore = player.platinum.ore.add(tmp.platinum.gainMult.times(d(Math.random()).lte(tmp.platinum.chainChance) && hasUpgrade(platinum, 12) ? tmp.platinum.chainMult : d(1)))

        if (player.platinum.points.gt(player.platinum.best)) player.platinum.best = player.platinum.points
    },

    chainChance() {
        let c = d(0.05)
        if (hasUpgrade(platinum, 14)) c = c.add(upgradeEffect(platinum, 14))
        return c
    },

    chainMult() {
        let m = d(1)
        if (hasUpgrade(platinum, 12)) m = d(10)
        if (hasUpgrade(platinum, 13)) m = m.times(upgradeEffect(platinum, 13))
        m = m.floor()
        return m
    },

    chainExpectation() {
        let e = d(0)
        let m = tmp.platinum.gainMult
        let cm = tmp.platinum.chainMult
        let c = tmp.platinum.chainChance.max(1e-10)
        e = m.times(cm).add(m.times(d(1).div(c).sub(1))).times(c)
        return e
    },

    tabFormat: [
        ["display-text", function () { return getPointsDisplay() }],
        ["display-text", () => `你有 ${textResourceStyle(formatWhole(player.platinum.ore), 'text-platinum')} 铂矿石`],
        ["display-text", () => `你有 ${textResourceStyle(formatWhole(player.platinum.points), 'text-platinum')} 铂锭`],
        "blank",
        ["display-text", () => `你同时最多拥有 ${formatWhole(player.platinum.best)} 铂锭`],
        "blank",
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "dig": {
                unlocked() { return tmp.platinum.layerShown },
                name() { return '挖掘' },
                content: [
                    ["blank", "15px"],
                    ["row", [["bar", "platinumFinding"], "blank", ["clickable", 11],]],
                    "blank",
                    ["row", [["bar", "platinumDestroying"], "blank", ["clickable", 12],]],
                    "blank",
                    ["display-text", function () { return player.platinum.found ? `你找到了一处铂矿石` : `你尚未找到铂矿石` }],
                    "blank",
                    ["display-text", function () { return `找矿速度：${format(player.copper.speed)}/秒` }],
                    ["display-text", function () { return `挖掘速度：${format(player.stone.speed)}/秒` }],
                    ["display-text", function () { return `破坏一次的铂矿石获取数量：${textResourceStyle(formatWhole(tmp.platinum.gainMult), 'text-platinum')}` }],
                    ["display-text", function () { if (hasUpgrade(platinum, 12)) return `连锁挖掘率：${textResourceStyle(formatPercent(tmp.platinum.chainChance), 'text-platinum')}` }],
                    ["display-text", function () { if (hasUpgrade(platinum, 12)) return `连锁倍数：${textResourceStyle(f(tmp.platinum.chainMult) + "x", 'text-platinum')}` }],
                    ["display-text", function () {
                        if (hasUpgrade(platinum, 12)) {
                            if (!shiftDown)
                                return `连锁成功后的铂矿石获取数量：${textResourceStyle(fw(tmp.platinum.gainMult.times(tmp.platinum.chainMult)), 'text-platinum')}（按shift查看期望值）`
                            if (shiftDown)
                                return `铂矿石获取期望：${textResourceStyle(f(tmp.platinum.chainExpectation), 'text-platinum')}`
                        }
                    }
                    ],
                    ["display-text", function () { return `稀有度：${formatWhole(rarity(platinum))}` }],
                    ["display-text", function () { return `硬度：${formatWhole(hardness(platinum))}` }],
                    ["display-text", function () { return `挖掘等级：3` }],
                    ["display-text", function () { return `需要在主世界挖掘` }],
                ]
            },
            "upgrades": {
                unlocked() { return tmp.platinum.layerShown },
                name() { return '升级' },
                content: [
                    ["blank", "15px"],
                    ["upgrades", [1, 2, 3, 4]],
                ]
            },
        },
    },
})

//世界1层22：钻石
addLayer("diamond", {
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: d(0),             // "points" is the internal name for the main resource of the layer.
            ore: d(0),
            molten: d(0),
            miningLevel: d(4),
            rarity: d(560),
            progress: d(0),
            findingProgress: d(0),
            hardness: d(10800),
            destroying: false,
            finding: false,
            found: false,
            flawless: d(0),
            showMult: true,
            t3flawless: false,
            singularity: d(0),
        }
    },

    color: "#a2fbea",                       // The color for this layer, which affects many elements.
    resource: "钻石",            // The name of this layer's main prestige resource.
    symbol: "钻石",
    row: 1,                                 // The row this layer is on (0 is the first row).
    position: 21,
    baseResource: "points",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.points },  // A function to return the current amount of baseResource.

    requires: d(10),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "normal",                         // Determines the formula used for calculating prestige currency.
    exponent: 0.5,                          // "normal" prestige gain is (currency^exponent).
    layerShown() { return hasNormalAchievement(146) },

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        let m = d(1)                            // 合金的gainMult是给对应合金倍率的？
        if (hasUpgrade(platinum, 25)) m = m.times(5)
        if (hasUpgrade(diamond, 14)) m = m.times(upgradeEffect(diamond, 14))
        if (hasUpgrade(obsidian, 11)) m = m.times(100)
        if (hasCraftingItem(431)) m = m.times(tmp.diamond.flawlessEff)
        return m
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return d(1)
    },

    minimumGain() {
        let g = d(1)
        if (hasUpgrade(diamond, 13)) g = g.times(upgradeEffect(diamond, 13))
        return g
    },
    maximumGain() {
        let g = d(1)
        if (hasUpgrade(diamond, 13)) g = g.times(upgradeEffect(diamond, 13))
        if (hasUpgrade(diamond, 15)) g = g.times(tmp.redstone.fortuneEff)
        return g
    },
    minimumGainT() {
        let g = tmp.diamond.minimumGain
        g = g.times(tmp.diamond.gainMult)
        g = g.floor()
        return g
    },
    maximumGainT() {
        let g = tmp.diamond.maximumGain
        g = g.times(tmp.diamond.gainMult)
        g = g.floor()
        return g
    },

    doReset() {
        return undefined
    },

    upgrades: {
        11: {
            title: "超频传导",
            description: "每秒自动合成2000%的红石琥珀金传导线圈",
            cost() { return new ExpantaNum(15) },
            unlocked() { return tmp.diamond.layerShown },
        },
        12: {
            title: "镶钻",
            description() { return `钻石以指数加成第1红石升级的效果` },
            canAfford() { return player.diamond.points.gte(100) },
            onPurchase() { player.diamond.points = player.diamond.points.sub(100) },
            currencyDisplayName() { return `琥珀金锭 + ${fw(100)}钻石` },
            currencyInternalName: "points",
            currencyLayer: electrum,
            cost() { return new ExpantaNum('1e800') },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effPowerFactor() {
                let p = d(0.75)
                if (hasUpgrade(diamond, 44)) p = p.add(0.06)
                return p
            },
            effect() {
                let eff = d(10).pow(player.diamond.points.add(1).log10().pow(this.effPowerFactor()))
                return eff
            },
            effectDisplay() {
                return `^${format(upgradeEffect(this.layer, this.id))}`
            },
            tooltip() {
                let t = `公式：10${quickSUP('lg(钻石+1)' + quickSUP(f(this.effPowerFactor())))}`
                return t
            },
        },
        13: {
            title: "矿石-宝石互增：钻石(1/2)",
            description() { return `钻石矿石加成钻石获取` },
            currencyDisplayName() { return `钻石矿石` },
            currencyInternalName: "ore",
            currencyLayer: diamond,
            cost() { return new ExpantaNum(100) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let ore = player.diamond.ore
                let exp = d(0.24).sub(ore.max(1).log10().div(1000)).max(0.124)
                let eff = ore.add(1).pow(exp)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：(钻石矿石+1)${quickSUP('max(0.24-0.001lg(钻石矿石), 0.124)')}` // 在1e116钻石矿石到达0.124指数
                return t
            },
        },
        14: {
            title: "矿石-宝石互增：钻石(2/2)",
            description() { return `钻石加成一次挖掘的钻石矿石数量` },
            cost() { return new ExpantaNum(400) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.diamond.points.times(3).add(1).pow(0.23)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：(钻石·3)+1${quickSUP('0.23')}`
                return t
            },
        },
        15: {
            title: "用时运镐挖钻石吧！",
            description() { return `最高的时运附魔等级现在也能影响钻石的获取（倍增范围上界）` },
            cost() { return new ExpantaNum(3333) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        21: {
            title: "钻石工具",
            description() { return `解锁钻石相关的合成图纸` },
            canAfford() { return player.diamond.points.gte(15000000) },
            onPurchase() { player.diamond.points = player.diamond.points.sub(15000000) },
            currencyDisplayName() { return `铂锭 + ${fw(15000000)}钻石` },
            currencyInternalName: "points",
            currencyLayer: platinum,
            cost() { return new ExpantaNum(2000000) },
            unlocked() { return hasUpgrade(this.layer, 15) },
        },
        22: {
            title: "无暇提升",
            description() { return `基础无暇钻石获取变为3x` },
            currencyDisplayName() { return `无暇钻石` },
            currencyInternalName: "flawless",
            currencyLayer: diamond,
            cost() { return new ExpantaNum(30) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        23: {
            title: "时运加成-量",
            description() { return `最高的时运附魔等级在CCXXV(225)开始加成至少二阶的无暇钻石挖掘获取` },
            currencyDisplayName() { return `无暇钻石` },
            currencyInternalName: "flawless",
            currencyLayer: diamond,
            cost() { return new ExpantaNum(180) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = tmp.redstone.highestFortuneLv.max(224).sub(224).pow(1.25).add(1)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：(时运-224)${quickSUP('1.25')}+1`
                return t
            },
        },
        24: {
            title: "时运加成-阶",
            description() {
                let des = `最高的时运附魔等级在CCLV(255)开始加成基础无暇钻石出现概率（同时影响三个阶，硬上限在MMDCCXXXIX(${f(2739)})，+828.33%）`
                if (hasUpgrade(obsidian, 32)) des = `最高的时运附魔等级在CCLV(255)开始加成基础无暇钻石出现概率`
                return des
            },
            cost() { return new ExpantaNum(5e19) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let hc = 8.28 + 1 / 300
                if (hasUpgrade(obsidian, 32)) hc = d(Infinity)
                let eff = tmp.redstone.highestFortuneLv.max(254).sub(254).div(300).min(hc)
                return eff
            },
            effectDisplay() {
                return `+${formatPercent(upgradeEffect(this.layer, this.id))}`
            },
            tooltip() {
                let t = `公式：(时运-254)/300`
                return t
            },
        },
        25: {
            title: "数量增强-一阶",
            description() { return `你版面上的一阶及以上无暇钻石数量加成基础无暇钻石获取` },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            currencyDisplayName() { return `无暇钻石` },
            currencyInternalName: "flawless",
            currencyLayer: diamond,
            cost() { return new ExpantaNum(15000) },
            effect() {
                let f = 0
                for (i = 0; i < 25; i++) {
                    if (getGridData(diamond, getEveryGridIDArray(5, 5)[i]) > 1)
                        f++
                }
                f = d(f)
                let eff = f.add(1).pow(1.25)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：(数量+1)${quickSUP('1.25')}`
                return t
            },
        },
        31: {
            title: "总算来了",
            description() { return `移除第3石头升级的硬上限` },
            cost() { return new ExpantaNum(1e22) },
            unlocked() { return hasUpgrade(this.layer, 25) },
        },
        32: {
            title: "原版工具的光辉-木头",
            description() { return `深色橡木原木的效果变得更强` },
            currencyDisplayName() { return `木头` },
            currencyInternalName: "points",
            currencyLayer: wood,
            cost() { return new ExpantaNum('e1e44') },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        33: {
            title: "原版工具的光辉-石头",
            description() { return `你现在在挖掘石头时获得（平滑）玄武岩` },
            currencyDisplayName() { return `石头` },
            currencyInternalName: "points",
            currencyLayer: stone,
            cost() { return new ExpantaNum('e7e44') },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        34: {
            title: "原版工具的光辉-铁",
            description() { return `需求：30玄武岩<br>将铁桶的持有上限变为原来的16x，你立刻获得405个铁桶，^100第1红石升级的效果` },
            canAfford() { return player.stone.basalt.gte(30) },
            onPurchase() {
                player[ct].items[122] = player[ct].items[122].add(405)
            },
            currencyDisplayName() { return `铁锭` },
            currencyInternalName: "points",
            currencyLayer: iron,
            cost() { return new ExpantaNum('1e6300000') },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        35: {
            title: "原版工具的光辉-金",
            description() { return `“扭曲黑洞：间隔”不再有等级上限。且等级超出75的部分提供“扭曲黑洞：力量”免费等级` },
            currencyDisplayName() { return `金锭` },
            currencyInternalName: "points",
            currencyLayer: gold,
            cost() { return new ExpantaNum('1e56000') },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        41: {
            title: "数量增强-二阶",
            description() { return `需求：${f('ee50')}经验<br>你版面上的二阶及以上无暇钻石数量加成挖掘至少二阶的无暇钻石获取` },
            canAfford() { return player.points.gte('ee50') },
            cost() { return new ExpantaNum(5e27) },
            unlocked() { return hasUpgrade(this.layer, 35) },
            effect() {
                if (hasMilestone(emerald, 1)) return d(25).pow(1.35)
                let f = 0
                for (i = 0; i < 25; i++) {
                    if (getGridData(diamond, getEveryGridIDArray(5, 5)[i]) > 2)
                        f++
                }
                f = d(f)
                let eff = f.add(1).pow(1.35)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：(数量+1)${quickSUP('1.35')}`
                return t
            },
        },
        42: {
            title: "数量增强-三阶",
            description() { return `你版面上的三阶无暇钻石数量加成挖掘三阶的无暇钻石获取` },
            cost() { return new ExpantaNum(1e30) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                if (hasMilestone(emerald, 1)) return d(25).pow(2.25)
                let f = 0
                for (i = 0; i < 25; i++) {
                    if (getGridData(diamond, getEveryGridIDArray(5, 5)[i]) == 4)
                        f++
                }
                f = d(f)
                let eff = f.add(1).pow(2.25)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：(数量+1)${quickSUP('2.25')}`
                return t
            },
        },
        43: {
            title: "不稳态额外等级卡",
            description() { return `每1个不稳红石矿石提升额外等级卡的升级上限，每10个不稳红石矿石增量1点额外等级卡的力量` },
            cost() { return new ExpantaNum(3.2e32) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.redstone.destabilized.max(0)
                return eff
            },
            effect2() {
                let eff = player.redstone.destabilized.div(10).max(0).floor()
                return eff
            },
            effectDisplay() {
                return `上限：+${formatWhole(upgradeEffect(this.layer, this.id))}，力量：+${formatWhole(upgradeEffect2(this.layer, this.id))}`
            },
            tooltip() {
                let t = `公式：不稳红石矿石，⌊不稳红石矿石/10⌋`
                return t
            },
        },
        44: {
            title: "原版工具的光辉-钻石",
            canAfford() { return singularity(gold).gte(2) },
            description() { return `需求：拥有2金奇点<br>第2钻石升级的效果变得更强` },
            cost() { return new ExpantaNum(1e36) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        45: {
            title: "挖掘还需继续……",
            description() { return `需求：32不稳红石矿石<br>5x黑曜石获取` },
            canAfford() { return player.redstone.destabilized.gte(32) },
            cost() { return new ExpantaNum(1e37) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
    },

    clickables: {
        11: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = "点击寻找"
                return d
            },
            canClick() { return !player.diamond.finding && !player.diamond.destroying && !player.diamond.found && isAtLocation('overworld') },
            onClick() {
                if (!player.diamond.finding) player.diamond.finding = true
            },
            unlocked() { return tmp.diamond.layerShown },
            style() {
                return {
                    'min-height': '50px',
                    'width': '120px',
                    'font-size': '20px'
                }
            },
        },
        12: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = "点击挖掘"
                return d
            },
            canClick() { return !player.diamond.destroying && player.diamond.found && hasCraftingItem(402) },
            onClick() {
                if (!player.diamond.destroying) player.diamond.destroying = true
            },
            unlocked() { return tmp.diamond.layerShown },
            style() {
                return {
                    'min-height': '50px',
                    'width': '120px',
                    'font-size': '20px'
                }
            },
        },
        21: {
            display() {
                let d = "精准采集模式："
                d += player.redstone.silk_touch ? "开" : "关"
                return d
            },
            canClick() { return true },
            onClick() { player.redstone.silk_touch = !player.redstone.silk_touch },
            unlocked() { return hasUpgrade(redstone, 35) },
            style() {
                return {
                    'min-height': '50px',
                    'width': '200px',
                    'font-size': '20px'
                }
            },
        },
        31: {
            title() {
                let t = "刷新矿石"
                return t
            },
            display() {
                let d = `找到钻石矿石时可以刷新5x5的区域`
                return d
            },
            canClick() { return player.diamond.found && !player.diamond.destroying },
            onClick() {
                let chance = tmp.diamond.flawlessChanceReal
                let chanceArr = [chance[1], chance[2], chance[3]]
                if (hasUpgrade(obsidian, 32)) chanceArr.push(chance[4])
                for (i = 0; i < 25; i++) {
                    let random = Math.random()
                    if (!hasUpgrade(obsidian, 32)) {
                        if (random <= chanceArr[2]) player.diamond.grid[getEveryGridIDArray(5, 5)[i]] = 4
                        else if (random <= chanceArr[1]) player.diamond.grid[getEveryGridIDArray(5, 5)[i]] = 3
                        else if (random <= chanceArr[0]) player.diamond.grid[getEveryGridIDArray(5, 5)[i]] = 2
                        else player.diamond.grid[getEveryGridIDArray(5, 5)[i]] = 1
                    }
                    else {
                        if (random <= chanceArr[3]) player.diamond.grid[getEveryGridIDArray(5, 5)[i]] = 5
                        else if (random <= chanceArr[2]) player.diamond.grid[getEveryGridIDArray(5, 5)[i]] = 4
                        else if (random <= chanceArr[1]) player.diamond.grid[getEveryGridIDArray(5, 5)[i]] = 3
                        else if (random <= chanceArr[0]) player.diamond.grid[getEveryGridIDArray(5, 5)[i]] = 2
                        else player.diamond.grid[getEveryGridIDArray(5, 5)[i]] = 1
                    }
                }
                player.diamond.found = false
            },
            unlocked() { return hasCraftingItem(431) },
            style() {
                return {
                    'min-height': '80px',
                    'width': '180px',
                }
            },
        },
        41: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = "切换显示："
                d += player.diamond.showMult ? '倍率' : '概率'
                return d
            },
            canClick() { return true },
            onClick() {
                player.diamond.showMult = !player.diamond.showMult
            },
            unlocked() { return hasCraftingItem(431) },
            style() {
                return {
                    'min-height': '50px',
                    'width': '180px',
                    'font-size': '20px'
                }
            },
        },
    },

    grid: {
        rows: 5, // If these are dynamic make sure to have a max value as well!
        cols: 5,
        getStartData(id) {
            return 0
        },
        getUnlocked(id) { // Default
            return hasCraftingItem(431)
        },
        getCanClick(data, id) {
            return data >= 1
        },
        onClick(data, id) {
            if (data >= 2) {
                player[this.layer].grid[id] = 0
                player.diamond.flawless = player.diamond.flawless.add(tmp.diamond.flawlessMult[data - 1])
            }

            if (data == 4 && !player.diamond.t3flawless) player.diamond.t3flawless = true

            let arr = getEveryGridIDArray(5, 5)
            for (let i = 0; i < arr.length; i++) {
                player.diamond.grid[arr[i]] = 0
            }
        },
        getTitle(data, id) {
            return
        },
        getStyle(data, id) {
            let s = {
                'background-color': 'rgba(0,0,0,0)',
                'border-color': 'white',
                'height': '60px',
                'width': '60px',
                margin: '5px',
            }
            if (data >= 1) s['background-color'] = '#a2fbea'
            if (data == 2) s['box-shadow'] = '0 0 20px white'
            else if (data == 3) s['box-shadow'] = '0 0 20px #a2fbea'
            else if (data == 4) s['box-shadow'] = '0 0 20px violet'
            else if (data == 5) s['box-shadow'] = '0 0 20px #ffad00'
            return s
        },
    },

    flawlessMult: {
        1() {
            let m = d(1)
            if (hasUpgrade(diamond, 22)) m = m.times(3)
            if (hasUpgrade(diamond, 25)) m = m.times(upgradeEffect(diamond, 25))
            if (hasUpgrade(obsidian, 34)) m = m.times(upgradeEffect(obsidian, 14))
            m = m.floor()
            return m
        },
        2() {
            let m = this[1]().times(5)
            if (hasUpgrade(diamond, 23)) m = m.times(upgradeEffect(diamond, 23))
            if (hasUpgrade(diamond, 41)) m = m.times(upgradeEffect(diamond, 41))
            if (hasUpgrade(obsidian, 25)) m = m.times(upgradeEffect(obsidian, 14))
            m = m.floor()
            return m
        },
        3() {
            let m = this[2]().times(10)
            if (hasUpgrade(diamond, 42)) m = m.times(upgradeEffect(diamond, 42))
            if (hasUpgrade(obsidian, 14)) m = m.times(upgradeEffect(obsidian, 14))
            m = m.floor()
            return m
        },
        4() {
            let m = this[3]().times(1000000)
            if (hasUpgrade(emerald, 12)) m = m.times(upgradeEffect(emerald, 12))
            m = m.floor()
            return m
        },
    },

    flawlessChance: {
        1() {
            let c = 0.05
            if (hasUpgrade(diamond, 24)) c = c + upgradeEffect(diamond, 24).min(1e300).toNumber()
            return c
        },
        2() {
            let c = this[1]() / 5
            c = Math.min(this[1](), c)
            return c
        },
        3() {
            let c = this[2]() / 5
            c = Math.min(this[2](), c)
            return c
        },
        4() {
            let c = this[3]() / 20
            c = Math.min(this[3](), c)
            return c
        },
    },

    flawlessChanceReal: {
        1() {
            let c = tmp.diamond.flawlessChance[1]
            c = Math.min(c, 1)
            return c
        },
        2() {
            let c = tmp.diamond.flawlessChance[2]
            if (hasUpgrade(obsidian, 32)) c = Math.min(c, 3 / 4)
            else c = Math.min(c, 2 / 3)
            return c
        },
        3() {
            let c = tmp.diamond.flawlessChance[3]
            if (hasUpgrade(obsidian, 32)) c = Math.min(c, 2 / 4)
            else c = Math.min(c, 1 / 3)
            return c
        },
        4() {
            let c = tmp.diamond.flawlessChance[4]
            c = Math.min(c, 1 / 4)
            return c
        },
    },

    flawlessEff() {
        let eff = player.diamond.flawless.add(1).max(1).pow(1.25)
        return eff
    },

    bars: {
        diamondFinding: {
            direction: RIGHT,
            width: 360,
            height: 60,
            display() { return `找矿进度: ${format(player.diamond.findingProgress)}/${format(rarity(diamond))}` },
            progress() { let p = player.diamond.findingProgress.div(rarity(diamond)); if (player.diamond.found) p = d(1); return p },
            unlocked() { return tmp.diamond.layerShown },
            fillStyle() { return { "background-color": `${tmp[this.layer].color}` } },
            baseStyle() { return { "background-color": "rgba(0,0,0,0)" } },
            textStyle() { return { "color": "#137274" } },
        },
        diamondDestroying: {
            direction: RIGHT,
            width: 360,
            height: 60,
            display() { return `进度: ${format(player.diamond.progress)}/${format(hardness(diamond))}` },
            progress() { return player.diamond.progress.div(hardness(diamond)) },
            unlocked() { return tmp.diamond.layerShown },
            fillStyle() { return { "background-color": `${tmp[this.layer].color}` } },
            baseStyle() { return { "background-color": "rgba(0,0,0,0)" } },
            textStyle() { return { "color": "#137274" } },
        },
    },

    update(diff) {
        if (player.diamond.finding) player.diamond.findingProgress = player.diamond.findingProgress.add(player.copper.speed.times(diff))
        if (player.diamond.findingProgress.gte(rarity(diamond))) player.diamond.findingProgress = d(0),
            player.diamond.finding = false,
            player.diamond.found = true

        if (player.diamond.destroying) player.diamond.progress = player.diamond.progress.add(player.stone.speed.times(diff))
        if (player.diamond.progress.gte(hardness(diamond))) {
            player.diamond.progress = d(0),
                player.diamond.found = false,
                player.diamond.destroying = false
            if (player.redstone.silk_touch) {
                player.diamond.ore = player.diamond.ore.add(tmp.diamond.gainMult)
            }
            else player.diamond.points = player.diamond.points.add(tmp.diamond.maximumGainT.sub(tmp.diamond.minimumGainT).times(Math.random()).add(tmp.diamond.minimumGainT).round())
        }

        if (player.diamond.points.gt(player.diamond.best)) player.diamond.best = player.diamond.points
    },

    tabFormat: [
        ["display-text", function () { return getPointsDisplay() }],
        ["display-text", () => `你有 ${textStyle_h2(formatWhole(player.diamond.ore), 'a2fbea')} 钻石矿石`],
        ["display-text", () => `你有 ${textStyle_h2(formatWhole(player.diamond.points), 'a2fbea')} 钻石`],
        "blank",
        ["display-text", () => `你同时最多拥有 ${formatWhole(player.diamond.best)} 钻石`],
        "blank",
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "dig": {
                unlocked() { return tmp.diamond.layerShown },
                name() { return '挖掘' },
                content: [
                    ["blank", "15px"],
                    ["row", [["bar", "diamondFinding"], "blank", ["clickable", 11],]],
                    "blank",
                    ["row", [["bar", "diamondDestroying"], "blank", ["clickable", 12],]],
                    ["blank", function () { return hasUpgrade(redstone, 35) ? "17px" : '0' }],
                    [function () { return hasUpgrade(redstone, 35) ? "clickables" : "blank" }, function () { return hasUpgrade(redstone, 35) ? [2] : '0' }],
                    "blank",
                    ["display-text", function () { return player.diamond.found ? `你找到了一处钻石矿石` + (hasCraftingItem(402) ? "" : " 挖掘等级不足") : `你尚未找到钻石矿石` }],
                    "blank",
                    ["display-text", function () { return `找矿速度：${format(player.copper.speed)}/秒` }],
                    ["display-text", function () { return `挖掘速度：${format(player.stone.speed)}/秒` }],
                    ["display-text", function () { return `破坏单个钻石矿石可获得钻石的范围：${textStyle_h2(fw(tmp.diamond.minimumGain) + "~" + fw(tmp.diamond.maximumGain), 'a2fbea')}` }],
                    ["display-text", function () {
                        let t
                        if (player.redstone.silk_touch && !shiftDown || !player.redstone.silk_touch && shiftDown) t = `一次破坏钻石矿石的数量：${textStyle_h2(fw(tmp.diamond.gainMult), 'a2fbea')} （需要精准采集）`
                        else t = `一次破坏的钻石获取范围：${textStyle_h2(fw(tmp.diamond.minimumGainT) + "~" + fw(tmp.diamond.maximumGainT), 'a2fbea')}`
                        if (!shiftDown) t += " （按shift显示另一种资源）"
                        return t
                    }],
                    ["display-text", function () { if (hasUpgrade(diamond, 15)) return `你最高有 ${textStyle_h2("时运 " + roman(tmp.redstone.highestFortuneLv), 'a2fbea')}` }],
                    ["display-text", function () { if (hasUpgrade(diamond, 15)) return `将破坏单个钻石矿石可获得钻石的范围上界变为 ${textStyle_h2(f(tmp.redstone.fortuneEff) + "x", 'a2fbea')}` }],
                    "blank",
                    ["display-text", function () { return `精准采集是通用的，你在红石层级切换的精准采集模式在钻石层级也有效，反之亦然。未来的宝石类等各种挖掘不掉原矿的矿物均通用，未来不重复说明` }],
                    "blank",
                    ["display-text", function () { return `稀有度：${fw(rarity(diamond))}` }],
                    ["display-text", function () { return `硬度：${fw(hardness(diamond))}` }],
                    ["display-text", function () { return `挖掘等级：4` }],
                    ["display-text", function () { return `需要在主世界挖掘` }],
                    "blank",
                    ["display-text", function () { return `你需要挖掘等级大于等于4的镐才能挖掘钻石矿石！` }],
                ]
            },
            "upgrades": {
                unlocked() { return tmp.diamond.layerShown },
                name() { return '升级' },
                content: [
                    ["blank", "15px"],
                    ["upgrades", [1, 2, 3, 4]],
                ]
            },
            "flawless": {
                unlocked() { return hasCraftingItem(431) },
                name() { return '无暇' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { return `你有 ${textStyle_h2(formatWhole(player.diamond.flawless), 'a2fbea')} 无暇钻石，铂矿石和钻石矿石挖掘倍率变为${textStyle_h2(f(tmp.diamond.flawlessEff) + 'x', 'a2fbea')}` }],
                    ["display-text", function () { if (shiftDown) return `效果公式：(无暇钻石+1)${quickSUP(1.25)}` }],
                    "blank",
                    ["row", [["bar", "diamondFinding"], "blank", ["clickable", 11],]],
                    "blank",
                    "grid",
                    "blank",
                    ["clickables", [3]],
                    "blank",
                    ["display-text", function () { return `当你找到钻石矿石时你可以将其置入上方5x5场地（这个时候你不可能矿石倍率还小于25）` }],
                    ["display-text", function () { return `当有格子有阴影时说明这一格是无暇钻石` }],
                    ["display-text", function () {
                        let t = `无暇钻石有三种品质，从低到高显示为白色、钻石配色、紫色的阴影。挖掘高品质倍率更高，但更难出现`
                        if (hasUpgrade(obsidian, 32)) t = `无暇钻石有四种品质，从低到高显示为白色、钻石配色、紫色、金黄色的阴影。挖掘高品质倍率更高，但更难出现`
                        return t
                    }],
                    ["display-text", function () { return `所有格子都可以挖掘，但是无暇钻石更脆弱。挖掘一个格子会清空其他所有格子` }],
                    ["display-text", function () {
                        let multArr = []
                        let chanceArr = []
                        let numchar = ['一', '二', '三']
                        if (hasUpgrade(obsidian, 32)) numchar.push('四')
                        for (let i = 0; i < numchar.length; i++) {
                            multArr.push(`${numchar[i]}阶品质${i < numchar.length ? '及以上' : ''}无暇钻石倍率：${textStyle_h2(fw(tmp.diamond.flawlessMult[i + 1]), 'a2fbea')}`)
                            chanceArr.push(`${numchar[i]}阶品质${i < numchar.length ? '及以上' : ''}无暇钻石概率：${textStyle_h2(fp(tmp.diamond.flawlessChanceReal[i + 1]) + " " + (tmp.diamond.flawlessChance[i + 1] > 1 - (i / numchar.length) ? `(${fp(tmp.diamond.flawlessChance[i + 1])})` : ""), 'a2fbea')}`)
                        }
                        let multStr = multArr.join('<br>')
                        let chanceStr = chanceArr.join('<br>')
                        return !player.diamond.showMult ? chanceStr : multStr
                    }],
                    ["clickables", [4]],
                    "blank",
                    ["display-text", function () {
                        let t = `三种品质的概率硬上限被设定为各1/3，若超过设定值，原值会写在括号内`
                        if (hasUpgrade(obsidian, 32)) t = `四种品质的概率硬上限被设定为各1/4，若超过设定值，原值会写在括号内`
                        return t
                    }],
                ],
            },
        },
    },
})

function resetFlowingProgress(id) {
    player.obsidian.grid[id].Wprogress = 0,
        player.obsidian.grid[id].Lprogress = 0,
        player.obsidian.grid[id].Dprogress = 0,
        player.obsidian.grid[id].flowing = false
}

function mineObsidian() {
    let arr = getEveryGridIDArray(1, 4)
    let obsarr = []
    for (let i = 0; i < arr.length; i++) {
        if (player.obsidian.grid[arr[i]].block == 4) obsarr.push(arr[i])
    }
    if (obsarr.length == 0) return
    let id = obsarr[Math.floor(Math.random() * obsarr.length)]
    player.obsidian.grid[id].block = 0 //挖掉黑曜石
    resetFlowingProgress(id) //重置流动进度(如果有疏漏)
}

//世界1层23：黑曜石
addLayer("obsidian", {
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: d(0),             // "points" is the internal name for the main resource of the layer.
            ore: d(0),
            molten: d(0),
            miningLevel: d(5),
            progress: d(0),
            findingProgress: d(0),
            hardness: d(1093500),
            destroying: false,
            crying: d(0),
            placeBlock: "none",
            placed: {
                water: false, //是否放置了水
                lava: false,  //是否放置了熔岩
            },
            placeCooldown: 0, //放置冷却
            dust: d(0),
        }
    },

    color: "#392a50",                       // The color for this layer, which affects many elements.
    resource: "黑曜石",            // The name of this layer's main prestige resource.
    symbol: "黑曜石",
    row: 1,                                 // The row this layer is on (0 is the first row).
    position: 22,
    baseResource: "points",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.points },  // A function to return the current amount of baseResource.

    requires: d(10),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "normal",                         // Determines the formula used for calculating prestige currency.
    exponent: 0.5,                          // "normal" prestige gain is (currency^exponent).
    layerShown() { return hasNormalAchievement(151) || hasCraftingItem(421) },

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        let m = d(1)                            // 合金的gainMult是给对应合金倍率的？
        if (hasUpgrade(diamond, 45)) m = m.times(5)
        if (hasUpgrade(obsidian, 12)) m = m.times(upgradeEffect(obsidian, 12))
        if (hasUpgrade(obsidian, 13)) m = m.times(upgradeEffect(obsidian, 13))
        if (hasCraftingItem(441)) m = m.times(10)
        if (hasUpgrade(obsidian, 21)) m = m.times(upgradeEffect(obsidian, 21))
        if (hasUpgrade(obsidian, 22)) m = m.times(upgradeEffect(obsidian, 22))
        if (hasUpgrade(obsidian, 31)) m = m.times(upgradeEffect(obsidian, 31))
        if (hasCraftingItem(461)) m = m.times(100000)
        m = m.floor()
        return m
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return d(1)
    },

    doReset() {
        return undefined
    },

    created() { //检测黑曜石是否创建
        let arr = getEveryGridIDArray(1, 4)
        let obs = 0
        for (let i = 0; i < arr.length; i++) {
            if (player.obsidian.grid[arr[i]].block == 4) obs++
        }
        return obs >= 1
    },

    upgrades: {
        11: {
            title: "黑曜石打磨",
            description() {
                return `${f(2000)}x铂矿石获取和铂锭熔炼倍率，且100x一次挖掘的钻石矿石数量`
            },
            cost() { return new ExpantaNum(2) },
            unlocked() { return tmp.obsidian.layerShown },
        },
        12: {
            title: "黑耀之力",
            canAfford() { return player.tiers[0].gte(13) },
            description() {
                let des = `需求：二阶等级13<br>你版面上产生的黑曜石格子数量加成黑曜石获取`
                if (hasUpgrade(obsidian, 31)) des = `需求：二阶等级13<br>5x黑曜石获取`
                return des
            },
            cost() { return new ExpantaNum(30) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                if (hasUpgrade(obsidian, 31)) return d(5)
                let o = 0
                for (i = 0; i < 4; i++) {
                    if (getGridData(obsidian, getEveryGridIDArray(1, 4)[i]).block == 4)
                        o++
                }
                o = d(o)
                let eff = o.add(1)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：数量+1`
                if (hasUpgrade(obsidian, 31)) t = `公式：不需要公式了`
                return t
            },
        },
        13: {
            title: "玄武岩三角洲",
            description() {
                return `玄武岩加成黑曜石获取`
            },
            cost() { return new ExpantaNum(125) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effPowerFactor() {
                let p = d(0.15)
                if (hasUpgrade(obsidian, 33)) p = p.times(3)
                return p
            },
            effect() {
                let eff = player.stone.basalt.max(0).add(1).pow(this.effPowerFactor())
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：(玄武岩+1)${quickSUP(f(this.effPowerFactor()))}`
                return t
            },
        },
        14: {
            title: "无暇膨胀",
            description() {
                let des = `黑曜石加成挖掘三阶无暇钻石的获取`
                if (hasUpgrade(obsidian, 25)) des = `黑曜石同时加成挖掘二、三阶无暇钻石的获取倍率`
                if (hasUpgrade(obsidian, 34)) des = `黑曜石同时加成挖掘一、二、三阶无暇钻石的获取倍率`
                return des
            },
            cost() { return new ExpantaNum(500) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.obsidian.points.max(0).times(20).add(1).root(2)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：(黑曜石·20+1)${quickSUP('0.5')}`
                return t
            },
        },
        15: {
            title: "坚硬和稳固",
            description() { return `解锁黑曜石相关的合成图纸` },
            canAfford() { return player.obsidian.points.gte(500) },
            onPurchase() { player.obsidian.points = player.obsidian.points.sub(500) },
            currencyDisplayName() { return `钻石 + ${fw(500)}黑曜石` },
            currencyInternalName: "points",
            currencyLayer: diamond,
            cost() { return new ExpantaNum(1e41) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        21: {
            title: "批量倒出",
            description() { return `熔岩在${f(1.44e13)}mB之后加成黑曜石获取` },
            currencyDisplayName() { return `mB 熔岩` },
            currencyInternalName: "lava",
            currencyLayer: iron,
            cost() { return new ExpantaNum(4.32e14) },
            unlocked() { return hasUpgrade(this.layer, 15) },
            effect() {
                let eff = player.iron.lava.div(1.44e13).max(1).pow(0.33)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：(熔岩/${f(1.44e13)})${quickSUP('0.33')}`
                return t
            },
        },
        22: {
            title: "批量冷却",
            description() { return `水在${f(1e14)}mB之后加成黑曜石获取` },
            currencyDisplayName() { return `mB 水` },
            currencyInternalName: "water",
            currencyLayer: iron,
            cost() { return new ExpantaNum(4.32e14) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.iron.water.div(1e14).max(1).pow(0.32)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：(水/${f(1e14)})${quickSUP('0.32')}`
                return t
            },
        },
        23: {
            title: "蓄水器：超频",
            description() { return `蓄水器的效率基于玄武岩获得倍率加成` },
            cost() { return new ExpantaNum(100000) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effPowerFactor() {
                let p = d(0.8)
                if (hasUpgrade(obsidian, 33)) p = p.times(1.5)
                return p
            },
            effect() {
                let eff = player.stone.basalt.max(1).pow(this.effPowerFactor())
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：玄武岩${quickSUP(f(this.effPowerFactor()))}`
                return t
            },
        },
        24: {
            title: "熔岩炉：超频",
            description() { return `熔岩炉的效率基于玄武岩获得倍率加成` },
            cost() { return new ExpantaNum(1000000) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effPowerFactor() {
                let p = d(0.8)
                if (hasUpgrade(obsidian, 33)) p = p.times(1.5)
                return p
            },
            effect() {
                let eff = player.stone.basalt.max(1).pow(this.effPowerFactor())
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：玄武岩${quickSUP(f(this.effPowerFactor()))}`
                return t
            },
        },
        25: {
            title: "无暇膨胀^2",
            description() { return `第4黑曜石升级现在可以同时影响第二第三阶无暇钻石挖掘获取（相当于效果^2）` },
            canAfford() { return player.obsidian.points.gte(10000000) },
            onPurchase() { player.obsidian.points = player.obsidian.points.sub(10000000) },
            currencyDisplayName() { return `钻石 + ${fw(10000000)}黑曜石` },
            currencyInternalName: "points",
            currencyLayer: diamond,
            cost() { return new ExpantaNum(1e47) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        31: {
            title: "特殊阵法",
            description() { return `需求：72不稳红石矿石<br>第2黑曜石升级可无视条件获得最大加成，如果你的版面上各有一格水、熔岩、石头和黑曜石，黑曜石获取就变为${f(202507)}x` },
            canAfford() { return player.obsidian.points.gte(30000000) && player.redstone.destabilized.gte(72) },
            onPurchase() { player.obsidian.points = player.obsidian.points.sub(30000000) },
            currencyDisplayName() { return `钻石 + ${fw(30000000)}黑曜石` },
            currencyInternalName: "points",
            currencyLayer: diamond,
            cost() { return new ExpantaNum(1e54) },
            unlocked() { return hasUpgrade(this.layer, 25) },
            effect() {
                if (hasMilestone(emerald, 1)) return d(202507)
                let o = 0
                let w = 0
                let l = 0
                let s = 0
                for (i = 0; i < 4; i++) {
                    if (getGridData(obsidian, getEveryGridIDArray(1, 4)[i]).block == 1)
                        w++
                    if (getGridData(obsidian, getEveryGridIDArray(1, 4)[i]).block == 2)
                        l++
                    if (getGridData(obsidian, getEveryGridIDArray(1, 4)[i]).block == 3)
                        s++
                    if (getGridData(obsidian, getEveryGridIDArray(1, 4)[i]).block == 4)
                        o++
                }
                return (o >= 1 && w >= 1 && l >= 1 && s >= 1) ? d(202507) : d(1)
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
        },
        32: {
            title: "133.33%的完美",
            description() { return `现在你有机会遇到四阶的无暇钻石，基础四阶倍率为${f(1e6)}x，阴影为金黄色，基础概率为0.01%，移除第9钻石升级的硬上限` },
            canAfford() { return player.obsidian.points.gte(5e12) },
            onPurchase() { player.obsidian.points = player.obsidian.points.sub(5e12) },
            currencyDisplayName() { return `红石粉 + ${fw(5e12)}黑曜石` },
            currencyInternalName: "points",
            currencyLayer: redstone,
            cost() { return new ExpantaNum('1e65000') },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        33: {
            title: "热门景点",
            description() { return `第3黑曜石升级的效果变为^3，第8~9黑曜石升级的效果变为^1.5` },
            canAfford() { return player.obsidian.points.gte(1e13) },
            onPurchase() { player.obsidian.points = player.obsidian.points.sub(1e13) },
            currencyDisplayName() { return `钻石 + ${fw(1e13)}黑曜石` },
            currencyInternalName: "points",
            currencyLayer: diamond,
            cost() { return new ExpantaNum(1e81) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        34: {
            title: "无暇膨胀^3",
            description() { return `第4黑曜石升级现在可以同时影响第一第二第三阶无暇钻石挖掘获取（相当于效果^3）` },
            canAfford() { return player.obsidian.points.gte(5e16) },
            onPurchase() { player.obsidian.points = player.obsidian.points.sub(5e16) },
            currencyDisplayName() { return `钻石 + ${fw(5e16)}黑曜石` },
            currencyInternalName: "points",
            currencyLayer: diamond,
            cost() { return new ExpantaNum(1e87) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        35: {
            title: "高山群系之中",
            description() { return `你的RF生物群系指南针有了反应，它的指针指向了高山群系。解锁世界1层级：绿宝石` },
            canAfford() { return player.obsidian.points.gte(1e18) },
            onPurchase() { player.obsidian.points = player.obsidian.points.sub(1e18) },
            currencyDisplayName() { return `红石粉 + ${fw(1e18)}黑曜石` },
            currencyInternalName: "points",
            currencyLayer: redstone,
            cost() { return new ExpantaNum('1e120000') },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
    },

    grid: {
        rows: 1, // If these are dynamic make sure to have a max value as well!
        cols: 4,
        getStartData(id) {
            return {
                block: 0, //0 空, 1 水, 2 熔岩, 3 石头, 4 黑曜石, 5 熔岩烤鸡
                flowing: false, //是否流动
                Wprogress: 0, // 水流动进度
                Lprogress: 0, // 熔岩流动进度
                Dprogress: 0, // 消失进度
            }
        },
        getUnlocked(id) { // Default
            return hasCraftingItem(412)
        },
        getCanClick(data, id) {
            return (data.block != 4 && (data.block != 3 || player.obsidian.placeBlock == "remove")) && (player.obsidian.placeCooldown <= 0 || player.obsidian.placeBlock == "remove") && (player.obsidian.placeBlock != "remove" || !data.flowing) // 不能在黑曜石或石头上放置水或熔岩 黑曜石不可直接移除
        },
        onClick(data, id) {
            if (data.block == 5) {
                if (!hasAchievement('achievements', 100021)) {
                    doPopup("achievement", tmp.achievements.achievements[100021].name, "获得成就!", 3, tmp.achievements.color)
                    player.achievements.achievements.push(100021)
                    player.achievements.secret = player.achievements.secret.add(1)
                }
                player.StevesLavaChicken = player.StevesLavaChicken.add(1)
                data.block = 0 //吃掉了
            }
            else if (player.obsidian.placeBlock == "none") return
            else if (player.obsidian.placeBlock == "remove") {
                if (data.block != 4) {
                    if (data.block == 1 && !data.flowing) {
                        player.obsidian.placed.water = false
                    }
                    if (data.block == 2 && !data.flowing) {
                        player.obsidian.placed.lava = false
                    }
                    data.block = 0
                    resetFlowingProgress(id)
                }
            }
            else if (player.obsidian.placeBlock == "water") {
                if (data.block == 0) {
                    data.block = 1
                    resetFlowingProgress(id)
                    player.obsidian.placed.water = true // 放置了水
                    player.obsidian.placeCooldown = 5 // 放置冷却5秒
                    player.obsidian.placeBlock = "none" // 放置后清除放置状态
                }
                else if (data.block == 1) return
                else if (data.block == 2) {
                    if (data.flowing) {
                        data.block = 3
                        resetFlowingProgress(id) // 生成石头覆盖水因此放置水状态保持false
                        player.obsidian.placeBlock = "none" // 放置后清除放置状态
                        player.obsidian.placeCooldown = 5
                    }
                    else {
                        data.block = 4
                        resetFlowingProgress(id) // 同理
                        player.obsidian.placeBlock = "none" // 放置后清除放置状态
                        player.obsidian.placed.lava = false // 覆盖熔岩后清除放置熔岩状态
                        player.obsidian.placeCooldown = 5
                    }
                }
            }
            else if (player.obsidian.placeBlock == "lava") {
                if (data.block == 0) {
                    data.block = 2
                    resetFlowingProgress(id)
                    player.obsidian.placed.lava = true // 放置了熔岩
                    player.obsidian.placeCooldown = 5 // 放置冷却5秒
                    player.obsidian.placeBlock = "none" // 放置后清除放置状态
                }
                else if (data.block == 1) {
                    data.block = 4
                    resetFlowingProgress(id)
                    player.obsidian.placeCooldown = 5 // 放置冷却5秒
                    player.obsidian.placeBlock = "none" // 放置后清除放置状态
                    if (!data.flowing) { // 若为水源
                        player.obsidian.placed.water = false // 覆盖水后清除放置水状态
                    }
                }
                else if (data.block == 2) return
            }
            else if (player.obsidian.placeBlock == "chicken") { // 熔岩烤鸡彩蛋（隐藏成就）
                if (data.block == 2) {
                    data.block = 5,
                        resetFlowingProgress(id),
                        player.obsidian.placeCooldown = 5 // 放置冷却5秒
                    player.obsidian.placeBlock = "none" // 放置后清除放置状态
                    if (!data.flowing) { // 若为熔岩源
                        player.obsidian.placed.lava = false
                    }
                }
            }

        },
        getTitle(data, id) {
            let t = ""
            if (data.block == 0) t = '空'
            else if (data.block == 1) t = '水'
            else if (data.block == 2) t = '熔岩'
            else if (data.block == 3) t = '石头'
            else if (data.block == 4) t = '黑曜石'
            else if (data.block == 5) t = '熔岩烤鸡'
            if (data.flowing) t = '流动的' + t // 流动的水/熔岩
            return t
        },
        getStyle(data, id) {
            let style = {
                'min-height': '100px',
                'width': '100px',
                'font-size': '12px',
                'border-radius': '0',
                margin: '-1px',
            }
            let bgc
            if (data.block == 0) bgc = '#00000000', // 空
                style.color = 'white',
                style['border-color'] = 'white'
            else if (data.block == 1) bgc = '#2b3cf4' // 水
            else if (data.block == 2) bgc = '#d76013' // 熔岩
            else if (data.block == 3) bgc = '#4a4a4a' // 石头
            else if (data.block == 4) bgc = '#392a50' // 黑曜石
            if (data.flowing) bgc += '80' // 流动的水/熔岩 50%透明
            style['background-color'] = bgc
            if (data.block == 5) style['background-image'] = 'url("resources/game_pic/cooked_chicken.webp")', // 熔岩烤鸡
                style['image-rendering'] = 'pixelated',
                style['background-size'] = '100% 100%' // 熔岩烤鸡图片填充
            return style
        },
    },

    clickables: {
        11: {
            title() {
                let t = "选择水"
                return t
            },
            corItem: "water",
            canClick() { return player.obsidian.placeBlock != this.corItem && !player.obsidian.placed.water },
            onClick() {
                player.obsidian.placeBlock = this.corItem
            },
            unlocked() { return tmp.obsidian.layerShown },
            style() {
                return {
                    'min-height': '96px',
                    'width': '128px',
                    'background-color': '#2b3cf4',
                    'border-color': `${player.obsidian.placeBlock == this.corItem ? 'white' : 'rgba(0, 0, 0, 0.15)'}`
                }
            },
        },
        12: {
            title() {
                let t = "选择熔岩"
                return t
            },
            corItem: "lava",
            canClick() { return player.obsidian.placeBlock != this.corItem && !player.obsidian.placed.lava },
            onClick() {
                player.obsidian.placeBlock = this.corItem
            },
            unlocked() { return tmp.obsidian.layerShown },
            style() {
                return {
                    'min-height': '96px',
                    'width': '128px',
                    'background-color': '#d76013',
                    'border-color': `${player.obsidian.placeBlock == this.corItem ? 'white' : 'rgba(0, 0, 0, 0.15)'}`
                }
            },
        },
        13: {
            title() {
                let t = "移除模式"
                return t
            },
            corItem: "remove",
            canClick() { return player.obsidian.placeBlock != this.corItem },
            onClick() {
                player.obsidian.placeBlock = this.corItem
            },
            unlocked() { return tmp.obsidian.layerShown },
            style() {
                return {
                    'min-height': '96px',
                    'width': '128px',
                    'background-color': 'rgba(0,0,0,0)',
                    'color': 'white',
                    'border-color': `${player.obsidian.placeBlock == this.corItem ? 'white' : 'rgba(0, 0, 0, 0.15)'}`
                }
            },
        },
        21: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = "点击挖掘"
                return d
            },
            canClick() { return !player.obsidian.destroying && tmp.obsidian.layerShown && tmp.obsidian.created },
            onClick() {
                if (!player.obsidian.destroying) player.obsidian.destroying = true
            },
            unlocked() { return tmp.obsidian.layerShown },
            style() {
                return {
                    'min-height': '50px',
                    'width': '120px',
                    'font-size': '20px'
                }
            },
        },
        31: {
            title() {
                let t = "怎么有只鸡？"
                return t
            },
            corItem: "chicken",
            canClick() { return player.obsidian.placeBlock != this.corItem },
            onClick() {
                player.obsidian.placeBlock = this.corItem
            },
            unlocked() { return player.random > 0 && player.random < 30 }, //0~30，概率0.3% 期望5分33秒刷新一次
            style() {
                return {
                    'min-height': '48px',
                    'width': '90px',
                    'background-color': 'white',
                    'border-color': `${player.obsidian.placeBlock == this.corItem ? 'white' : 'rgba(0, 0, 0, 0.15)'}`,
                    'font-size': '7px',
                    left: '360px'
                }
            },
        },
    },

    update(diff) {
        if (player.obsidian.placeCooldown > 0) player.obsidian.placeCooldown = Math.max(player.obsidian.placeCooldown - diff, 0) // 放置冷却

        if (player.obsidian.destroying) player.obsidian.progress = player.obsidian.progress.add(player.stone.speed.times(diff))
        if (player.obsidian.progress.gte(hardness(obsidian))) player.obsidian.progress = d(0),
            player.obsidian.destroying = false,
            player.obsidian.points = player.obsidian.points.add(tmp.obsidian.gainMult),
            mineObsidian() // 挖掉黑曜石

        //流动逻辑
        let arr = getEveryGridIDArray(1, 4)
        let waterPos //源头
        let lavaPos //源头
        let waterFlPos = [] //流动水
        let lavaFlPos = [] //流动熔岩
        let stonePos = []
        let obsidianPos = []
        let grid = player.obsidian.grid
        for (let i = 0; i < arr.length; i++) {
            let id = arr[i]
            let data = grid[id]
            if (data.block == 1) {
                if (data.flowing) waterFlPos.push(id)
                else waterPos = id
            }
            else if (data.block == 2) {
                if (data.flowing) lavaFlPos.push(id)
                else lavaPos = id
            }
            else if (data.block == 3) stonePos.push(id) // 石头
            else if (data.block == 4) obsidianPos.push(id) // 黑曜石
        } //定位
        if (waterPos) {
            if (waterPos == 101) {
                if (grid[102].block != 1) player.obsidian.grid[102].Wprogress += (diff / player.gameSpeed)
                else if (grid[103].block != 1 && grid[102].block == 1) player.obsidian.grid[103].Wprogress += (diff / player.gameSpeed)
                else if (grid[104].block != 1 && grid[102].block == 1 && grid[103].block == 1) player.obsidian.grid[104].Wprogress += (diff / player.gameSpeed)
            }
            else if (waterPos == 102) {
                if (grid[101].block != 1) player.obsidian.grid[101].Wprogress += (diff / player.gameSpeed)
                if (grid[103].block != 1) player.obsidian.grid[103].Wprogress += (diff / player.gameSpeed)
                else if (grid[104].block != 1 && grid[103].block == 1) player.obsidian.grid[104].Wprogress += (diff / player.gameSpeed)
            }
            else if (waterPos == 103) {
                if (grid[102].block != 1) player.obsidian.grid[102].Wprogress += (diff / player.gameSpeed)
                else if (grid[101].block != 1 && grid[102].block == 1) player.obsidian.grid[101].Wprogress += (diff / player.gameSpeed)
                if (grid[104].block != 1) player.obsidian.grid[104].Wprogress += (diff / player.gameSpeed)
            }
            else if (waterPos == 104) {
                if (grid[103].block != 1) player.obsidian.grid[103].Wprogress += (diff / player.gameSpeed)
                else if (grid[102].block != 1 && grid[103].block == 1) player.obsidian.grid[102].Wprogress += (diff / player.gameSpeed)
                else if (grid[101].block != 1 && grid[103].block == 1 && grid[102].block == 1) player.obsidian.grid[101].Wprogress += (diff / player.gameSpeed)
            }
            if (waterFlPos.length >= 1) for (let i = 0; i < waterFlPos.length; i++) {
                let id = waterFlPos[i]
                player.obsidian.grid[id].Dprogress = 0
            }
        }
        else if (waterFlPos.length >= 1) for (let i = 0; i < waterFlPos.length; i++) {
            let id = waterFlPos[i]
            player.obsidian.grid[id].Dprogress += (diff / player.gameSpeed)
        }
        if (lavaPos) {
            if (lavaPos == 101) {
                if (grid[102].block != 2) player.obsidian.grid[102].Lprogress += (diff / player.gameSpeed)
                else if (grid[103].block != 2 && grid[102].block == 2) player.obsidian.grid[103].Lprogress += (diff / player.gameSpeed)
                else if (grid[104].block != 2 && grid[102].block == 2 && grid[103].block == 2) player.obsidian.grid[104].Lprogress += (diff / player.gameSpeed)
            }
            else if (lavaPos == 102) {
                if (grid[101].block != 2) player.obsidian.grid[101].Lprogress += (diff / player.gameSpeed)
                if (grid[103].block != 2) player.obsidian.grid[103].Lprogress += (diff / player.gameSpeed)
                else if (grid[104].block != 2 && grid[103].block == 2) player.obsidian.grid[104].Lprogress += (diff / player.gameSpeed)
            }
            else if (lavaPos == 103) {
                if (grid[102].block != 2) player.obsidian.grid[102].Lprogress += (diff / player.gameSpeed)
                else if (grid[101].block != 2 && grid[102].block == 2) gplayer.obsidian.gridrid[101].Lprogress += (diff / player.gameSpeed)
                if (grid[104].block != 2) player.obsidian.grid[104].Lprogress += (diff / player.gameSpeed)
            }
            else if (lavaPos == 104) {
                if (grid[103].block != 2) player.obsidian.grid[103].Lprogress += (diff / player.gameSpeed)
                else if (grid[102].block != 2 && grid[103].block == 2) player.obsidian.grid[102].Lprogress += (diff / player.gameSpeed)
                else if (grid[101].block != 2 && grid[103].block == 2 && grid[102].block == 2) player.obsidian.grid[101].Lprogress += (diff / player.gameSpeed)
            }
            if (lavaFlPos.length >= 1) for (let i = 0; i < lavaFlPos.length; i++) {
                let id = lavaFlPos[i]
                player.obsidian.grid[id].Dprogress = 0
            }
        }
        else if (lavaFlPos.length >= 1) for (let i = 0; i < lavaFlPos.length; i++) {
            let id = lavaFlPos[i]
            player.obsidian.grid[id].Dprogress += (diff / player.gameSpeed)
        }
        for (let i = 0; i < arr.length; i++) {
            let id = arr[i]
            let data = grid[id]
            if (data.Wprogress >= 5) {
                if (data.block == 0) data.block = 1,
                    data.flowing = true
                else if (data.block == 2) {
                    if (data.flowing) data.block = 3
                    else data.block = 4,
                        player.obsidian.placed.lava = false
                    data.flowing = false
                }
            }
            if (data.Lprogress >= 5) {
                if (data.block == 0) data.block = 2,
                    data.flowing = true
                else if (data.block == 1) {
                    data.block = 3
                    if (!data.flowing) {
                        player.obsidian.placed.water = false
                    }
                    data.flowing = false
                }
            }
            if (data.Dprogress >= 5) {
                if (data.flowing) data.block = 0,
                    resetFlowingProgress(id),
                    data.flowing = false
            } //666盐都不盐了把水流截断流动水不会消失（熔岩同理）
        }

        if (player.obsidian.points.gt(player.obsidian.best)) player.obsidian.best = player.obsidian.points
    },


    bars: {
        obsidianDestroying: {
            direction: RIGHT,
            width: 360,
            height: 60,
            display() { return `进度: ${format(player.obsidian.progress)}/${format(hardness(obsidian))}` },
            progress() { return player.obsidian.progress.div(hardness(obsidian)) },
            unlocked() { return tmp.obsidian.layerShown },
            fillStyle() { return { "background-color": "#392a50" } },
            baseStyle() { return { "background-color": "rgba(0,0,0,0)" } },
        },
    },

    tabFormat: [
        ["display-text", function () { return getPointsDisplay() }],
        ["display-text", () => `你有 ${textStyle_h2(formatWhole(player.obsidian.points), '392a50')} 黑曜石`],
        ["display-text", function () { if (hasCraftingItem(451)) return `你有 ${textStyle_h2(format(player.obsidian.dust), '392a50')} 黑曜石粉` }],
        "blank",
        ["display-text", () => `你同时最多拥有 ${formatWhole(player.obsidian.best)} 黑曜石`],
        "blank",
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "dig": {
                unlocked() { return tmp.obsidian.layerShown },
                name() { return '挖掘' },
                content: [
                    ["blank", "15px"],
                    "grid",
                    "blank",
                    ["clickables", [1]],
                    "blank",
                    ["display-text", function () { return `流体放置冷却：${ftl(player.obsidian.placeCooldown) + "/" + ftl(5)}` }],
                    "blank",
                    ["row", [["bar", "obsidianDestroying"], "blank", ["clickables", [2]],]],
                    "blank",
                    ["display-text", function () { return `挖掘速度：${format(player.stone.speed)}/秒` }],
                    ["display-text", function () { return `破坏一次的黑曜石获取数量：${textStyle_h2(formatWhole(tmp.obsidian.gainMult), '392a50')}` }],
                    ["display-text", function () { return `硬度：${formatWhole(hardness(obsidian))}` }],
                    ["display-text", function () { return `挖掘等级：5` }],
                    "blank",
                    ["display-text", function () { return `想要获得黑曜石，你需要先在上方面板产生一个黑曜石。它不能通过寻找获得` }],
                    ["display-text", function () { return `流体会流动，黑曜石通过水流向熔岩源获得。你也可以直接将熔岩倒在水上或者将水倒在熔岩源上` }],
                    ["display-text", function () { return `产生黑曜石必然会消耗一个熔岩源` }],
                    ["display-text", function () { return `若水接触流动熔岩会产生石头，还请注意` }],
                    ["display-text", function () { return `流体放置有5秒冷却，黑曜石不能被直接移除` }],
                    ["clickables", [3]],
                ]
            },
            "upgrades": {
                unlocked() { return tmp.obsidian.layerShown },
                name() { return '升级' },
                content: [
                    ["blank", "15px"],
                    ["upgrades", [1, 2, 3, 4]],
                ]
            },
            "crying": {
                unlocked() { return false }, //解锁于下界后，估计挺远的，和钴、阿迪特、下界合金坐一块
                name() { return '哭泣' },
                content: [
                    ["blank", "15px"],
                ]
            },
        },
    },
})


//世界1层24：绿宝石
addLayer("emerald", {
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: d(0),             // "points" is the internal name for the main resource of the layer.
            ore: d(0),
            molten: d(0),
            miningLevel: d(4),
            rarity: d(2240),
            progress: d(0),
            findingProgress: d(0),
            hardness: d(10800),
            destroying: false,
            finding: false,
            found: false,
            holy: d(0), //神圣绿宝石
            singularity: d(0),
        }
    },

    color: "#17dd61",                       // The color for this layer, which affects many elements.
    resource: "绿宝石",            // The name of this layer's main prestige resource.
    symbol: "绿宝石",
    row: 1,                                 // The row this layer is on (0 is the first row).
    position: 23,
    baseResource: "points",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.points },  // A function to return the current amount of baseResource.

    requires: d(10),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "normal",                         // Determines the formula used for calculating prestige currency.
    exponent: 0.5,                          // "normal" prestige gain is (currency^exponent).
    layerShown() { return hasNormalAchievement(156) },

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        let m = d(1)                            // 绿宝石矿倍率
        if (hasUpgrade(emerald, 13)) m = m.times(upgradeEffect(emerald, 13))
        if (hasUpgrade(emerald, 14)) m = m.times(upgradeEffect(emerald, 14))
        m = m.floor()
        return m
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return d(1)
    },

    minimumGain() {
        let g = d(1)
        return g
    },
    maximumGain() {
        let g = d(1)
        return g
    },
    minimumGainT() {
        let g = tmp.emerald.minimumGain
        g = g.times(tmp.emerald.gainMult)
        g = g.floor()
        return g
    },
    maximumGainT() {
        let g = tmp.emerald.maximumGain
        g = g.times(tmp.emerald.gainMult)
        g = g.floor()
        return g
    },

    tradeMult1() { //村民交易
        let m = d(1)
        if (hasUpgrade(emerald, 23)) m = m.times(upgradeEffect(emerald, 23))
        if (hasCraftingItem(472)) m = m.times(tmp.emerald.holyEff)
        return m
    },

    tradeMult2() { //村民交易
        let m = d(1)
        if (hasUpgrade(emerald, 34)) m = m.times(upgradeEffect(emerald, 34))
        if (hasUpgrade(experience, 34)) m = m.times(upgradeEffect(experience, 34))
        return m
    },

    tradeBaseGain1() {
        let pow = d(3)
        if (hasUpgrade(emerald, 24)) pow = pow.add(1)
        if (hasUpgrade(emerald, 25)) pow = pow.add(2)
        if (hasUpgrade(emerald, 31)) pow = pow.add(2)
        if (hasUpgrade(emerald, 32)) pow = pow.add(2)
        if (hasCraftingItem(472)) pow = pow.add(3.5)
        let g = player.iron.points.max(1).log10().div(1e7).pow(pow)
        return g
    },

    tradeBaseGain2() {
        let pow = d(3)
        let g = player.gold.points.max(1).log10().sub(3600000).max(0).div(10000).pow(pow)
        return g
    },

    tradeGain1() {
        return tmp.emerald.tradeBaseGain1.times(tmp.emerald.tradeMult1).floor()
    },

    tradeGain2() {
        return tmp.emerald.tradeBaseGain2.times(tmp.emerald.tradeMult2).floor()
    },

    doReset() {
        return undefined
    },

    upgrades: {
        11: {
            title: "翡翠绿",
            description() {
                return `强化玄武岩获取公式`
            },
            cost() { return new ExpantaNum(1) },
            unlocked() { return tmp.emerald.layerShown },
        },
        12: {
            title: "数量增强-四阶",
            description: "你无暇钻石版面上的四阶无暇钻石数量加成挖掘四阶无暇钻石的获取",
            canAfford() { return player.emerald.points.gte(5) },
            onPurchase() { player.emerald.points = player.emerald.points.sub(5) },
            currencyDisplayName() { return `红石粉 + ${fw(5)}绿宝石` },
            currencyInternalName: "points",
            currencyLayer: redstone,
            cost() { return new ExpantaNum('1.12e345678') },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                if (hasMilestone(emerald, 1)) return d(25).pow(10)
                let f = 0
                for (i = 0; i < 25; i++) {
                    if (getGridData(diamond, getEveryGridIDArray(5, 5)[i]) == 5)
                        f++
                }
                f = d(f)
                let eff = f.add(1).pow(10)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：(数量+1)${quickSUP(f(10))}`
                return t
            },
        },
        13: {
            title: "等级绿宝石",
            description: "二阶等级在20开始每一级将一次挖掘的绿宝石数量变为3x，第1红石升级的效果变为原来的^8",
            canAfford() { return player.emerald.points.gte(5) },
            onPurchase() { player.emerald.points = player.emerald.points.sub(5) },
            currencyDisplayName() { return `红石粉 + ${fw(5)}绿宝石` },
            currencyInternalName: "points",
            currencyLayer: redstone,
            cost() { return new ExpantaNum('1e400000') },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = d(3).pow(player.tiers[0].max(19).sub(19))
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：3${quickSUP('二阶等级-19')}`
                return t
            },
        },
        14: {
            title: "收藏意义更大的深层绿宝石矿石",
            description: "绿宝石矿石加成自身挖掘倍率",
            currencyDisplayName() { return `绿宝石矿石` },
            currencyInternalName: "ore",
            currencyLayer: emerald,
            cost() { return new ExpantaNum(45) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.emerald.ore.max(0).add(1).pow(0.5)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：(绿宝石矿石+1)${quickSUP('0.5')}`
                return t
            },
        },
        15: {
            title: "高山村庄",
            description: "你在高山群系发现了村庄。解锁交易",
            cost() { return new ExpantaNum(1500) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        21: {
            title: "红石回归指数",
            description: "红石粉自身也能以指数加成第1红石升级的效果，它不再局限于底数了（硬上限在^1.000e1,000）",
            cost() { return new ExpantaNum(250000) },
            unlocked() { return hasUpgrade(this.layer, 15) },
            effect() {
                let eff = d(10).pow(player.redstone.points.max(10).log10().div(30000).pow(0.75)).min('1e1000')
                return eff
            },
            effectDisplay() {
                return `^${format(upgradeEffect(this.layer, this.id))}`
            },
            tooltip() {
                let t = `公式：10${quickSUP('(lg(红石粉)/' + f(30000) + ')' + quickSUP('0.75'))}`
                return t
            },
        },
        22: {
            title: "更大的绿宝石加成",
            description: "绿宝石加成玄武岩获取，OoM^2起飞！",
            cost() { return new ExpantaNum(2500000) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.emerald.points.max(0).add(1).pow(0.77)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：(绿宝石+1)${quickSUP('0.77')}`
                return t
            },
        },
        23: {
            title: "绿宝石矿石收藏家",
            description: "绿宝石矿石加成工具匠的补货倍率",
            cost() { return new ExpantaNum(7500000) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.emerald.ore.max(0).add(1).pow(0.4)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：(绿宝石矿石+1)${quickSUP('0.4')}`
                return t
            },
        },
        24: {
            title: "工具匠 - 学徒",
            description: "强化铁锭收购绿宝石获取的公式",
            cost() { return new ExpantaNum(5e9) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        25: {
            title: "工具匠 - 老手",
            description: "强化铁锭收购绿宝石获取的公式^2",
            canAfford() { return player.emerald.points.gte(2e12) },
            onPurchase() { player.emerald.points = player.emerald.points.sub(2e12) },
            currencyDisplayName() { return `黑曜石 + ${fw(2e12)}绿宝石` },
            currencyInternalName: "points",
            currencyLayer: obsidian,
            cost() { return new ExpantaNum(1e40) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        31: {
            title: "工具匠 - 专家",
            description: "强化铁锭收购绿宝石获取的公式^3",
            canAfford() { return player.emerald.points.gte(1e17) },
            onPurchase() { player.emerald.points = player.emerald.points.sub(1e17) },
            currencyDisplayName() { return `黑曜石 + ${fw(1e17)}绿宝石` },
            currencyInternalName: "points",
            currencyLayer: obsidian,
            cost() { return new ExpantaNum(1e47) },
            unlocked() { return hasUpgrade(this.layer, 25) },
        },
        32: {
            title: "工具匠 - 大师",
            description: "强化铁锭收购绿宝石获取的公式^4",
            canAfford() { return player.emerald.points.gte(2.2222e22) },
            onPurchase() { player.emerald.points = player.emerald.points.sub(2.2222e22) },
            currencyDisplayName() { return `黑曜石 + ${fw(2.2222e22)}绿宝石` },
            currencyInternalName: "points",
            currencyLayer: obsidian,
            cost() { return new ExpantaNum(1e54) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        33: {
            title: "绿宝石抛光",
            description: "解锁绿宝石相关的合成图纸，一个磨粉机配方",
            canAfford() { return player.emerald.points.gte(3e28) },
            onPurchase() { player.emerald.points = player.emerald.points.sub(3e28) },
            currencyDisplayName() { return `黑曜石 + ${fw(3e28)}绿宝石` },
            currencyInternalName: "points",
            currencyLayer: obsidian,
            cost() { return new ExpantaNum(3e62) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        34: {
            title: "袭击前的风平浪静",
            description: "经验的OoM^2加成牧师的补货倍率",
            cost() { return new ExpantaNum(5e58) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.points.max(1e10).log10().log10()
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：lg(lg(经验))`
                return t
            },
        },
        35: {
            title: "我知道你急着想突破ee308，但先别急",
            description: "解锁世界1层级：知识精华",
            cost() { return new ExpantaNum(1e61) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
    },

    clickables: {
        11: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = "点击寻找"
                return d
            },
            canClick() { return !player.emerald.finding && !player.emerald.destroying && !player.emerald.found && isAtLocation('overworld') },
            onClick() {
                if (!player.emerald.finding) player.emerald.finding = true
            },
            unlocked() { return tmp.emerald.layerShown },
            style() {
                return {
                    'min-height': '50px',
                    'width': '120px',
                    'font-size': '20px'
                }
            },
        },
        12: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = "点击挖掘"
                return d
            },
            canClick() { return !player.emerald.destroying && player.emerald.found },
            onClick() {
                if (!player.emerald.destroying) player.emerald.destroying = true
            },
            unlocked() { return tmp.emerald.layerShown },
            style() {
                return {
                    'min-height': '50px',
                    'width': '120px',
                    'font-size': '20px'
                }
            },
        },
        21: {
            display() {
                let d = "精准采集模式："
                d += player.redstone.silk_touch ? "开" : "关"
                return d
            },
            canClick() { return true },
            onClick() { player.redstone.silk_touch = !player.redstone.silk_touch },
            unlocked() { return hasUpgrade(redstone, 35) },
            style() {
                return {
                    'min-height': '50px',
                    'width': '200px',
                    'font-size': '20px'
                }
            },
        },
    },

    milestones: {
        0: {
            requirementDescription() { return `到达二阶等级25` },
            effectDescription() { return `你最高的时运附魔等级现在自动更新为通过额外等级卡能到达的最高等级（解放双手！）` },
            done() { return player.tiers[0].gte(25) },
            unlocked() { return tmp.emerald.layerShown },
        },
        1: {
            requirementDescription() { return `到达二阶等级27` },
            effectDescription() { return `第11黑曜石升级的效果无论如何都会起效，第16和第17钻石升级和第2绿宝石升级的有效数量被视为25` },
            done() { return player.tiers[0].gte(27) },
            unlocked() { return tmp.emerald.layerShown },
        },
        2: {
            requirementDescription() { return `到达二阶等级50` },
            effectDescription() { return `每秒被动获取1/3的充能红石琥珀金锭` },
            done() { return player.tiers[0].gte(50) },
            unlocked() { return tmp.emerald.layerShown },
        },
    },

    bars: {
        emeraldFinding: {
            direction: RIGHT,
            width: 360,
            height: 60,
            display() { return `找矿进度: ${format(player.emerald.findingProgress)}/${format(rarity(emerald))}` },
            progress() { let p = player.emerald.findingProgress.div(rarity(emerald)); if (player.emerald.found) p = d(1); return p },
            unlocked() { return tmp.emerald.layerShown },
            fillStyle() { return { "background-color": `${tmp[this.layer].color}` } },
            baseStyle() { return { "background-color": "rgba(0,0,0,0)" } },
            textStyle() { return { "color": "#005400" } },
        },
        emeraldDestroying: {
            direction: RIGHT,
            width: 360,
            height: 60,
            display() { return `进度: ${format(player.emerald.progress)}/${format(hardness(emerald))}` },
            progress() { return player.emerald.progress.div(hardness(emerald)) },
            unlocked() { return tmp.emerald.layerShown },
            fillStyle() { return { "background-color": `${tmp[this.layer].color}` } },
            baseStyle() { return { "background-color": "rgba(0,0,0,0)" } },
            textStyle() { return { "color": "#005400" } },
        },
    },

    update(diff) {
        if (player.emerald.finding) player.emerald.findingProgress = player.emerald.findingProgress.add(player.copper.speed.times(diff))
        if (player.emerald.findingProgress.gte(rarity(emerald))) player.emerald.findingProgress = d(0),
            player.emerald.finding = false,
            player.emerald.found = true

        if (player.emerald.destroying) player.emerald.progress = player.emerald.progress.add(player.stone.speed.times(diff))
        if (player.emerald.progress.gte(hardness(emerald))) {
            player.emerald.progress = d(0),
                player.emerald.found = false,
                player.emerald.destroying = false
            if (player.redstone.silk_touch) {
                player.emerald.ore = player.emerald.ore.add(tmp.emerald.gainMult)
            }
            else player.emerald.points = player.emerald.points.add(tmp.emerald.maximumGainT.sub(tmp.emerald.minimumGainT).times(Math.random()).add(tmp.emerald.minimumGainT).round())
        }

        if (player.emerald.points.gt(player.emerald.best)) player.emerald.best = player.emerald.points

        if (hasUpgrade(emerald, 15)) player.emerald.points = player.emerald.points.add(tmp.emerald.tradeGain1.times(diff))
        if (hasCraftingItem(472)) player.emerald.holy = player.emerald.holy.add(tmp.emerald.tradeGain2.times(diff))
    },

    holyEff() {
        let eff = player.emerald.holy.add(1).pow(0.65).max(1)
        return eff
    },

    tabFormat: [
        ["display-text", function () { return getPointsDisplay() }],
        ["display-text", () => `你有 ${textStyle_h2(formatWhole(player.emerald.ore), '17dd61')} 绿宝石矿石`],
        ["display-text", () => `你有 ${textStyle_h2(formatWhole(player.emerald.points), '17dd61')} 绿宝石`],
        "blank",
        ["display-text", () => `你同时最多拥有 ${formatWhole(player.emerald.best)} 绿宝石`],
        "blank",
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "dig": {
                unlocked() { return tmp.emerald.layerShown },
                name() { return '挖掘' },
                content: [
                    ["blank", "15px"],
                    ["row", [["bar", "emeraldFinding"], "blank", ["clickable", 11],]],
                    "blank",
                    ["row", [["bar", "emeraldDestroying"], "blank", ["clickable", 12],]],
                    ["blank", function () { return hasUpgrade(redstone, 35) ? "17px" : '0' }],
                    [function () { return hasUpgrade(redstone, 35) ? "clickables" : "blank" }, function () { return hasUpgrade(redstone, 35) ? [2] : '0' }],
                    "blank",
                    ["display-text", function () { return player.emerald.found ? `你找到了一处绿宝石矿石` : `你尚未找到绿宝石矿石` }],
                    "blank",
                    ["display-text", function () { return `找矿速度：${format(player.copper.speed)}/秒` }],
                    ["display-text", function () { return `挖掘速度：${format(player.stone.speed)}/秒` }],
                    ["display-text", function () { return `破坏单个绿宝石矿石可获得绿宝石的范围：${textStyle_h2(fw(tmp.emerald.minimumGain) + "~" + fw(tmp.emerald.maximumGain), '17dd61')}` }],
                    ["display-text", function () {
                        let t
                        if (player.redstone.silk_touch && !shiftDown || !player.redstone.silk_touch && shiftDown) t = `一次破坏绿宝石矿石的数量：${textStyle_h2(fw(tmp.emerald.gainMult), '17dd61')} （需要精准采集）`
                        else t = `一次破坏的绿宝石获取范围：${textStyle_h2(fw(tmp.emerald.minimumGainT) + "~" + fw(tmp.emerald.maximumGainT), '17dd61')}`
                        if (!shiftDown) t += " （按shift显示另一种资源）"
                        return t
                    }],
                    //["display-text", function () { if (hasUpgrade(diamond, 15)) return `你最高有 ${textStyle_h2("时运 " + roman(tmp.redstone.highestFortuneLv), 'a2fbea')}` }],
                    //["display-text", function () { if (hasUpgrade(diamond, 15)) return `将破坏单个钻石矿石可获得钻石的范围上界变为 ${textStyle_h2(f(tmp.redstone.fortuneEff) + "x", 'a2fbea')}` }],
                    "blank",
                    ["display-text", function () { return `稀有度：${fw(rarity(emerald))}` }],
                    ["display-text", function () { return `硬度：${fw(hardness(emerald))}` }],
                    ["display-text", function () { return `挖掘等级：4` }],
                    ["display-text", function () { return `需要在主世界挖掘` }],
                ]
            },
            "upgrades": {
                unlocked() { return tmp.emerald.layerShown },
                name() { return '升级' },
                content: [
                    ["blank", "15px"],
                    ["upgrades", [1, 2, 3, 4]],
                ]
            },
            "milestones": {
                unlocked() { return tmp.emerald.layerShown },
                name() { return '里程碑' },
                content: [
                    ["blank", "15px"],
                    "milestones",
                ]
            },
            "trade": {
                unlocked() { return hasUpgrade(emerald, 15) },
                name() { return '交易' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { if (hasCraftingItem(472)) return `你有 ${textStyle_h2(formatWhole(player.emerald.holy), '17dd61')} 神圣绿宝石，工具匠补货倍率变为 ${textStyle_h2(f(tmp.emerald.holyEff) + "x", '17dd61')}` }],
                    ["display-text", function () { if (hasCraftingItem(472) && shiftDown) return `效果公式：(神圣绿宝石+1)${quickSUP('0.65')}` }],
                    "blank",
                    ["column", [
                        ["row",
                            [
                                ["raw-html", function () { return `<div class = "instant" style = "width : 150px">职业：工具匠</div>` }],
                                ["blank", ['170px', '60px']],
                                ["raw-html", function () { return `<div class = "instant" style = "width : 400px">收购：铁锭</div>` }],
                            ],
                            {
                                "background-color": "#005400",
                                width: "720px",
                                height: "40px",
                                border: '2px solid',
                                'border-color': "#17dd61",
                                'border-bottom-width': "1px",
                            }
                        ],
                        ["row",
                            [
                                ["raw-html", function () { return `<div class = "instant" style = "width : 150px">收购价</div>` }],
                                ["blank", ['170px', '60px']],
                                ["raw-html", function () { return `<div class = "instant" style = "width : 400px">${fw(player.iron.points)}铁锭→${fw(tmp.emerald.tradeBaseGain1)}绿宝石</div>` }],
                            ],
                            {
                                "background-color": "#002a00",
                                width: "720px",
                                height: "40px",
                                border: '2px solid',
                                'border-color': "#17dd61",
                                'border-top-width': "1px",
                                'border-bottom-width': "1px",
                            }
                        ],
                        ["row",
                            [
                                ["raw-html", function () { return `<div class = "instant" style = "width : 150px">补货倍数</div>` }],
                                ["blank", ['170px', '60px']],
                                ["raw-html", function () { return `<div class = "instant" style = "width : 400px">${f(tmp.emerald.tradeMult1)}x</div>` }],
                            ],
                            {
                                "background-color": "#005400",
                                width: "720px",
                                height: "40px",
                                border: '2px solid',
                                'border-color': "#17dd61",
                                'border-top-width': "1px",
                                'border-bottom-width': "1px",
                            }
                        ],
                        ["row",
                            [
                                ["raw-html", function () { return `<div class = "instant" style = "width : 150px">当前交易状态</div>` }],
                                ["blank", ['170px', '60px']],
                                ["raw-html", function () { return `<div class = "instant" style = "width : 400px">+${fw(tmp.emerald.tradeGain1)}绿宝石/s</div>` }],
                            ],
                            {
                                "background-color": "#002a00",
                                width: "720px",
                                height: "40px",
                                border: '2px solid',
                                'border-color': "#17dd61",
                                'border-top-width': "1px",
                            }
                        ],
                    ]],
                    "blank",
                    ["column", [
                        ["row",
                            [
                                ["raw-html", function () { return `<div class = "instant" style = "width : 150px">职业：牧师</div>` }],
                                ["blank", ['170px', '60px']],
                                ["raw-html", function () { return `<div class = "instant" style = "width : 400px">收购：金锭</div>` }],
                            ],
                            {
                                "background-color": "#005400",
                                width: "720px",
                                height: "40px",
                                border: '2px solid',
                                'border-color': "#17dd61",
                                'border-bottom-width': "1px",
                            }
                        ],
                        ["row",
                            [
                                ["raw-html", function () { return `<div class = "instant" style = "width : 150px">收购价</div>` }],
                                ["blank", ['170px', '60px']],
                                ["raw-html", function () { return `<div class = "instant" style = "width : 400px">${fw(player.gold.points)}金锭→${fw(tmp.emerald.tradeBaseGain2)}神圣绿宝石</div>` }],
                            ],
                            {
                                "background-color": "#002a00",
                                width: "720px",
                                height: "40px",
                                border: '2px solid',
                                'border-color': "#17dd61",
                                'border-top-width': "1px",
                                'border-bottom-width': "1px",
                            }
                        ],
                        ["row",
                            [
                                ["raw-html", function () { return `<div class = "instant" style = "width : 150px">补货倍数</div>` }],
                                ["blank", ['170px', '60px']],
                                ["raw-html", function () { return `<div class = "instant" style = "width : 400px">${f(tmp.emerald.tradeMult2)}x</div>` }],
                            ],
                            {
                                "background-color": "#005400",
                                width: "720px",
                                height: "40px",
                                border: '2px solid',
                                'border-color': "#17dd61",
                                'border-top-width': "1px",
                                'border-bottom-width': "1px",
                            }
                        ],
                        ["row",
                            [
                                ["raw-html", function () { return `<div class = "instant" style = "width : 150px">当前交易状态</div>` }],
                                ["blank", ['170px', '60px']],
                                ["raw-html", function () { return `<div class = "instant" style = "width : 400px">+${fw(tmp.emerald.tradeGain2)}神圣绿宝石/s</div>` }],
                            ],
                            {
                                "background-color": "#002a00",
                                width: "720px",
                                height: "40px",
                                border: '2px solid',
                                'border-color': "#17dd61",
                                'border-top-width': "1px",
                            }
                        ],
                    ],
                        function () { return hasCraftingItem(472) ? {} : { visibility: 'hidden' } }
                    ],
                    "blank",
                    ["display-text", function () { return `村民交易自动进行<s>因为村民们对这个价感到很满意</s>` }],
                    ["display-text", function () { return `补货会重置价格，体现为每秒获取基础获取x补货倍率` }],
                    ["display-text", function () {
                        let pow = d(3)
                        if (hasUpgrade(emerald, 24)) pow = pow.add(1)
                        if (hasUpgrade(emerald, 25)) pow = pow.add(2)
                        if (hasUpgrade(emerald, 31)) pow = pow.add(2)
                        if (hasUpgrade(emerald, 32)) pow = pow.add(2)
                        if (hasCraftingItem(472)) pow = pow.add(3.5)
                        if (shiftDown) return `铁锭收购绿宝石获取公式：(lg(铁锭)/${f(1e7)})${quickSUP(f(pow))}`
                    }],
                    ["display-text", function () {
                        let pow = d(3)
                        if (shiftDown && hasCraftingItem(472)) return `金锭收购神圣绿宝石获取公式：((lg(金锭)-${3600000})/${f(10000)})${quickSUP(f(pow))}`
                    }],
                ]
            },
        },
    },
})

//世界1层25：知识精华
addLayer("experience", {
    name: "experience",
    position: 24,
    row: 1,
    symbol() { return '知识精华' },// Set true to generate a slightly different layer
    // Change layer button' style
    startData() {
        return {
            unlocked: true,
            points: new ExpantaNum(0),// This actually does nothing, but you have to write this. (Unless you want add something in this layer. #Todo, might change that later.)
            crystal: new ExpantaNum(0),
            knowledge: new ExpantaNum(0),
            booster: new ExpantaNum(0),
        }
    },
    resource: "知识精华锭",            // The name of this layer's main prestige resource.
    color: "#b2ff59",
    type: "custom",
    tooltip() { return false },
    layerShown() { return hasNormalAchievement(164) },// If any layer in the array is unlocked, it will returns true. Otherwise it will return false.

    baseResource: "points",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.points },  // A function to return the current amount of baseResource.

    requires: d(10),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    exponent: 0.5,                          // "normal" prestige gain is (currency^exponent).

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        let m = d(1)                            // 知识精华锭的获取倍率
        if (hasUpgrade(experience, 11)) m = m.times(3)
        if (hasUpgrade(experience, 13)) m = m.times(upgradeEffect(experience, 13))
        if (hasUpgrade(experience, 14)) m = m.times(buyableEffect(experience, 13))
        if (hasCraftingItem(482)) m = m.times(clickableEffect(ct, 482))
        return m
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        let e = d(1)
        if (hasUpgrade(experience, 31)) e = e.times(upgradeEffect(experience, 31))
        return e
    },

    getResetGain() {
        let mult = tmp.experience.gainMult
        let g = player.points.max(1e10).log10().log10().sub(307.2547155599167).root(5).pow(tmp.experience.gainExp).max(0).times(mult)
        g = g.floor()
        return g
    },

    getNextAt() {
        let mult = tmp.experience.gainMult
        let gain = tmp.experience.getResetGain
        let baseGain = gain.add(1).div(mult)
        let next = d(10).pow(d(10).pow(baseGain.pow(5).root(tmp.experience.gainExp).add(307.2547155599167)))
        return next
    },

    prestigeButtonText() {
        if (tmp.experience.getResetGain.lt(100) && player.experience.points.lt(1000))
            return "固化经验获得 <b>+" + formatWhole(tmp.experience.getResetGain) + "</b> 知识精华锭<br><br> 下一个在 " + format(tmp.experience.getNextAt) + " 经验"
        else return "固化经验获得 <b>+" + formatWhole(tmp.experience.getResetGain) + "</b> 知识精华锭"
    },

    canReset() {
        return player.points.gte(d(10).pow(Number.MAX_VALUE))
    },

    doReset() { return undefined },

    upgrades: {
        11: {
            title: "知识就是力量",
            description() {
                return `3x知识精华锭获取`
            },
            cost() { return new ExpantaNum(10) },
            unlocked() { return tmp.experience.layerShown },
        },
        12: {
            title: "将知识变现",
            description() {
                return `解锁知识点数和一个购买项`
            },
            cost() { return new ExpantaNum(100) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        13: {
            title: "知识效率",
            description() {
                return `需求：二阶等级48<br>知识水晶加成知识精华锭获取`
            },
            canAfford() { return player.tiers[0].gte(48) },
            cost() { return new ExpantaNum(150) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.experience.crystal.add(1).pow(2)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：(知识水晶+1)${quickSUP('2')}`
                return t
            },
        },
        14: {
            title: "高阶知识",
            description() {
                return `再解锁2个购买项`
            },
            cost() { return new ExpantaNum(2025) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        15: {
            title: "交易的经验",
            description() {
                return `绿宝石加成知识点数获取`
            },
            cost() { return new ExpantaNum(1e17) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.emerald.points.add(1).pow(0.2)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：(绿宝石+1)${quickSUP('0.2')}`
                return t
            },
        },
        21: {
            title: "极强的可塑性",
            description() {
                return `解锁知识精华相关的合成图纸`
            },
            cost() { return new ExpantaNum(3.7e37) },
            unlocked() { return hasUpgrade(this.layer, 15) },
        },
        22: {
            title: "结晶自改良",
            description() {
                return `知识水晶提供“知识水晶 - 改良I式”的免费等级`
            },
            cost() { return new ExpantaNum(1e53) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        23: {
            title: "结晶利用催化剂",
            description() {
                return `知识水晶提供“知识精华 - 经验利用率”的免费等级`
            },
            cost() { return new ExpantaNum(1e56) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        24: {
            title: "超越型知识",
            description() {
                return `再解锁1个购买项`
            },
            cost() { return new ExpantaNum(1e166) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        25: {
            title: "此为知识之终焉",
            description() {
                return `解锁紫色，粉色和黄绿色神秘花和对应花瓣（地图-魔法森林），以及一种新的产魔花：阿卡纳蔷薇（植物魔法-花药台）`
            },
            cost() { return new ExpantaNum('1e470') },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        31: {
            title: "超脱知识之境界",
            description() {
                return `知识水晶以指数加成未经倍数加成的基础固化经验的知识精华获取`
            },
            cost() { return new ExpantaNum('1e505') },
            unlocked() { return hasUpgrade(this.layer, 25) },
            effect() {
                let eff = player.experience.crystal.max(0).add(1)
                return eff
            },
            effectDisplay() {
                return `^${format(upgradeEffect(this.layer, this.id))}`
            },
            tooltip() {
                let t = `公式：知识水晶+1`
                return t
            },
        },
        32: {
            title: "最纯净的知识水晶",
            description() {
                return `经验的硬上限加入到经验生产速度，成就点数的效果也改为加成经验的硬上限（其实对第1红石升级加成效果没消失）`
            },
            cost() { return new ExpantaNum('1e905') },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        33: {
            title: "改良利用率",
            description() {
                return `“知识精华 - 经验利用率”提供免费等级到“知识水晶 - 改良I式”的免费等级`
            },
            cost() { return new ExpantaNum('1e954') },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        34: {
            title: "深层绿宝石矿石大陆",
            description() {
                return `绿宝石加成牧师补货倍率`
            },
            cost() { return new ExpantaNum('1e1030') },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.emerald.points.max(0).add(1).pow(0.77)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：(绿宝石+1)${quickSUP('0.77')}`
                return t
            },
        },
        35: {
            title: "知识精通",
            description() {
                return `再解锁一个新的购买项`
            },
            cost() { return new ExpantaNum('1e1223') },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
    },

    milestones: {
        0: {
            requirementDescription() { return `获得${f('1e3003')}知识点数` },
            effectDescription() { return `知识精华的相关购买项现在可以批量10x购买` },
            done() { return player.experience.knowledge.gte('1e3003') },
            unlocked() { return tmp.experience.layerShown },
        },
    },

    bulk() {
        let bulk = d(1)
        if (hasMilestone(experience, 0)) bulk = d(10)
        return bulk
    },

    buyables: {
        11: {
            title: "知识精华 - 结晶化",
            cost(x) {
                let c = d(5).pow(player.experience.crystal.add(1).pow(1.3))
                if (hasUpgrade(experience, 24)) c = c.div(buyableEffect(experience, 21))
                return c
            },
            free() {
                let f = d(0)
                return f
            },
            display() {
                let freedis = ""
                if (this.free().gte(1)) freedis = ` + ${formatWhole(this.free())}`
                let display = `将你的知识精华锭结晶化，获得知识水晶<br>
                数量：${fw(player.experience.crystal)}<br>
                结晶化消耗：${formatWhole(this.cost())} 知识精华锭`
                return display
            },
            canAfford() { return player[this.layer].points.gte(this.cost()) },
            canBuyMax() { return false },
            buyMax() {
                let discount = d(1)
                if (hasUpgrade(experience, 24)) discount = discount.times(buyableEffect(experience, 21))
                if (this.canAfford()) player.experience.crystal = player.experience.points.times(discount).max(0.2).logBase(5).root(1.3).floor()
            },
            buy() {
                let discount = d(1)
                if (hasUpgrade(experience, 24)) discount = discount.times(buyableEffect(experience, 21))
                if (this.canBuyMax()) this.buyMax()
                else player[this.layer].points = player[this.layer].points.sub(this.cost()).max(0),
                    player.experience.crystal = player.experience.crystal.add(tmp.experience.bulk).min(player.experience.points.times(discount).max(0.2).logBase(5).root(1.3).floor())
            },
            unlocked() { return hasUpgrade(experience, 12) },
            canAuto() { return false },
            auto() {
                if (this.canAuto())
                    this.buyMax()
            },
        },
        12: {
            title: "知识水晶 - 改良I式",
            cost(x) { return d(3).pow(x.add(1).pow(1.1)) },
            free() {
                let f = d(0)
                if (hasUpgrade(experience, 22)) f = f.add(player.experience.crystal)
                if (hasUpgrade(experience, 33)) f = f.add(getBuyableAmount(experience, 13))
                return f
            },
            effBase() {
                let b = d(1.5)
                if (hasUpgrade(manasteel, 31)) b = b.add(buyableEffect(experience, 22))
                return b
            },
            display() {
                let freedis = ""
                if (this.free().gte(1)) freedis = ` + ${formatWhole(this.free())}`
                let display = `提升知识水晶生产知识点数的公式底数<br>
                效果公式：${f(this.effBase())}x<br>
                等级：${fw(getBuyableAmount(this.layer, this.id))}${freedis}<br>
                当前效果：+${f(buyableEffect(this.layer, this.id))}<br>
                价格：${formatWhole(this.cost())} 知识点数`
                return display
            },
            canAfford() { return player[this.layer].knowledge.gte(this.cost()) },
            canBuyMax() { return false },
            buyMax() { if (this.canAfford()) setBuyableAmount(this.layer, this.id, player.experience.knowledge.max(0.33).logBase(3).root(1.1).floor()) },
            buy() {
                if (this.canBuyMax()) this.buyMax()
                else player[this.layer].knowledge = player[this.layer].knowledge.sub(this.cost()).max(0),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(tmp.experience.bulk).min(player.experience.knowledge.max(0.33).logBase(3).root(1.1).floor()))
            },
            effect(x) {
                let eff = x.add(this.free()).times(this.effBase())
                return eff
            },
            unlocked() { return hasUpgrade(experience, 14) },
            canAuto() { return false },
            auto() {
                if (this.canAuto())
                    this.buyMax()
            },
        },
        13: {
            title: "知识精华 - 经验利用率",
            cost(x) { return d(5).pow(x.add(1).pow(1.15)) },
            free() {
                let f = d(0)
                if (hasUpgrade(experience, 23)) f = f.add(player.experience.crystal)
                return f
            },
            effBase() {
                let b = d(5)
                if (hasUpgrade(experience, 35)) b = b.add(buyableEffect(experience, 23))
                return b
            },
            display() {
                let freedis = ""
                if (this.free().gte(1)) freedis = ` + ${formatWhole(this.free())}`
                let display = `加成知识精华锭获取<br>
                效果公式：${f(this.effBase())}${quickSUP('x')}<br>
                等级：${fw(getBuyableAmount(this.layer, this.id))}${freedis}<br>
                当前效果：${f(buyableEffect(this.layer, this.id))}x<br>
                价格：${formatWhole(this.cost())} 知识点数`
                return display
            },
            canAfford() { return player[this.layer].knowledge.gte(this.cost()) },
            canBuyMax() { return false },
            buyMax() { if (this.canAfford()) setBuyableAmount(this.layer, this.id, player.experience.knowledge.max(0.2).logBase(5).root(1.15).floor()) },
            buy() {
                if (this.canBuyMax()) this.buyMax()
                else player[this.layer].knowledge = player[this.layer].knowledge.sub(this.cost()).max(0),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(tmp.experience.bulk).min(player.experience.knowledge.max(0.2).logBase(5).root(1.15).floor()))
            },
            effect(x) {
                let eff = this.effBase().pow(x.add(this.free()).max(0))
                return eff
            },
            unlocked() { return hasUpgrade(experience, 14) },
            canAuto() { return false },
            auto() {
                if (this.canAuto())
                    this.buyMax()
            },
        },
        21: {
            title: "知识精华 - 结晶利用率",
            cost(x) { return d(100).pow(x.add(1).pow(1.3)).times(1e193) },
            free() {
                let f = d(0)
                return f
            },
            purchaseLimit() {
                let l = d(50)
                return l
            },
            effBase() {
                let b = d(10000)
                return b
            },
            display() {
                let freedis = ""
                if (this.free().gte(1)) freedis = ` + ${formatWhole(this.free())}`
                let display = `降低知识精华结晶化的消耗<br>
                效果公式：${f(this.effBase())}${quickSUP('x')}<br>
                等级：${fw(getBuyableAmount(this.layer, this.id))}${freedis} / 50<br>
                当前效果：/${f(buyableEffect(this.layer, this.id))}<br>
                价格：${formatWhole(this.cost())} 知识点数`
                return display
            },
            canAfford() { return player[this.layer].knowledge.gte(this.cost()) },
            canBuyMax() { return false },
            buyMax() { if (this.canAfford()) setBuyableAmount(this.layer, this.id, player.experience.knowledge.div(1e193).max(0.01).logBase(100).root(1.3).floor()).min(50) },
            buy() {
                if (this.canBuyMax()) this.buyMax()
                else player[this.layer].knowledge = player[this.layer].knowledge.sub(this.cost()).max(0),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(tmp.experience.bulk).min(player.experience.knowledge.div(1e193).max(0.01).logBase(100).root(1.3).floor()).min(50))
            },
            effect(x) {
                let eff = this.effBase().pow(x.add(this.free()).max(0))
                return eff
            },
            unlocked() { return hasUpgrade(experience, 24) },
            canAuto() { return false },
            auto() {
                if (this.canAuto())
                    this.buyMax()
            },
        },
        22: {
            title: "知识精华 - 魔力钢催化",
            cost(x) { return d(3).pow(x.add(1).pow(1.05)).times(1e13) },
            free() {
                let f = d(0)
                return f
            },
            effBase() {
                let b = d(0.25)
                return b
            },
            display() {
                let freedis = ""
                if (this.free().gte(1)) freedis = ` + ${formatWhole(this.free())}`
                let display = `提升“知识精华 - 改良I式”的基数<br>
                效果公式：${f(this.effBase())}x<br>
                等级：${fw(getBuyableAmount(this.layer, this.id))}${freedis}<br>
                当前效果：+${f(buyableEffect(this.layer, this.id))}<br>
                价格：${formatWhole(this.cost())} 魔力钢锭`
                return display
            },
            canAfford() { return player.manasteel.points.gte(this.cost()) },
            canBuyMax() { return false },
            buyMax() { if (this.canAfford()) setBuyableAmount(this.layer, this.id, player.manasteel.points.div(1e13).max(0.33).logBase(3).root(1.05).floor()) },
            buy() {
                if (this.canBuyMax()) this.buyMax()
                else player.manasteel.points = player.manasteel.points.sub(this.cost()).max(0),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(tmp.experience.bulk).min(player.manasteel.points.div(1e13).max(0.33).logBase(3).root(1.05).floor()))
            },
            effect(x) {
                let eff = this.effBase().times(x.add(this.free()).max(0))
                return eff
            },
            unlocked() { return hasUpgrade(manasteel, 31) },
            canAuto() { return false },
            auto() {
                if (this.canAuto())
                    this.buyMax()
            },
            tooltip() {
                let t = `魔力钢锭：${textResourceStyle(fw(player.manasteel.points), 'text-manasteel', 'h3')}`
                return t
            },
        },
        23: {
            title: "知识水晶 - 改良II式",
            cost(x) { return d(1e10).pow(x.pow(2)).times('1e1640') },
            free() {
                let f = d(0)
                return f
            },
            effBase() {
                let b = d(0.8)
                return b
            },
            display() {
                let freedis = ""
                if (this.free().gte(1)) freedis = ` + ${formatWhole(this.free())}`
                let display = `提升“知识精华 - 经验利用率”的基数<br>
                效果公式：${f(this.effBase())}x<br>
                等级：${fw(getBuyableAmount(this.layer, this.id))}${freedis}<br>
                当前效果：+${f(buyableEffect(this.layer, this.id))}<br>
                价格：${formatWhole(this.cost())} 知识点数`
                return display
            },
            canAfford() { return player[this.layer].knowledge.gte(this.cost()) },
            canBuyMax() { return false },
            buyMax() { if (this.canAfford()) setBuyableAmount(this.layer, this.id, player.experience.knowledge.div('1e1640').max(0.1).logBase(1e10).root(2).floor().add(1)) },
            buy() {
                if (this.canBuyMax()) this.buyMax()
                else player[this.layer].knowledge = player[this.layer].knowledge.sub(this.cost()).max(0),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(tmp.experience.bulk).min(player.experience.knowledge.div('1e1640').max(0.1).logBase(1e10).root(2).floor().add(1)))
            },
            effect(x) {
                let eff = x.add(this.free()).times(this.effBase())
                return eff
            },
            unlocked() { return hasUpgrade(experience, 35) },
            canAuto() { return false },
            auto() {
                if (this.canAuto())
                    this.buyMax()
            },
        },
    },

    crystalEffBase() {
        let b = d(7)
        if (hasUpgrade(experience, 14)) b = b.add(buyableEffect(experience, 12))
        return b
    },

    knowledgeGain() {
        let g = tmp.experience.crystalEffBase.pow(player.experience.crystal.max(0)).sub(1)
        if (hasUpgrade(experience, 15)) g = g.times(upgradeEffect(experience, 15))
        return g
    },

    knowledgeEff() {
        let eff = d(10).pow(player.experience.knowledge.max(0).add(1).log10().pow(0.95).times(1.5))
        return eff
    },

    xpHardcap() {
        let hc = d(10).pow(Number.MAX_VALUE)
        if (hasUpgrade(experience, 12)) hc = hc.pow(tmp.experience.knowledgeEff)
        if (hasUpgrade(experience, 32)) hc = hc.pow(tmp.achievements.effect)
        return hc
    },

    update(diff) {
        if (hasUpgrade(experience, 12)) player.experience.knowledge = player.experience.knowledge.add(tmp.experience.knowledgeGain.times(diff))
    },

    tabFormat: [
        ["display-text", function () { return getPointsDisplay() }],
        "main-display",
        "prestige-button",
        "blank",
        ["display-text", () => `你同时最多拥有 ${formatWhole(player.experience.best)} 知识精华锭`],
        "blank",
        ["display-text", () => `知识精华锭的原料就是经验，它不会重置其他任何东西`],
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "knowledge": {
                unlocked() { return hasUpgrade(experience, 12) },
                name() { return '知识点数' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { if (hasUpgrade(experience, 12)) return `你有 ${textStyle_h2(formatWhole(player.experience.crystal), 'b2ff59')} 知识水晶，每秒能够生产 ${textStyle_h2(f(tmp.experience.knowledgeGain), 'b2ff59')} 知识点数` }],
                    ["display-text", function () { if (hasUpgrade(experience, 12)) return `你有 ${textStyle_h2(format(player.experience.knowledge), 'b2ff59')} 知识点数` }],
                    ["display-text", function () { if (hasUpgrade(experience, 12)) return `你的知识点数使经验的硬上限以指数的效果提升 ${textStyle_h2("^" + format(tmp.experience.knowledgeEff), 'b2ff59')}` }],
                    ["display-text", function () { if (hasUpgrade(experience, 12)) return `经验的硬上限为 ${textStyle_h2(format(tmp.experience.xpHardcap), 'b2ff59')}` }],
                    ["display-text", function () { if (hasUpgrade(experience, 12) && shiftDown) return `基础知识点数生产公式：${f(tmp.experience.crystalEffBase) + quickSUP('知识水晶')}-1 效果公式：10${quickSUP(`1.5·(lg(知识点数+1)${quickSUP(0.95)})`)}` }],
                    "blank",
                    "buyables",

                ]
            },
            "upgrades": {
                unlocked() { return tmp.experience.layerShown },
                name() { return '升级' },
                content: [
                    ["blank", "15px"],
                    "upgrades",
                ]
            },
            "milestones": {
                unlocked() { return hasUpgrade(experience, 12) },
                name() { return '里程碑' },
                content: [
                    ["blank", "15px"],
                    "milestones",
                ]
            },
        },
    },

})

addLayer("w2", {
    name: "w2",
    position: 1001,
    row: 101,
    symbol() { return '↓ 世界 2 ↓' },
    small: true,// Set true to generate a slightly different layer
    nodeStyle: { "font-size": "15px", "height": "30px" },// Change layer button' style
    startData() {
        return {
            unlocked: true,
            points: new ExpantaNum(0),// This actually does nothing, but you have to write this. (Unless you want add something in this layer. #Todo, might change that later.)
        }
    },
    color: "#fefefe",
    type: "none",
    tooltip() { return false },
    layerShown() { return hasNormalAchievement(145) },// If any layer in the array is unlocked, it will returns true. Otherwise it will return false.
    tabFormat: [
        ["display-text", function () { return getPointsDisplay() }]
    ],
})

function RFAutobuyerActivated(id) {
    return player.rf.autobuyer[id]
}

//世界2层1：魔力钢
addLayer("manasteel", {
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: d(0),             // "points" is the internal name for the main resource of the layer.
            ore: d(0),
            molten: d(0),
        }
    },

    color: "#005ee0",                       // The color for this layer, which affects many elements.
    nodeStyle: {
        background: "linear-gradient(90deg, #005ee0 0%, #7db4ff 20%, #006bff 80%, #0045a3 100%)"
    },
    resource: "魔力钢锭",            // The name of this layer's main prestige resource.
    symbol: "魔力钢",
    row: 101,                                 // The row this layer is on (0 is the first row).
    position: 1002,
    baseResource: "points",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.points },  // A function to return the current amount of baseResource.

    requires: d(10),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "normal",                         // Determines the formula used for calculating prestige currency.
    exponent: 0.5,                          // "normal" prestige gain is (currency^exponent).
    layerShown() { return hasNormalAchievement(145) },

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        let m = d(1)                            // 合金的gainMult是给对应合金倍率的？
        return m
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return d(1)
    },

    doReset() {
        return undefined
    },

    upgrades: {
        11: {
            title: "魔力涌现",
            description: "火红莲的效率变为3x",
            cost() { return new ExpantaNum(6) },
            unlocked() { return tmp.manasteel.layerShown },
        },
        12: {
            title: "魔力效率加成I",
            description: "每有一个火红莲，使得其自身效率增加1倍",
            cost() { return new ExpantaNum(12) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.botania.endoflame.add(1).max(1)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：火红莲+1`
                return t
            },
        },
        13: {
            title: "魔力经验转化",
            description: "你最多拥有的魔力以指数加成第1红石升级的效果",
            cost() { return new ExpantaNum(50) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.mana.best.max(1).log(10).pow(1.24).add(1)
                return eff
            },
            effectDisplay() {
                return `^${format(upgradeEffect(this.layer, this.id))}`
            },
            tooltip() {
                let t = `公式：lg(最多魔力+1)${quickSUP('1.24')}+1`
                return t
            },
        },
        14: {
            title: "更繁茂的神秘森林I",
            description: "探索神秘森林时你有更大概率遇到神秘花",
            cost() { return new ExpantaNum(66) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        15: {
            title: "来自功能花的提升",
            description: "每有一个白雏菊，使得火红莲的效率增加1倍",
            cost() { return new ExpantaNum(135) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.botania.pure_daisy.add(1).max(1)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：白雏菊+1`
                return t
            },
        },
        21: {
            title: "感受魔力的力量",
            description: "魔力钢锭的魔力池投入倍数固定为魔力的1/30,000（向下取整）",
            cost() { return new ExpantaNum(360) },
            unlocked() { return hasUpgrade(this.layer, 15) },
        },
        22: {
            title: "魔力的工具",
            description: "解锁魔力钢相关的合成图纸的第一部分",
            cost() { return new ExpantaNum(1800) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        23: {
            title: "魔力之海",
            description: "需求：二阶等级116<br>神秘森林的探索冷却降至1秒，魔力加成神秘花采集倍数<span style = \"color: red\">（建议在此时做几十个白雏菊，否则到时候会卡进度！到时候需要3,000活木和4,000活石！）<span>",
            canAfford() { return player.tiers[0].gte(116) },
            cost() { return new ExpantaNum(2e7) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.mana.points.log10().max(0).add(1).floor()
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：⌊lg(魔力)+1⌋`
                return t
            },
        },
        24: {
            title: "魔力效率加成II",
            description: "每有一个阿卡纳蔷薇，使得其自身效率增加1倍",
            cost() { return new ExpantaNum(1.666e9) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.botania.rosa_arcana.add(1).max(1)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：阿卡纳蔷薇+1`
                return t
            },
        },
        25: {
            title: "吃经验产魔的阿卡纳蔷薇",
            description: "知识精华锭加成阿卡纳蔷薇的效率",
            cost() { return new ExpantaNum(5e10) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = d(10).pow(player.experience.points.max(1).log10().div(100).pow(0.85))
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：10${quickSUP('(lg(知识精华锭)/100)' + quickSUP('0.85'))}`
                return t
            },
        },
        31: {
            title: "魔力催化经验",
            description: "在知识精华层解锁一个新的购买项，其需要魔力钢升级",
            cost() { return new ExpantaNum(1e14) },
            unlocked() { return hasUpgrade(this.layer, 25) },
        },
        32: {
            title: "魔法绿宝石",
            description: "绿宝石从1.0000e110开始加成知识精华锭加成阿卡纳蔷薇的效率，直到1.000e1000绿宝石为止",
            cost() { return new ExpantaNum(6.6666e16) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
            effect() {
                let eff = player.emerald.points.div(1e110).max(1).pow(0.1).min(1e89)
                return eff
            },
            effectDisplay() {
                return `${format(upgradeEffect(this.layer, this.id))}x`
            },
            tooltip() {
                let t = `公式：(绿宝石/${f(1e130)})${quickSUP('0.1')}`
                return t
            },
        },
        33: {
            title: "新魔力配方",
            description: "解锁新的魔力池配方",
            cost() { return new ExpantaNum(1e103) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        34: {
            title: "工具和武器",
            description: "解锁魔力钢相关的合成图纸的第二部分",
            currencyDisplayName() { return `魔力钻石` },
            currencyInternalName: "mana_diamond",
            currencyLayer: botania,
            cost() { return new ExpantaNum(45) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
        35: {
            title: "凝聚集合力量！",
            description: "需求：合成泰拉凝聚板<br>解锁世界2层级：泰拉钢，并且现在可以在魔力层解锁泰拉钢的泰拉凝聚板配方",
            canAfford() { return hasCraftingItem(501) },
            currencyDisplayName() { return `魔力珍珠` },
            currencyInternalName: "mana_pearl",
            currencyLayer: botania,
            cost() { return new ExpantaNum(10) },
            unlocked() { return hasUpgrade(this.layer, this.id - 1) },
        },
    },

    update(diff) {
        if (player.manasteel.points.gt(player.manasteel.best)) player.manasteel.best = player.manasteel.points
    },

    tabFormat: [
        ["display-text", function () { return getPointsDisplay() }],
        ["display-text", () => `你有 ${textResourceStyle(formatWhole(player.manasteel.points), 'text-manasteel')} 魔力钢锭`],
        "blank",
        ["display-text", () => `你同时最多拥有 ${formatWhole(player.manasteel.best)} 魔力钢锭`],
        "blank",
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "upgrades": {
                unlocked() { return tmp.manasteel.layerShown },
                name() { return '升级' },
                content: [
                    ["blank", "15px"],
                    ["upgrades", [1, 2, 3, 4]],
                ]
            },
        },
    },
})

//世界2层2：泰拉钢
addLayer("terrasteel", {
    startData() {
        return {                  // startData is a function that returns default data for a layer. 
            unlocked: true,                     // You can add more variables here to add them to your layer.
            points: d(0),             // "points" is the internal name for the main resource of the layer.
            ore: d(0),
            molten: d(0),
        }
    },

    color: "#53f900",                       // The color for this layer, which affects many elements.
    nodeStyle: {
        background: "linear-gradient(90deg, #2f8300 0%, #9fff57 15%, #53f900 80%, #39bc00 90%, #277c00 100%)"
    },
    resource: "泰拉钢锭",            // The name of this layer's main prestige resource.
    symbol: "泰拉钢",
    row: 101,                                 // The row this layer is on (0 is the first row).
    position: 1003,
    baseResource: "points",                 // The name of the resource your prestige gain is based on.
    baseAmount() { return player.points },  // A function to return the current amount of baseResource.

    requires: d(10),              // The amount of the base needed to  gain 1 of the prestige currency.
    // Also the amount required to unlock the layer.

    type: "normal",                         // Determines the formula used for calculating prestige currency.
    exponent: 0.5,                          // "normal" prestige gain is (currency^exponent).
    layerShown() { return hasNormalAchievement(171) },

    gainMult() {                            // Returns your multiplier to your gain of the prestige resource.
        let m = d(1)                            // 合金的gainMult是给对应合金倍率的？
        return m
    },
    gainExp() {                             // Returns the exponent to your gain of the prestige resource.
        return d(1)
    },

    doReset() {
        return undefined
    },

    upgrades: {
        11: {
            title: "散发强大魔力的绿色合金",
            description: "恭喜残局！此升级将在v0.8版本可用，coming soon~",
            cost() { return new ExpantaNum('J^9000000000000000 10') },
            unlocked() { return tmp.terrasteel.layerShown },
        },
    },

    update(diff) {
        if (player.terrasteel.points.gt(player.terrasteel.best)) player.terrasteel.best = player.terrasteel.points
    },

    tabFormat: [
        ["display-text", function () { return getPointsDisplay() }],
        ["display-text", () => `你有 ${textResourceStyle(formatWhole(player.terrasteel.points), 'text-terrasteel')} 泰拉钢锭`],
        "blank",
        ["display-text", () => `你同时最多拥有 ${formatWhole(player.terrasteel.best)} 泰拉钢锭`],
        "blank",
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "upgrades": {
                unlocked() { return tmp.terrasteel.layerShown },
                name() { return '升级' },
                content: [
                    ["blank", "15px"],
                    ["upgrades", [1, 2, 3, 4]],
                ]
            },
        },
    },
})

addLayer("2layer", {
    name: "sideLayer2",
    position: 2001,
    row: 201,
    symbol() { return '↓ 制造 ↓' },
    small: true,// Set true to generate a slightly different layer
    nodeStyle: { "font-size": "15px", "height": "30px" },// Change layer button' style
    startData() {
        return {
            unlocked: true,
            points: new ExpantaNum(0),// This actually does nothing, but you have to write this. (Unless you want add something in this layer. #Todo, might change that later.)
        }
    },
    color: "#fefefe",
    type: "none",
    tooltip() { return false },
    layerShown() { return hasNormalAchievement(12) },// If any layer in the array is unlocked, it will returns true. Otherwise it will return false.
    tabFormat: [
        ["display-text", function () { return getPointsDisplay() }]
    ],
})



function isCraftingItem() {
    return player.crafting_table.crafting
}

function hasCraftingItem(id) {
    if (canCraftMultiple(id)) return player.crafting_table.items[id].gte(1)
    else return player.crafting_table.items[id]
}

function stopCrafting() {
    player.crafting_table.crafting = false,
        player.crafting_table.craftingItem = 0,
        player.crafting_table.progress = d(0)
}

function craftingItemName(id) {
    return tmp.crafting_table.clickables[id].title
}

function craftingItemComp(id) {
    return tmp.crafting_table.clickables[id].complexity
}

function craftingItemID() {
    return player.crafting_table.craftingItem
}

function getCraftingItem(id) {
    if (canCraftMultiple(id)) {
        player.crafting_table.items[id] = player.crafting_table.items[id].add(tmp[ct].clickables[id].effectiveMult ? tmp[ct].clickables[id].mult : 1)
    }
    if (!canCraftMultiple(id)) player.crafting_table.items[id] = true
}

function craftingItemColor(id) {
    return tmp.crafting_table.clickables[id].style['background-color']
}

function canCraftMultiple(id) {
    id = Number(id)
    let CCMID = [91, 122, 141, 182, 191, 231, 242, 281, 282, 362, 381, 392, 442, 452, 471]
    let CCM = false
    if (CCMID.indexOf(id) >= 0) CCM = true
    return CCM
}

function craftingItemIDList(amt) {
    let list = []
    for (i = 1; i <= amt; i++) {
        list.push(Math.ceil(i / 2) * 10 + (i % 2 == 0 ? 2 : 1))
    }
    return list
}

//制造层1：合成台
addLayer("crafting_table", {
    name: "crafting_table",
    position: 2002,
    row: 201,
    symbol: '合成台', // This appears on the layer's node. Default is the id with the first letter capitalized
    startData() {
        return {
            unlocked: true,
            points: new ExpantaNum(0),// This actually does nothing, but you have to write this. (Unless you want add something in this layer. #Todo, might change that later.)
            cooldown: d(0),
            speed: d(2),
            crafting: false,
            craftingItem: 0,
            progress: d(0),
            items: {
                11: false, 12: false, 21: false, 22: false, 31: false, 32: false, 41: false, 42: false, 51: false, 52: false,
                61: false, 62: false, 71: false, 72: false, 81: false, 82: false, 91: d(0), 92: false, 101: false, 102: false,
                111: false, 112: false, 121: false, 122: d(0), 131: false, 132: false, 141: d(0), 142: false, 151: false, 152: false,
                161: false, 162: false, 171: false, 172: false, 181: false, 182: d(0), 191: d(0), 192: false, 201: false, 202: false,
                211: false, 212: false, 221: false, 222: false, 231: d(0), 232: false, 241: false, 242: d(0), 251: false, 252: false,
                261: false, 262: false, 271: false, 272: false, 281: d(0), 282: d(0), 291: false, 292: false, 301: false, 302: false,
                311: false, 312: false, 321: false, 322: false, 331: false, 332: false, 341: false, 342: false, 351: false, 352: false,
                361: false, 362: d(0), 371: false, 372: false, 381: d(0), 382: false, 391: false, 392: d(0), 401: false, 402: false,
                411: false, 412: false, 421: false, 422: false, 431: false, 432: false, 441: false, 442: d(0), 451: false, 452: d(0),
                461: false, 462: false, 471: d(0), 472: false, 481: false, 482: false, 491: false, 492: false, 501: false,
            },
            page: 1,
            maxPage: 1,
            maxCraftID: 11,
            emojiNotationResets: d(0),
            upg_shown_mode: "all", //v0.5开始已经出现图纸过多的情况了，现在开始有隐藏部分图纸解锁的功能
        }
    },
    color: "#b8945e",
    type: "normal",
    layerType: "craft",
    resource: "合成台",
    baseResource() { return "木头" },
    baseAmount() { return player.wood.points },
    exponent: 0.25,
    requires: d(80),
    tooltip() { return false },
    gainMult() { // Calculate the multiplier for main currency from bonuses
        m = d(1)
        if (hasUpgrade(copper, 11)) m = m.times(5)
        return m
    },
    gainExp() { // Calculate the exponent on main currency from bonuses
        e = d(1)
        return e
    },
    resetDescription: "重置以合成 ",
    layerShown() { return hasNormalAchievement(12) },// If any layer in the array is unlocked, it will returns true. Otherwise it will return false.

    onPrestige() {
        if (options.notation == 'Emoji') player.crafting_table.emojiNotationResets = player.crafting_table.emojiNotationResets.add(1)
        player.crafting_table.cooldown = d(1)
    },

    canReset() {
        return player.crafting_table.cooldown.lte(0) && player.wood.points.gte(80)
    },

    doReset(resettingLayer) {
        if (hasMilestone(furnace, 0)) return undefined
    },

    passiveGeneration() { return hasUpgrade(constantan, 14) },

    upgrades: {
        11: {
            title: "石质合成台",
            description: "解锁石质合成台的合成",
            currencyInternalName: "points",
            currencyDisplayName: "石头",
            currencyLayer: stone,
            cost() { return new ExpantaNum(10000) },
            unlocked() { return hasNormalAchievement(22) },
        },
        12: {
            title: "熔炉",
            description: "解锁熔炉的合成（制造区域层级）",
            currencyInternalName: "sand",
            currencyDisplayName: "沙子",
            currencyLayer: stone,
            cost() { return new ExpantaNum(12) },
            unlocked() { return hasNormalAchievement(24) },
        },
        13: {
            title: "铜斧",
            description: "解锁铜斧的合成",
            currencyInternalName: "points",
            currencyDisplayName: "铜锭",
            currencyLayer: copper,
            cost() { return new ExpantaNum(2) },
            unlocked() { return hasNormalAchievement(24) },
        },
        14: {
            title: "铜镐",
            description: "解锁铜镐的合成",
            currencyInternalName: "points",
            currencyDisplayName: "铜锭",
            currencyLayer: copper,
            cost() { return new ExpantaNum(5) },
            unlocked() { return hasNormalAchievement(24) },
        },
        15: {
            title: "铜制探矿杖",
            description: "解锁铜制探矿杖的合成",
            currencyInternalName: "glass",
            currencyDisplayName: "玻璃",
            currencyLayer: furnace,
            cost() { return new ExpantaNum(10) },
            unlocked() { return hasNormalAchievement(24) },
        },
        21: {
            title: "铜质合成台",
            description: "解锁铜质合成台的合成",
            currencyInternalName: "glass",
            currencyDisplayName: "玻璃",
            currencyLayer: furnace,
            cost() { return new ExpantaNum(30) },
            unlocked() { return hasCraftingItem(42) },
        },
        22: {
            title: "铜质熔炉",
            description: "解锁铜质熔炉的合成",
            currencyInternalName: "glass",
            currencyDisplayName: "玻璃",
            currencyLayer: furnace,
            cost() { return new ExpantaNum(40) },
            unlocked() { return hasCraftingItem(42) },
        },
        23: {
            title: "1阶太阳能板",
            description: "解锁1阶太阳能板的合成",
            currencyInternalName: "glass",
            currencyDisplayName: "玻璃",
            currencyLayer: furnace,
            cost() { return new ExpantaNum(50) },
            unlocked() { return hasCraftingItem(42) },
        },
        24: {
            title: "锡斧",
            description: "解锁锡斧的合成",
            currencyInternalName: "points",
            currencyDisplayName: "锡锭",
            currencyLayer: tin,
            cost() { return new ExpantaNum(10) },
            unlocked() { return hasCraftingItem(42) },
        },
        25: {
            title: "锡镐",
            description: "解锁锡镐的合成",
            currencyInternalName: "points",
            currencyDisplayName: "锡锭",
            currencyLayer: tin,
            cost() { return new ExpantaNum(10) },
            unlocked() { return hasCraftingItem(42) },
        },
        31: {
            title: "青铜合成台",
            description: "需求：等级36<br>解锁青铜合成台的合成",
            currencyInternalName: "points",
            currencyDisplayName: "青铜锭",
            currencyLayer: bronze,
            cost() { return new ExpantaNum(222) },
            canAfford() { return player.level.gte(36) },
            unlocked() { return hasUpgrade(bronze, 15) },
        },
        32: {
            title: "青铜斧",
            description: "需求：等级36<br>解锁青铜斧的合成",
            currencyInternalName: "points",
            currencyDisplayName: "青铜锭",
            currencyLayer: bronze,
            cost() { return new ExpantaNum(333) },
            canAfford() { return player.level.gte(36) },
            unlocked() { return hasUpgrade(bronze, 15) },
        },
        33: {
            title: "青铜镐",
            description: "需求：等级40<br>解锁青铜镐的合成",
            currencyInternalName: "points",
            currencyDisplayName: "青铜锭",
            currencyLayer: bronze,
            cost() { return new ExpantaNum(444) },
            canAfford() { return player.level.gte(40) },
            unlocked() { return hasUpgrade(bronze, 15) },
        },
        34: {
            title: "青铜外壳",
            description: "需求：等级42<br>解锁青铜外壳的合成",
            currencyInternalName: "points",
            currencyDisplayName: "青铜锭",
            currencyLayer: bronze,
            cost() { return new ExpantaNum(555) },
            canAfford() { return player.level.gte(42) },
            unlocked() { return hasUpgrade(bronze, 15) },
        },
        35: {
            title: "2阶太阳能板",
            description: "需求：等级42<br>解锁2阶太阳能板的合成",
            currencyInternalName: "points",
            currencyDisplayName: "青铜锭",
            currencyLayer: bronze,
            cost() { return new ExpantaNum(1111) },
            canAfford() { return player.level.gte(42) },
            unlocked() { return hasUpgrade(bronze, 15) },
        },
        41: {
            title: "铁质合成台",
            description: "需求：等级81<br>解锁铁质合成台的合成",
            currencyInternalName: "points",
            currencyDisplayName: "铁锭",
            currencyLayer: iron,
            cost() { return new ExpantaNum(3) },
            canAfford() { return player.level.gte(81) },
            unlocked() { return hasUpgrade(iron, 15) },
        },
        42: {
            title: "铁斧",
            description: "需求：等级81<br>解锁铁斧的合成",
            currencyInternalName: "points",
            currencyDisplayName: "铁锭",
            currencyLayer: iron,
            cost() { return new ExpantaNum(3) },
            canAfford() { return player.level.gte(81) },
            unlocked() { return hasUpgrade(iron, 15) },
        },
        43: {
            title: "铁镐",
            description: "需求：等级88<br>解锁铁镐的合成",
            currencyInternalName: "points",
            currencyDisplayName: "铁锭",
            currencyLayer: iron,
            cost() { return new ExpantaNum(3) },
            canAfford() { return player.level.gte(88) },
            unlocked() { return hasUpgrade(iron, 15) },
        },
        44: {
            title: "虚空电炉MK.1",
            description: "需求：等级103<br>解锁虚空电炉MK.1的合成",
            currencyInternalName: "points",
            currencyDisplayName: "铁锭",
            currencyLayer: iron,
            cost() { return new ExpantaNum(3) },
            canAfford() { return player.level.gte(103) },
            unlocked() { return hasUpgrade(iron, 15) },
        },
        45: {
            title: "3阶太阳能板",
            description: "需求：完成33个普通成就<br>解锁3阶太阳能板的合成",
            currencyInternalName: "points",
            currencyDisplayName: "铁锭",
            currencyLayer: iron,
            cost() { return new ExpantaNum(3) },
            canAfford() { return d(player.achievements.achievements.length).sub(player.achievements.secret).gte(33) },
            unlocked() { return hasUpgrade(iron, 15) },
        },
        51: {
            title: "铁桶",
            description: "解锁铁桶的合成<br>解锁铁层级新页面",
            currencyInternalName: "points",
            currencyDisplayName: "铁锭",
            currencyLayer: iron,
            cost() { return new ExpantaNum(25) },
            unlocked() { return hasCraftingItem(121) },
        },
        52: {
            title: "铁制探矿杖",
            description: "解锁铁制探矿杖的合成",
            currencyInternalName: "points",
            currencyDisplayName: "铁锭",
            currencyLayer: iron,
            cost() { return new ExpantaNum(200) },
            unlocked() { return hasUpgrade(iron, 25) },
        },
        53: {
            title: "镍镐",
            description: "解锁镍镐的合成",
            currencyInternalName: "points",
            currencyDisplayName: "镍锭",
            currencyLayer: nickel,
            cost() { return new ExpantaNum(5) },
            unlocked() { return hasUpgrade(nickel, 15) },
        },
        54: {
            title: "镍齿轮",
            description: "需求：等级133<br>解锁镍齿轮的合成",
            currencyInternalName: "points",
            currencyDisplayName: "镍锭",
            currencyLayer: nickel,
            canAfford() { return player.level.gte(133) },
            cost() { return new ExpantaNum(10) },
            unlocked() { return hasUpgrade(nickel, 15) },
        },
        55: {
            title: "镍机械挑战器",
            description: "需求：等级133<br>解锁镍机械挑战器的合成",
            currencyInternalName: "points",
            currencyDisplayName: "镍锭",
            currencyLayer: nickel,
            canAfford() { return player.level.gte(133) },
            cost() { return new ExpantaNum(15) },
            unlocked() { return hasUpgrade(nickel, 15) },
        },
        61: {
            title: "铝质合成台",
            description: "需求：等级316<br>解锁铝质合成台的合成",
            currencyInternalName: "ore",
            currencyDisplayName: "铝矿石",
            currencyLayer: aluminum,
            canAfford() { return player.level.gte(316) },
            cost() { return new ExpantaNum(575) },
            unlocked() { return hasUpgrade(aluminum, 15) },
        },
        62: {
            title: "铝斧",
            description: "需求：等级316<br>解锁铝斧的合成",
            currencyInternalName: "ore",
            currencyDisplayName: "铝矿石",
            currencyLayer: aluminum,
            canAfford() { return player.level.gte(316) },
            cost() { return new ExpantaNum(825) },
            unlocked() { return hasUpgrade(aluminum, 15) },
        },
        63: {
            title: "铝镐",
            description: "需求：等级335<br>解锁铝镐的合成",
            currencyInternalName: "ore",
            currencyDisplayName: "铝矿石",
            currencyLayer: aluminum,
            canAfford() { return player.level.gte(335) },
            cost() { return new ExpantaNum(1000) },
            unlocked() { return hasUpgrade(aluminum, 15) },
        },
        64: {
            title: "铝机械臂",
            description: "需求：等级386<br>解锁铝机械臂的合成",
            currencyInternalName: "ore",
            currencyDisplayName: "铝矿石",
            currencyLayer: aluminum,
            canAfford() { return player.level.gte(386) },
            cost() { return new ExpantaNum(1000) },
            unlocked() { return hasUpgrade(aluminum, 15) },
        },
        65: {
            title: "铅镐",
            description: "解锁铅镐的合成",
            currencyInternalName: "points",
            currencyDisplayName: "铅锭",
            currencyLayer: lead,
            cost() { return new ExpantaNum(15) },
            unlocked() { return hasUpgrade(lead, 15) },
        },
        71: {
            title: "奇点凝聚器",
            description: "需求：等级524<br>解锁奇点凝聚器的合成",
            currencyInternalName: "points",
            currencyDisplayName: "铅锭",
            currencyLayer: lead,
            canAfford() { return player.level.gte(524) },
            cost() { return new ExpantaNum(35) },
            unlocked() { return hasUpgrade(lead, 15) },
        },
        72: {
            title: "铅锤",
            description: "需求：等级564<br>解锁铅锤的合成",
            currencyInternalName: "points",
            currencyDisplayName: "铅锭",
            currencyLayer: lead,
            canAfford() { return player.level.gte(564) },
            cost() { return new ExpantaNum(65) },
            unlocked() { return hasUpgrade(lead, 15) },
        },
        73: {
            title: "铅板",
            description: "需求：等级586<br>解锁铅板的合成",
            currencyInternalName: "points",
            currencyDisplayName: "铅锭",
            currencyLayer: lead,
            canAfford() { return player.level.gte(586) },
            cost() { return new ExpantaNum(75) },
            unlocked() { return hasUpgrade(lead, 15) },
        },
        74: {
            title: "铅外壳",
            description: "需求：等级586<br>解锁铅外壳的合成",
            currencyInternalName: "points",
            currencyDisplayName: "铅锭",
            currencyLayer: lead,
            canAfford() { return player.level.gte(586) },
            cost() { return new ExpantaNum(85) },
            unlocked() { return hasUpgrade(lead, 15) },
        },
        75: {
            title: "辐射防护器",
            description: "需求：等级587<br>解锁辐射防护器的合成",
            currencyInternalName: "points",
            currencyDisplayName: "铅锭",
            currencyLayer: lead,
            canAfford() { return player.level.gte(587) },
            cost() { return new ExpantaNum(99) },
            unlocked() { return hasUpgrade(lead, 15) },
        },
        81: {
            title: "康铜镐",
            description: "需求：等级678<br>解锁康铜镐的合成",
            currencyInternalName: "points",
            currencyDisplayName: "康铜锭",
            currencyLayer: constantan,
            canAfford() { return player.level.gte(678) },
            cost() { return new ExpantaNum(3000) },
            unlocked() { return hasUpgrade(constantan, 15) },
        },
        82: {
            title: "康铜精华转化器",
            description: "需求：等级758<br>解锁康铜精华转化器的合成",
            currencyInternalName: "points",
            currencyDisplayName: "康铜锭",
            currencyLayer: constantan,
            canAfford() { return player.level.gte(758) },
            cost() { return new ExpantaNum(4000) },
            unlocked() { return hasUpgrade(constantan, 15) },
        },
        83: {
            title: "殷钢合成台",
            description: "解锁殷钢合成台的合成",
            currencyInternalName: "points",
            currencyDisplayName: "殷钢锭",
            currencyLayer: invar,
            cost() { return new ExpantaNum(300) },
            unlocked() { return hasUpgrade(invar, 15) },
        },
        84: {
            title: "殷钢斧",
            description: "解锁殷钢斧的合成",
            currencyInternalName: "points",
            currencyDisplayName: "殷钢锭",
            currencyLayer: invar,
            cost() { return new ExpantaNum(300) },
            unlocked() { return hasUpgrade(invar, 15) },
        },
        85: {
            title: "殷钢镐",
            description: "需求：等级2,380<br>解锁殷钢镐的合成",
            currencyInternalName: "points",
            currencyDisplayName: "殷钢锭",
            currencyLayer: invar,
            canAfford() { return player.level.gte(2380) },
            cost() { return new ExpantaNum(300) },
            unlocked() { return hasUpgrade(invar, 15) },
        },
        91: {
            title: "4阶太阳能板",
            description: "需求：等级2,440<br>解锁4阶太阳能板的合成",
            currencyInternalName: "points",
            currencyDisplayName: "殷钢锭",
            currencyLayer: invar,
            canAfford() { return player.level.gte(2440) },
            cost() { return new ExpantaNum(300) },
            unlocked() { return hasUpgrade(invar, 15) },
        },
        92: {
            title: "热力机械外壳",
            description: "需求：等级2,441<br>解锁热力机械外壳的合成",
            currencyInternalName: "points",
            currencyDisplayName: "殷钢锭",
            currencyLayer: invar,
            canAfford() { return player.level.gte(2441) },
            cost() { return new ExpantaNum(300) },
            unlocked() { return hasUpgrade(invar, 15) },
        },
        93: {
            title: "蓄水器",
            description: "需求：等级2,442<br>解锁蓄水器的合成",
            currencyInternalName: "points",
            currencyDisplayName: "殷钢锭",
            currencyLayer: invar,
            canAfford() { return player.level.gte(2442) },
            cost() { return new ExpantaNum(300) },
            unlocked() { return hasUpgrade(invar, 15) },
        },
        94: {
            title: "熔岩炉",
            description: "需求：等级2,444<br>解锁熔岩炉的合成",
            currencyInternalName: "points",
            currencyDisplayName: "殷钢锭",
            currencyLayer: invar,
            canAfford() { return player.level.gte(2444) },
            cost() { return new ExpantaNum(300) },
            unlocked() { return hasUpgrade(invar, 15) },
        },
        95: {
            title: "硬化转换套件",
            description: "需求：等级2,485<br>解锁硬化转换套件的合成",
            currencyInternalName: "points",
            currencyDisplayName: "殷钢锭",
            currencyLayer: invar,
            canAfford() { return player.level.gte(2485) },
            cost() { return new ExpantaNum(300) },
            unlocked() { return hasUpgrade(invar, 15) },
        },
        101: {
            title: "殷钢维度启动器",
            description: "需求：等级2,488<br>解锁殷钢维度启动器的合成",
            currencyInternalName: "points",
            currencyDisplayName: "殷钢锭",
            currencyLayer: invar,
            canAfford() { return player.level.gte(2488) },
            cost() { return new ExpantaNum(300) },
            unlocked() { return hasUpgrade(invar, 15) },
        },
        102: {
            title: "铝黄铜镐",
            description: "需求：等级4,600<br>解锁铝黄铜镐的合成",
            currencyInternalName: "points",
            currencyDisplayName: "铝黄铜锭",
            currencyLayer: alumbrass,
            canAfford() { return player.level.gte(4600) },
            cost() { return new ExpantaNum(1000000) },
            unlocked() { return player.alumbrass.cast.pickaxe_head },
        },
        103: {
            title: "锌质探矿杖",
            description: "解锁锌质探矿杖的合成",
            currencyInternalName: "points",
            currencyDisplayName: "锌锭",
            currencyLayer: zinc,
            cost() { return new ExpantaNum(16) },
            unlocked() { return hasUpgrade(zinc, 23) },
        },
        104: {
            title: "锌镐",
            description: "需求：等级5,355<br>解锁锌镐的合成",
            currencyInternalName: "points",
            currencyDisplayName: "锌锭",
            currencyLayer: zinc,
            canAfford() { return player.level.gte(5355) },
            cost() { return new ExpantaNum(24) },
            unlocked() { return hasUpgrade(zinc, 23) },
        },
        105: {
            title: "黄铜合成站",
            description: "解锁黄铜合成站的合成",
            currencyInternalName: "points",
            currencyDisplayName: "黄铜锭",
            currencyLayer: brass,
            cost() { return new ExpantaNum(144) },
            unlocked() { return player.alumbrass.cast.gear },
        },
        111: {
            title: "黄铜镐",
            description: "解锁黄铜镐的合成",
            currencyInternalName: "points",
            currencyDisplayName: "黄铜锭",
            currencyLayer: brass,
            cost() { return new ExpantaNum(144) },
            unlocked() { return player.alumbrass.cast.gear },
        },
        112: {
            title: "黄铜齿轮",
            description: "需求：等级8,825<br>解锁黄铜齿轮的合成",
            currencyInternalName: "points",
            currencyDisplayName: "黄铜锭",
            currencyLayer: brass,
            canAfford() { return player.level.gte(8825) },
            cost() { return new ExpantaNum(144) },
            unlocked() { return player.alumbrass.cast.gear },
        },
        113: {
            title: "水车",
            description: "需求：等级8,955<br>解锁水车的合成",
            currencyInternalName: "points",
            currencyDisplayName: "黄铜锭",
            currencyLayer: brass,
            canAfford() { return player.level.gte(8955) },
            cost() { return new ExpantaNum(288) },
            unlocked() { return player.alumbrass.cast.gear },
        },
        114: {
            title: "应力表",
            description: "需求：等级8,990<br>解锁应力表的合成",
            currencyInternalName: "points",
            currencyDisplayName: "黄铜锭",
            currencyLayer: brass,
            canAfford() { return player.level.gte(8990) },
            cost() { return new ExpantaNum(576) },
            unlocked() { return player.alumbrass.cast.gear },
        },
        115: {
            title: "钢斧",
            description: "解锁钢斧的合成",
            currencyInternalName: "points",
            currencyDisplayName: "钢锭",
            currencyLayer: steel,
            cost() { return new ExpantaNum(10) },
            unlocked() { return hasUpgrade(steel, 15) },
        },
        121: {
            title: "钢镐",
            description: "解锁钢镐的合成",
            currencyInternalName: "points",
            currencyDisplayName: "钢锭",
            currencyLayer: steel,
            cost() { return new ExpantaNum(10) },
            unlocked() { return hasUpgrade(steel, 15) },
        },
        122: {
            title: "钢熔炉",
            description: "需求：等级24,500<br>解锁钢熔炉的合成",
            currencyInternalName: "points",
            currencyDisplayName: "钢锭",
            currencyLayer: steel,
            canAfford() { return player.level.gte(24500) },
            cost() { return new ExpantaNum(10) },
            unlocked() { return hasUpgrade(steel, 15) },
        },
        123: {
            title: "银斧",
            description: "需求：等级75,100<br>解锁银斧的合成",
            currencyInternalName: "points",
            currencyDisplayName: "银锭",
            currencyLayer: silver,
            canAfford() { return player.level.gte(75100) },
            cost() { return new ExpantaNum(100) },
            unlocked() { return hasUpgrade(silver, 23) },
        },
        124: {
            title: "银镐",
            description: "需求：等级85,400<br>解锁银镐的合成",
            currencyInternalName: "points",
            currencyDisplayName: "银锭",
            currencyLayer: silver,
            canAfford() { return player.level.gte(85400) },
            cost() { return new ExpantaNum(200) },
            unlocked() { return hasUpgrade(silver, 23) },
        },
        125: {
            title: "金斧",
            description: "解锁金斧的合成",
            currencyInternalName: "points",
            currencyDisplayName: "金锭",
            currencyLayer: gold,
            canAfford() { return player.level.gte(85400) },
            cost() { return new ExpantaNum(80) },
            unlocked() { return hasUpgrade(gold, 21) },
        },
        131: {
            title: "金镐",
            description: "需求：等级185,000<br>解锁金镐的合成",
            currencyInternalName: "points",
            currencyDisplayName: "金锭",
            currencyLayer: gold,
            canAfford() { return player.level.gte(185000) },
            cost() { return new ExpantaNum(80) },
            unlocked() { return hasUpgrade(gold, 21) },
        },
        132: {
            title: "5阶太阳能板",
            description: "需求：等级202,502<br>解锁5阶太阳能板的合成",
            currencyInternalName: "points",
            currencyDisplayName: "金锭",
            currencyLayer: gold,
            canAfford() { return player.level.gte(202502) },
            cost() { return new ExpantaNum(400) },
            unlocked() { return hasUpgrade(gold, 21) },
        },
        133: {
            title: "时钟",
            description: "需求：等级225,000<br>解锁时钟的合成",
            currencyInternalName: "points",
            currencyDisplayName: "金锭",
            currencyLayer: gold,
            canAfford() { return player.level.gte(225000) },
            cost() { return new ExpantaNum(1200) },
            unlocked() { return hasUpgrade(gold, 21) },
        },
        134: {
            title: "琥珀金镐",
            description() { return `需求：等级10,200,000<br>解锁${this.title}的合成` },
            currencyInternalName: "points",
            currencyDisplayName: "琥珀金锭",
            currencyLayer: electrum,
            canAfford() { return player.level.gte(10200000) },
            cost() { return new ExpantaNum(1080) },
            unlocked() { return hasUpgrade(electrum, 15) },
        },
        135: {
            title: "琥珀金探矿杖",
            description() { return `解锁${this.title}的合成` },
            currencyInternalName: "stored_time",
            currencyDisplayName: "时钟储存的时间",
            currencyLayer: gold,
            costTime: true,
            cost() { return new ExpantaNum('3.1556952e317') },
            unlocked() { return hasUpgrade(electrum, 15) },
        },
        141: {
            title: "琥珀金钻头",
            description() { return `解锁${this.title}的合成` },
            currencyInternalName: "points",
            currencyDisplayName: "琥珀金锭",
            currencyLayer: electrum,
            cost() { return new ExpantaNum(1.5e11) },
            unlocked() { return hasUpgrade(electrum, 15) },
        },
        142: {
            title: "红石琥珀金RF钻头",
            description() { return `解锁${this.title}的合成` },
            currencyInternalName: "points",
            currencyDisplayName: "红石琥珀金锭",
            currencyLayer: red_ele,
            cost() { return new ExpantaNum(2025) },
            unlocked() { return hasUpgrade(red_ele, 13) },
        },
        143: {
            title: "6阶太阳能板",
            description() { return `解锁${this.title}的合成` },
            currencyInternalName: "points",
            currencyDisplayName: "红石粉",
            currencyLayer: redstone,
            cost() { return new ExpantaNum(1e239) },
            unlocked() { return hasUpgrade(red_ele, 13) },
        },
        144: {
            title: "红石琥珀金传导线圈",
            description() { return `解锁${this.title}的合成` },
            currencyInternalName: "points",
            currencyDisplayName: "红石粉",
            currencyLayer: redstone,
            cost() { return new ExpantaNum('1e410') },
            unlocked() { return hasUpgrade(red_ele, 13) },
        },
        145: {
            title: "RF生物群系指南针",
            description() { return `解锁${this.title}的合成` },
            currencyInternalName: "points",
            currencyDisplayName: "红石粉",
            currencyLayer: redstone,
            cost() { return new ExpantaNum('2.5e802') },
            unlocked() { return hasUpgrade(red_ele, 13) },
        },
        151: {
            title: "花药台",
            description() { return `解锁${this.title}的合成` },
            currencyInternalName: "0",
            currencyDisplayName: "白色神秘花",
            currencyLocation() { return player.map.botania.flower.white },
            cost() { return new ExpantaNum(1) },
            unlocked() { return hasCraftingItem(371) },
        },
        152: {
            title: "魔力发射器",
            description() { return `解锁${this.title}的合成` },
            currencyInternalName: "livingwood",
            currencyDisplayName: "活木",
            currencyLayer: botania,
            cost() { return new ExpantaNum(8) },
            unlocked() { return hasCraftingItem(371) },
        },
        153: {
            title: "魔力池",
            description() { return `解锁${this.title}的合成` },
            currencyInternalName: "livingrock",
            currencyDisplayName: "活石",
            currencyLayer: botania,
            cost() { return new ExpantaNum(12) },
            unlocked() { return hasCraftingItem(371) },
        },
        154: {
            title: "魔钢镐",
            description() { return `解锁${this.title}的合成` },
            currencyInternalName: "points",
            currencyDisplayName: "魔力钢锭",
            currencyLayer: manasteel,
            cost() { return new ExpantaNum(999) },
            unlocked() { return hasUpgrade(manasteel, 22) },
        },
        155: {
            title: "魔力透镜",
            description() { return `解锁${this.title}的合成` },
            currencyInternalName: "points",
            currencyDisplayName: "魔力钢锭",
            currencyLayer: manasteel,
            cost() { return new ExpantaNum(999) },
            unlocked() { return hasUpgrade(manasteel, 22) },
        },
        161: {
            title: "魔力共鸣器", //虚构
            description() { return `解锁${this.title}的合成` },
            currencyInternalName: "points",
            currencyDisplayName: "魔力钢锭",
            currencyLayer: manasteel,
            cost() { return new ExpantaNum(999) },
            unlocked() { return hasUpgrade(manasteel, 22) },
        },
        162: {
            title: "铂镐",
            description() { return `解锁${this.title}的合成` },
            currencyInternalName: "points",
            currencyDisplayName: "铂锭",
            currencyLayer: platinum,
            cost() { return new ExpantaNum(50) },
            unlocked() { return hasUpgrade(platinum, 22) },
        },
        163: {
            title: "7阶太阳能板",
            description() { return `解锁${this.title}的合成` },
            currencyInternalName: "points",
            currencyDisplayName: "铂锭",
            currencyLayer: platinum,
            cost() { return new ExpantaNum(500) },
            unlocked() { return hasUpgrade(platinum, 22) },
        },
        164: {
            title: "钻石斧",
            description() { return `解锁${this.title}的合成` },
            currencyInternalName: "points",
            currencyDisplayName: "钻石",
            currencyLayer: diamond,
            cost() { return new ExpantaNum(7000000) },
            unlocked() { return hasUpgrade(diamond, 21) },
        },
        165: {
            title: "钻石镐",
            description() { return `解锁${this.title}的合成` },
            currencyInternalName: "points",
            currencyDisplayName: "红石",
            currencyLayer: redstone,
            cost() { return new ExpantaNum("1e1150") },
            unlocked() { return hasUpgrade(diamond, 21) },
        },
        171: {
            title: "钻石合成台",
            description() { return `解锁${this.title}的合成` },
            currencyInternalName: "points",
            currencyDisplayName: "钻石",
            currencyLayer: diamond,
            cost() { return new ExpantaNum(3e10) },
            unlocked() { return hasUpgrade(diamond, 21) },
        },
        172: {
            title: "无暇探测仪",
            description() { return `解锁${this.title}的合成` },
            currencyInternalName: "points",
            currencyDisplayName: "黑曜石",
            currencyLayer: obsidian,
            cost() { return new ExpantaNum(3) },
            unlocked() { return hasUpgrade(diamond, 21) },
        },
        173: {
            title: "黑曜石斧",
            description() { return `解锁${this.title}的合成` },
            currencyInternalName: "darkOak",
            currencyDisplayName: "深色橡木原木",
            currencyLayer: wood,
            cost() { return new ExpantaNum(2e48) },
            unlocked() { return hasUpgrade(obsidian, 15) },
        },
        174: {
            title: "黑曜石镐",
            description() { return `解锁${this.title}的合成` },
            currencyInternalName: "basalt",
            currencyDisplayName: "玄武岩",
            currencyLayer: stone,
            cost() { return new ExpantaNum(2025) },
            unlocked() { return hasUpgrade(obsidian, 15) },
        },
        175: {
            title: "黑曜石齿轮",
            description() { return `需求：二阶等级14<br>解锁${this.title}的合成` },
            canAfford() { return player.tiers[0].gte(14) },
            currencyInternalName: "points",
            currencyDisplayName: "黑曜石",
            currencyLayer: obsidian,
            cost() { return new ExpantaNum(2025) },
            unlocked() { return hasUpgrade(obsidian, 15) },
        },
        181: {
            title: "磨粉机",
            description() { return `需求：二阶等级14<br>解锁${this.title}的合成` },
            canAfford() { return player.tiers[0].gte(14) },
            currencyInternalName: "points",
            currencyDisplayName: "黑曜石",
            currencyLayer: obsidian,
            cost() { return new ExpantaNum(2025) },
            unlocked() { return hasUpgrade(obsidian, 15) },
        },
        182: {
            title: "强化升级套件",
            description() { return `需求：二阶等级14<br>解锁${this.title}的合成` },
            canAfford() { return player.tiers[0].gte(14) },
            currencyInternalName: "hardenedGlass",
            currencyDisplayName: "硬化玻璃",
            currencyLayer: alloy_s,
            cost() { return new ExpantaNum(16) },
            unlocked() { return hasUpgrade(obsidian, 15) },
        },
        183: {
            title: "绿宝石激光发射器",
            description() { return `解锁${this.title}的合成` },
            currencyInternalName: "points",
            currencyDisplayName: "绿宝石",
            currencyLayer: emerald,
            cost() { return new ExpantaNum(1.5e28) },
            unlocked() { return hasUpgrade(emerald, 33) },
        },
        184: {
            title: "8阶太阳能板",
            description() { return `解锁${this.title}的合成` },
            currencyInternalName: "points",
            currencyDisplayName: "绿宝石",
            currencyLayer: emerald,
            cost() { return new ExpantaNum(1e30) },
            unlocked() { return hasUpgrade(emerald, 33) },
        },
        185: {
            title: "纸",
            description() { return `解锁${this.title}的合成` },
            currencyInternalName: "points",
            currencyDisplayName: "绿宝石",
            currencyLayer: emerald,
            cost() { return new ExpantaNum(2e30) },
            unlocked() { return hasUpgrade(emerald, 33) },
        },
        191: {
            title: "村庄英雄之书 - 残页",
            description() { return `解锁${this.title}的合成` }, //没写皮革和纸的物品，不过磨粉机可以出木屑，木屑变纸，那就纸吧
            currencyInternalName: "points",
            currencyDisplayName: "绿宝石",
            currencyLayer: emerald,
            cost() { return new ExpantaNum(4e30) },
            unlocked() { return hasUpgrade(emerald, 33) },
        },
        192: {
            title: "知识精华探矿杖",
            description() { return `解锁${this.title}的合成` },
            currencyInternalName: "points",
            currencyDisplayName: "知识精华锭",
            currencyLayer: experience,
            cost() { return new ExpantaNum(1e38) },
            unlocked() { return hasUpgrade(experience, 21) },
        },
        193: {
            title: "知识精华宝珠",
            description() { return `解锁${this.title}的合成` },
            currencyInternalName: "points",
            currencyDisplayName: "知识精华锭",
            currencyLayer: experience,
            cost() { return new ExpantaNum(2e38) },
            unlocked() { return hasUpgrade(experience, 21) },
        },
        194: {
            title: "魔钢剑",
            description() { return `解锁${this.title}的合成` },
            currencyInternalName: "points",
            currencyDisplayName: "知识精华锭",
            currencyLayer: experience,
            cost() { return new ExpantaNum('1e7997') },
            unlocked() { return hasUpgrade(manasteel, 34) },
        },
        195: {
            title: "工厂环",
            description() { return `解锁${this.title}的合成` },
            currencyInternalName: "points",
            currencyDisplayName: "知识精华锭",
            currencyLayer: experience,
            cost() { return new ExpantaNum('1e7998') },
            unlocked() { return hasUpgrade(manasteel, 34) },
        },
        201: {
            title: "泰拉凝聚板",
            description() { return `解锁${this.title}的合成` },
            currencyInternalName: "points",
            currencyDisplayName: "知识精华锭",
            currencyLayer: experience,
            cost() { return new ExpantaNum('1e8000') },
            unlocked() { return hasUpgrade(manasteel, 34) },
        },

    },

    milestones: {
        0: {
            requirementDescription() { return `获得15合成台` },
            effectDescription() { return `奖励：合成合成台时保留木头升级和里程碑` },
            done() { return player.crafting_table.points.gte(15) },
            unlocked() { return true },
        },
        1: {
            requirementDescription() { return `到达等级27` },
            effectDescription() { return `奖励：解锁新的铜升级` },
            done() { return player.level.gte(27) },
            unlocked() { return hasUpgrade(stone, 34) },
        },
    },

    clickables: {
        0: {
            complexity: d(0), //凑数用
            style() {
                return {
                    'background-color': 'rgba(0,0,0,0)',
                }
            },
        },
        11: {
            title() {
                let t = "木斧"
                return t
            },
            display() {
                let d = `
                需要工具：1合成台<br>
                需要材料：120木头<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：撸树速度x2.5<br>
                解锁新的木头升级<br>
                挖掘等级：0`
                return d
            },
            complexity: d(25),
            canClick() { return player.crafting_table.points.gte(1) && player.wood.points.gte(120) && !player.crafting_table.crafting && !hasCraftingItem(this.id) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.wood.points = player.wood.points.sub(120)
            },
            unlocked() { return tmp.crafting_table.layerShown },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    'background-color': '#6b511f',
                    'color': 'white',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        12: {
            title() {
                let t = "木镐"
                return t
            },
            display() {
                let d = `
                需要工具：3合成台<br>
                需要材料：500木头<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：允许你挖掘石头<br>
                挖掘等级：0`
                return d
            },
            complexity: d(40),
            canClick() { return player.crafting_table.points.gte(3) && player.wood.points.gte(500) && !player.crafting_table.crafting && !hasCraftingItem(this.id) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.wood.points = player.wood.points.sub(500)
            },
            unlocked() { return hasUpgrade(stone, 11) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    'background-color': '#6b511f',
                    'color': 'white',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        21: {
            title() {
                let t = "石斧"
                return t
            },
            display() {
                let d = `
                需要工具：9合成台<br>
                需要材料：200木头 + 15石头<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：撸树速度x3、木头获取x5、木头升级3效果总是最大值<br>
                挖掘等级：1`
                return d
            },
            complexity: d(60),
            canClick() { return player.crafting_table.points.gte(9) && player.wood.points.gte(200) && player.stone.points.gte(15) && !player.crafting_table.crafting && !hasCraftingItem(this.id) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.wood.points = player.wood.points.sub(200),
                    player.stone.points = player.stone.points.sub(15)
            },
            unlocked() { return hasUpgrade(stone, 15) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    'background-color': '#7f7f7f',
                    'color': 'white',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        22: {
            title() {
                let t = "石镐"
                return t
            },
            display() {
                let d = `
                需要工具：9合成台<br>
                需要材料：200木头 + 15石头<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：挖掘速度x3、双倍石头获取<br>
                挖掘等级：1`
                return d
            },
            complexity: d(80),
            canClick() { return player.crafting_table.points.gte(9) && player.wood.points.gte(200) && player.stone.points.gte(15) && !player.crafting_table.crafting && !hasCraftingItem(this.id) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.wood.points = player.wood.points.sub(200),
                    player.stone.points = player.stone.points.sub(15)
            },
            unlocked() { return hasUpgrade(stone, 15) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    'background-color': '#7f7f7f',
                    'color': 'white',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        31: {
            title() {
                let t = "石质合成台"
                return t
            },
            display() {
                let d = `
                需要工具：120合成台（消耗）<br>
                需要材料：${f(2000)}木头 + ${f(21000)}石头<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：合成台合成速度x5<br>`
                return d
            },
            complexity: d(240),
            canClick() { return player.crafting_table.points.gte(120) && player.wood.points.gte(2000) && player.stone.points.gte(21000) && !player.crafting_table.crafting && !hasCraftingItem(this.id) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.wood.points = player.wood.points.sub(2000),
                    player.stone.points = player.stone.points.sub(21000),
                    player.crafting_table.points = player.crafting_table.points.sub(120)
            },
            unlocked() { return hasUpgrade(ct, 11) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    'background-color': '#7f7f7f',
                    'color': 'white',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        32: {
            title() {
                let t = "铜斧"
                return t
            },
            display() {
                let d = `
                需要工具：石质合成台<br>
                需要材料：200木头 + 5铜锭<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：撸树速度x3，木头获取x20<br>
                挖掘等级：1`
                return d
            },
            complexity: d(300),
            canClick() { return player.crafting_table.points.gte(1) && player.wood.points.gte(200) && player.copper.points.gte(5) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(31) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.wood.points = player.wood.points.sub(200),
                    player.copper.points = player.copper.points.sub(5)
            },
            unlocked() { return hasUpgrade(ct, 13) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #ea8601 0%, #ffb53c 100%)",
                    'background-color': '#ffb41d',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        41: {
            title() {
                let t = "铜镐"
                return t
            },
            display() {
                let d = `
                需要工具：石质合成台<br>
                需要材料：200木头 + 15铜锭<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：挖掘速度x5，石头获取x5，解锁第3排石头升级<br>
                挖掘等级：1`
                return d
            },
            complexity: d(450),
            canClick() { return player.crafting_table.points.gte(1) && player.wood.points.gte(200) && player.copper.points.gte(15) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(31) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.wood.points = player.wood.points.sub(200),
                    player.copper.points = player.copper.points.sub(15)
            },
            unlocked() { return hasUpgrade(ct, 14) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #ea8601 0%, #ffb53c 100%)",
                    'background-color': '#ffb41d',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        42: {
            title() {
                let t = "铜制探矿杖"
                return t
            },
            display() {
                let d = `
                需要工具：石质合成台<br>
                需要材料：200木头 + 25铜锭 + 50玻璃<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：找矿速度x3<br>
                解锁新一排合成台图纸`
                return d
            },
            complexity: d(450),
            canClick() { return player.crafting_table.points.gte(1) && player.wood.points.gte(200) && player.copper.points.gte(25) && player.furnace.glass.gte(50) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(31) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.wood.points = player.wood.points.sub(200),
                    player.copper.points = player.copper.points.sub(25),
                    player.furnace.glass = player.furnace.glass.sub(50)
            },
            unlocked() { return hasUpgrade(ct, 15) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #ea8601 0%, #ffb53c 100%)",
                    'background-color': '#ffb41d',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        51: {
            title() {
                let t = "铜质合成台"
                return t
            },
            display() {
                let d = `
                需要工具：石质合成台 + ${f(10000)}合成台（消耗）<br>
                需要材料：${f(2000)}木头 + 25铜锭<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：合成的速度x10<br>`
                return d
            },
            complexity: d(750),
            canClick() { return player.crafting_table.points.gte(10000) && player.wood.points.gte(2000) && player.copper.points.gte(25) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(31) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.wood.points = player.wood.points.sub(2000),
                    player.copper.points = player.copper.points.sub(25),
                    player.crafting_table.points = player.crafting_table.points.sub(10000)
            },
            unlocked() { return hasUpgrade(ct, 21) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #ea8601 0%, #ffb53c 100%)",
                    'background-color': '#ffb41d',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        52: {
            title() {
                let t = "铜质熔炉"
                return t
            },
            display() {
                let d = `
                需要工具：石质合成台 + 30熔炉（消耗）<br>
                需要材料：${f(2000)}石头 + 25铜锭<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：熔炼的速度x10<br>`
                return d
            },
            complexity: d(1600),
            canClick() { return player.crafting_table.points.gte(1) && player.furnace.points.gte(30) && player.stone.points.gte(2000) && player.copper.points.gte(25) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(31) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.stone.points = player.stone.points.sub(2000),
                    player.copper.points = player.copper.points.sub(25),
                    player.furnace.points = player.furnace.points.sub(30)
            },
            unlocked() { return hasUpgrade(ct, 22) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #ea8601 0%, #ffb53c 100%)",
                    'background-color': '#ffb41d',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        61: {
            title() {
                let t = "1阶太阳能板"
                return t
            },
            display() {
                let d = `
                需要工具：铜质合成台<br>
                需要材料：${f(10000)}石头 + 120铜锭 + 320玻璃<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：解锁新区域：能源<br>
                你可以开始生产红石通量（RF）并且解锁一些自动化<br>
                速度为15RF/t`
                return d
            },
            complexity: d(3600),
            canClick() { return player.crafting_table.points.gte(1) && player.copper.points.gte(120) && player.stone.points.gte(10000) && player.furnace.glass.gte(320) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(51) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.stone.points = player.stone.points.sub(10000),
                    player.copper.points = player.copper.points.sub(120),
                    player.furnace.glass = player.furnace.glass.sub(320)
            },
            unlocked() { return hasUpgrade(ct, 23) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(90deg, #ea8601 0%, #ffb53c 100%)",
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        62: {
            title() {
                let t = "锡斧"
                return t
            },
            display() {
                let d = `
                需要工具：铜质合成台<br>
                需要材料：200木头 + 8锡锭<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：木头获取x300<br>
                挖掘等级：1`
                return d
            },
            complexity: d(4200),
            canClick() { return player.crafting_table.points.gte(1) && player.wood.points.gte(200) && player.tin.points.gte(8) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(51) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.wood.points = player.wood.points.sub(200),
                    player.tin.points = player.tin.points.sub(8)
            },
            unlocked() { return hasUpgrade(ct, 24) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #c4dce1 0%, #d3e4e4 100%)",
                    'background-color': '#c4dce1',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        71: {
            title() {
                let t = "锡镐"
                return t
            },
            display() {
                let d = `
                需要工具：铜质合成台<br>
                需要材料：200木头 + 21锡锭<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：挖掘速度x3，石头获取x150，解锁锡升级<br>
                挖掘等级：1`
                return d
            },
            complexity: d(4800),
            canClick() { return player.crafting_table.points.gte(1) && player.wood.points.gte(200) && player.tin.points.gte(21) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(51) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.wood.points = player.wood.points.sub(200),
                    player.tin.points = player.tin.points.sub(21)
            },
            unlocked() { return hasUpgrade(ct, 25) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #c4dce1 0%, #d3e4e4 100%)",
                    'background-color': '#c4dce1',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        72: {
            title() {
                let t = "青铜合成台"
                return t
            },
            display() {
                let d = `
                需要工具：铜质合成台 + ${f(1e7)}合成台（消耗）<br>
                需要材料：${f(1e23)}木头 + 125青铜锭<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：合成的速度x25`
                return d
            },
            complexity: d(6400),
            canClick() { return player.crafting_table.points.gte(10000000) && player.wood.points.gte(1e23) && player.bronze.points.gte(125) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(51) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.wood.points = player.wood.points.sub(1e23),
                    player.bronze.points = player.bronze.points.sub(125),
                    player.crafting_table.points = player.crafting_table.points.sub(2000000)
            },
            unlocked() { return hasUpgrade(ct, 31) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #b77b2f 0%, #ffd7a1 80%, #ffeed8 100%)",
                    'background-color': '#ffd7a1',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        81: {
            title() {
                let t = "青铜斧"
                return t
            },
            display() {
                let d = `
                需要工具：青铜合成台<br>
                需要材料：64木头 + 125青铜锭<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：木头倍增器的底数x2，另外1241x木头获取<br>
                挖掘等级：2`
                return d
            },
            complexity: d(18000),
            canClick() { return player.crafting_table.points.gte(1) && player.wood.points.gte(64) && player.bronze.points.gte(125) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(72) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.wood.points = player.wood.points.sub(64),
                    player.bronze.points = player.bronze.points.sub(125)
            },
            unlocked() { return hasUpgrade(ct, 32) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #b77b2f 0%, #ffd7a1 80%, #ffeed8 100%)",
                    'background-color': '#ffd7a1',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        82: {
            title() {
                let t = "青铜镐"
                return t
            },
            display() {
                let d = `
                需要工具：青铜合成台<br>
                需要材料：64木头 + 250青铜锭<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：挖掘速度x5，锡升级2的效果^2<br>
                挖掘等级：2`
                return d
            },
            complexity: d(25000),
            canClick() { return player.crafting_table.points.gte(1) && player.wood.points.gte(64) && player.bronze.points.gte(250) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(72) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.wood.points = player.wood.points.sub(64),
                    player.bronze.points = player.bronze.points.sub(250)
            },
            unlocked() { return hasUpgrade(ct, 33) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #b77b2f 0%, #ffd7a1 80%, #ffeed8 100%)",
                    'background-color': '#ffd7a1',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        91: {
            title() {
                let t = "青铜外壳"
                return t
            },
            display() {
                let d = `
                需要工具：青铜合成台<br>
                需要材料：${f(2000)}青铜锭<br>
                复杂度：${formatWhole(this.complexity)}<br>
                数量：${fw(player[ct].items[91])}<br>
                注意：此道具会因为合成而消耗`
                return d
            },
            complexity: d(36000),
            canClick() { return player.crafting_table.points.gte(1) && player.bronze.points.gte(2000) && !player.crafting_table.crafting && hasCraftingItem(72) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.bronze.points = player.bronze.points.sub(2000)
            },
            unlocked() { return hasUpgrade(ct, 34) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #b77b2f 0%, #ffd7a1 80%, #ffeed8 100%)",
                    'background-color': '#ffd7a1',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        92: {
            title() {
                let t = "2阶太阳能板"
                return t
            },
            display() {
                let d = `
                需要工具：青铜合成台<br>
                需要材料：200青铜锭 + 1青铜外壳 + ${f(1080)}玻璃<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：RF发电速度x4，解锁更多自动化升级。以及，青铜力量`
                return d
            },
            complexity: d(72000),
            canClick() { return player.crafting_table.points.gte(1) && player.bronze.points.gte(200) && hasCraftingItem(91) && player.furnace.glass.gte(1080) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(72) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.bronze.points = player.bronze.points.sub(200),
                    player.furnace.glass = player.furnace.glass.sub(1080),
                    player.crafting_table.items[91] = player.crafting_table.items[91].sub(1)
            },
            unlocked() { return hasUpgrade(ct, 35) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #b77b2f 0%, #ffd7a1 80%, #ffeed8 100%)",
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        101: {
            title() {
                let t = "铁质合成台"
                return t
            },
            display() {
                let d = `
                需要工具：青铜合成台 + ${f(2e25)}合成台（消耗）<br>
                需要材料：5铁锭<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：合成的速度x60`
                return d
            },
            complexity: d(144000),
            canClick() { return player.crafting_table.points.gte(2e25) && player.iron.points.gte(5) && !hasCraftingItem(this.id) && !player.crafting_table.crafting && hasCraftingItem(72) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.iron.points = player.iron.points.sub(5),
                    player.crafting_table.points = player.crafting_table.points.sub(2e25)
            },
            unlocked() { return hasUpgrade(ct, 41) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #d8d8d8 0%, #d8d8d8 50%, #a8a8a8 70%, #5e5e5e 90%)",
                    'background-color': '#d8d8d8',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        102: {
            title() {
                let t = "铁斧"
                return t
            },
            display() {
                let d = `
                需要工具：铁质合成台<br>
                需要材料：64木头 + 5铁锭<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：3x撸树速度，获得10个“木头倍增器”的免费等级<br>
                挖掘等级：2`
                return d
            },
            complexity: d(720000),
            canClick() { return player.crafting_table.points.gte(1) && player.iron.points.gte(5) && player.wood.points.gte(64) && !hasCraftingItem(this.id) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(101) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.iron.points = player.iron.points.sub(5),
                    player.wood.points = player.wood.points.sub(64)
            },
            unlocked() { return hasUpgrade(ct, 42) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #d8d8d8 0%, #d8d8d8 50%, #a8a8a8 70%, #5e5e5e 90%)",
                    'background-color': '#d8d8d8',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        111: {
            title() {
                let t = "铁镐"
                return t
            },
            display() {
                let d = `
                需要工具：铁质合成台<br>
                需要材料：64木头 + 6铁锭<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：3x挖掘速度，解锁新一个青铜力量生成器<br>
                挖掘等级：2`
                return d
            },
            complexity: d(2160000),
            canClick() { return player.crafting_table.points.gte(1) && player.iron.points.gte(6) && player.wood.points.gte(64) && !hasCraftingItem(this.id) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(101) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.iron.points = player.iron.points.sub(6),
                    player.wood.points = player.wood.points.sub(64)
            },
            unlocked() { return hasUpgrade(ct, 43) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #d8d8d8 0%, #d8d8d8 50%, #a8a8a8 70%, #5e5e5e 90%)",
                    'background-color': '#d8d8d8',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        112: {
            title() {
                let t = "虚空电炉MK.1"
                return t
            },
            display() {
                let d = `
                需要工具：铁质合成台<br>
                需要材料：10铁锭 + 1青铜外壳 + ${f(1080)}玻璃<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：虚空电炉，顾名思义，凭空产生熔炼物品。配方在红石通量页面解锁`
                return d
            },
            complexity: d(3240000),
            canClick() { return player.crafting_table.points.gte(1) && player.iron.points.gte(10) && hasCraftingItem(91) && player.furnace.glass.gte(1080) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(101) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.iron.points = player.iron.points.sub(10),
                    player.furnace.glass = player.furnace.glass.sub(1080),
                    player.crafting_table.items[91] = player.crafting_table.items[91].sub(1)
            },
            unlocked() { return hasUpgrade(ct, 44) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #d8d8d8 0%, #d8d8d8 50%, #a8a8a8 70%, #5e5e5e 90%)",
                    'background-color': '#d8d8d8',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        121: {
            title() {
                let t = "3阶太阳能板"
                return t
            },
            display() {
                let d = `
                需要工具：铁质合成台<br>
                需要材料：12铁锭 + 1青铜外壳 + ${f(1080)}玻璃<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：RF发电速度x10，解锁更多自动化升级。可以查看第5行部分配方`
                return d
            },
            complexity: d(4000000),
            canClick() { return player.crafting_table.points.gte(1) && player.iron.points.gte(12) && hasCraftingItem(91) && player.furnace.glass.gte(1080) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(101) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.iron.points = player.iron.points.sub(12),
                    player.furnace.glass = player.furnace.glass.sub(1080),
                    player.crafting_table.items[91] = player.crafting_table.items[91].sub(1)
            },
            unlocked() { return hasUpgrade(ct, 45) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #d8d8d8 0%, #d8d8d8 50%, #a8a8a8 70%, #5e5e5e 90%)",
                    'background-color': '#d8d8d8',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        122: {
            title() {
                let t = "铁桶"
                return t
            },
            display() {
                let d = `
                需要工具：铁质合成台<br>
                需要材料：3铁锭<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：请前往铁层级新页面<br>
                数量：${fw(player[ct].items[122])}/${fw(this.limit())}<br>`
                return d
            },
            limit() {
                let l = d(27)
                if (hasUpgrade(diamond, 34)) l = l.times(16)
                return l
            },
            complexity: d(5000000),
            canClick() { return player.crafting_table.points.gte(1) && player.iron.points.gte(3) && !player.crafting_table.crafting && player[ct].items[122].lt(this.limit()) && hasCraftingItem(101) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.iron.points = player.iron.points.sub(3)
            },
            unlocked() { return hasUpgrade(ct, 51) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #d8d8d8 0%, #d8d8d8 50%, #a8a8a8 70%, #5e5e5e 90%)",
                    'background-color': '#d8d8d8',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        131: {
            title() {
                let t = "铁制探矿杖"
                return t
            },
            display() {
                let d = `
                需要工具：铁质合成台<br>
                需要材料：450铁锭 + 250青铜锭 + ${f(2160)}玻璃<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：找矿速度x3，允许你挖掘镍矿石，解锁镍升级`
                return d
            },
            complexity: d(8000000),
            canClick() { return player.crafting_table.points.gte(1) && player.iron.points.gte(450) && player.bronze.points.gte(250) && player.furnace.glass.gte(2160) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(101) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.iron.points = player.iron.points.sub(450),
                    player.bronze.points = player.bronze.points.sub(250),
                    player.furnace.glass = player.furnace.glass.sub(2160)
            },
            unlocked() { return hasUpgrade(ct, 52) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #d8d8d8 0%, #d8d8d8 50%, #a8a8a8 70%, #5e5e5e 90%)",
                    'background-color': '#d8d8d8',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        132: {
            title() {
                let t = "镍镐"
                return t
            },
            display() {
                let d = `
                需要工具：铁质合成台<br>
                需要材料：10镍锭<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：青铜力量的效果变为原来的^1.5<br>
                挖掘等级：2`
                return d
            },
            complexity: d(10000000),
            canClick() { return player.crafting_table.points.gte(1) && player.nickel.points.gte(10) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(101) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.nickel.points = player.nickel.points.sub(10)
            },
            unlocked() { return hasUpgrade(ct, 53) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #fffcc0 0%, #f5f5d7 25%, #fffcc0 50%, #e3df94 75%, #8b8566 100%)",
                    'background-color': '#fffcc0',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        141: {
            title() {
                let t = "镍齿轮"
                return t
            },
            display() {
                let d = `
                需要工具：铁质合成台<br>
                需要材料：4镍锭<br>
                复杂度：${formatWhole(this.complexity)}<br>
                数量：${fw(player[ct].items[141])}<br>`
                return d
            },
            complexity: d(5000000),
            canClick() { return player.crafting_table.points.gte(1) && player.nickel.points.gte(4) && !player.crafting_table.crafting && hasCraftingItem(101) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.nickel.points = player.nickel.points.sub(4)
            },
            unlocked() { return hasUpgrade(ct, 54) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #fffcc0 0%, #f5f5d7 25%, #fffcc0 50%, #e3df94 75%, #8b8566 100%)",
                    'background-color': '#fffcc0',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        142: {
            title() {
                let t = "镍机械挑战器"
                return t
            },
            display() {
                let d = `
                需要工具：铁质合成台<br>
                需要材料：4镍齿轮 + 20镍锭 + 600玻璃 <br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：解锁镍层级的挑战`
                return d
            },
            complexity: d(15000000),
            canClick() { return player.crafting_table.points.gte(1) && player.nickel.points.gte(20) && player.crafting_table.items[141].gte(4) && player.furnace.glass.gte(600) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(101) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.nickel.points = player.nickel.points.sub(20),
                    player.crafting_table.items[141] = player.crafting_table.items[141].sub(4),
                    player.furnace.glass = player.furnace.glass.sub(600)
            },
            unlocked() { return hasUpgrade(ct, 55) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #fffcc0 0%, #f5f5d7 25%, #fffcc0 50%, #e3df94 75%, #8b8566 100%)",
                    'background-color': '#fffcc0',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        151: {
            title() {
                let t = "铝质合成台"
                return t
            },
            display() {
                let d = `
                需要工具：铁质合成台 + ${f(1e295)}合成台（消耗）<br>
                需要材料：33铝锭 <br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：合成的速度x50`
                return d
            },
            complexity: d(25000000),
            canClick() { return player.crafting_table.points.gte(1e295) && player.aluminum.points.gte(33) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(101) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.aluminum.points = player.aluminum.points.sub(33),
                    player.crafting_table.points = player.crafting_table.points.sub(1e295)
            },
            unlocked() { return hasUpgrade(ct, 61) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #e2e3ee 0%, #d4d5e4 50%, #a0a2ac 100%)",
                    'background-color': '#e2e3ee',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        152: {
            title() {
                let t = "铝斧"
                return t
            },
            display() {
                let d = `
                需要工具：铝质合成台<br>
                需要材料：25铝锭 + 300木头 <br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：允许在撸树时获得金合欢原木<br>
                挖掘等级：2`
                return d
            },
            complexity: d(50000000),
            canClick() { return player.crafting_table.points.gte(1) && player.aluminum.points.gte(25) && player.wood.points.gte(300) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(151) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.aluminum.points = player.aluminum.points.sub(25),
                    player.wood.points = player.wood.points.sub(300)
            },
            unlocked() { return hasUpgrade(ct, 62) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #e2e3ee 0%, #d4d5e4 50%, #a0a2ac 100%)",
                    'background-color': '#e2e3ee',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        161: {
            title() {
                let t = "铝镐"
                return t
            },
            display() {
                let d = `
                需要工具：铝质合成台<br>
                需要材料：32铝锭 + 300木头 <br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：青铜力量效果再次^1.5，铁锭熔炼倍率锁定为铁矿石数量的10%<br>
                挖掘等级：2`
                return d
            },
            complexity: d(80000000),
            canClick() { return player.crafting_table.points.gte(1) && player.aluminum.points.gte(32) && player.wood.points.gte(300) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(151) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.aluminum.points = player.aluminum.points.sub(32),
                    player.wood.points = player.wood.points.sub(300)
            },
            unlocked() { return hasUpgrade(ct, 63) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #e2e3ee 0%, #d4d5e4 50%, #a0a2ac 100%)",
                    'background-color': '#e2e3ee',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        162: {
            title() {
                let t = "铝机械臂"
                return t
            },
            display() {
                let d = `
                需要工具：铝质合成台<br>
                需要材料：48铝锭 + 16铁锭 <br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：解锁更多自动化和新的铝升级`
                return d
            },
            complexity: d(120000000),
            canClick() { return player.crafting_table.points.gte(1) && player.aluminum.points.gte(48) && player.iron.points.gte(16) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(151) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.aluminum.points = player.aluminum.points.sub(48),
                    player.iron.points = player.iron.points.sub(16)
            },
            unlocked() { return hasUpgrade(ct, 64) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #e2e3ee 0%, #d4d5e4 50%, #a0a2ac 100%)",
                    'background-color': '#e2e3ee',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        171: {
            title() {
                let t = "铅镐"
                return t
            },
            display() {
                let d = `
                需要工具：铝质合成台<br>
                需要材料：32铅锭 + 300木头 <br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：铁矿石获取变为${f(100000)}x；镍矿石获取变为${f(10000)}x；铝矿石获取变为25x；铅矿石获取变为3x。镍矿石现在可以自动化<br>
                挖掘等级：2`
                return d
            },
            complexity: d(160000000),
            canClick() { return player.crafting_table.points.gte(1) && player.lead.points.gte(32) && player.wood.points.gte(300) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(151) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.lead.points = player.lead.points.sub(32),
                    player.wood.points = player.wood.points.sub(300)
            },
            unlocked() { return hasUpgrade(ct, 65) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #667397 0%, #acc0ff 20%, #97a9e0 50%, #6a7392 80%, #333848 100%)",
                    'background-color': '#97a9e0',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        172: {
            title() {
                let t = "奇点凝聚器"
                return t
            },
            display() {
                let d = `
                需要工具：铝质合成台<br>
                需要材料：64铅锭 + 64镍齿轮 + ${f(1024)}铁锭 + 2石头奇点（不消耗） <br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：解锁制造区域新层级：奇点凝聚器`
                return d
            },
            complexity: d(320000000),
            canClick() { return player.crafting_table.points.gte(1) && player.lead.points.gte(64) && player.iron.points.gte(1024) && player.crafting_table.items[141].gte(64) && singularity(stone).gte(2) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(151) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.lead.points = player.lead.points.sub(64),
                    player.iron.points = player.iron.points.sub(1024),
                    player.crafting_table.items[141] = player.crafting_table.items[141].sub(64)
            },
            unlocked() { return hasUpgrade(ct, 71) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #667397 0%, #acc0ff 20%, #97a9e0 50%, #6a7392 80%, #333848 100%)",
                    'background-color': '#97a9e0',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        181: {
            title() {
                let t = "铅锤"
                return t
            },
            display() {
                let d = `
                需要工具：铝质合成台<br>
                需要材料：72铅锭 + 200木头 <br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：可挖掘可锻造，合成的速度x15；25x铝矿石获取和铝锭熔炼倍率<br>
                挖掘等级：2`
                return d
            },
            complexity: d(640000000),
            canClick() { return player.crafting_table.points.gte(1) && player.lead.points.gte(72) && player.wood.points.gte(200) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(151) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.lead.points = player.lead.points.sub(72),
                    player.wood.points = player.wood.points.sub(200)
            },
            unlocked() { return hasUpgrade(ct, 72) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #667397 0%, #acc0ff 20%, #97a9e0 50%, #6a7392 80%, #333848 100%)",
                    'background-color': '#97a9e0',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        182: {
            title() {
                let t = "铅板"
                return t
            },
            display() {
                let d = `
                需要工具：铝质合成台 + 铅锤<br>
                需要材料：10铅锭<br>
                复杂度：${formatWhole(this.complexity)}<br>
                数量：${fw(player[ct].items[182])}<br>`
                return d
            },
            complexity: d(1.28e9),
            canClick() { return player.crafting_table.points.gte(1) && player.lead.points.gte(10) && !player.crafting_table.crafting && hasCraftingItem(151) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.lead.points = player.lead.points.sub(10)
            },
            unlocked() { return hasUpgrade(ct, 73) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #667397 0%, #acc0ff 20%, #97a9e0 50%, #6a7392 80%, #333848 100%)",
                    'background-color': '#97a9e0',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        191: {
            title() {
                let t = "铅外壳"
                return t
            },
            display() {
                let d = `
                需要工具：铝质合成台 + 铅锤<br>
                需要材料：6铅板<br>
                复杂度：${formatWhole(this.complexity)}<br>
                数量：${fw(player[ct].items[191])}<br>`
                return d
            },
            complexity: d(1.69e9),
            canClick() { return player.crafting_table.points.gte(1) && player.crafting_table.items[182].gte(6) && !player.crafting_table.crafting && hasCraftingItem(151) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.crafting_table.items[182] = player.crafting_table.items[182].sub(6)
            },
            unlocked() { return hasUpgrade(ct, 74) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #667397 0%, #acc0ff 20%, #97a9e0 50%, #6a7392 80%, #333848 100%)",
                    'background-color': '#97a9e0',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        192: {
            title() {
                let t = "辐射防护器"
                return t
            },
            display() {
                let d = `
                需要工具：铝质合成台 + 铅锤<br>
                需要材料：3铅外壳 + 32镍齿轮<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：石头奇点的效果变为原来的^5，铜奇点的效果变为原来的^2.5，解锁新的铅升级<br>`
                return d
            },
            complexity: d(3.25e9),
            canClick() { return player.crafting_table.points.gte(1) && player.crafting_table.items[191].gte(3) && player.crafting_table.items[141].gte(32) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(151) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.crafting_table.items[191] = player.crafting_table.items[191].sub(3),
                    player.crafting_table.items[141] = player.crafting_table.items[141].sub(32)
            },
            unlocked() { return hasUpgrade(ct, 75) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #667397 0%, #acc0ff 20%, #97a9e0 50%, #6a7392 80%, #333848 100%)",
                    'background-color': '#97a9e0',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        201: {
            title() {
                let t = "康铜镐"
                return t
            },
            display() {
                let d = `
                需要工具：铝质合成台 + 铅锤<br>
                需要材料：${f(2000)}康铜锭 + 200木头<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：第9镍升级的效果变为^1.5，第8铝升级的效果变为^1.35<br>`
                return d
            },
            complexity: d(4e9),
            canClick() { return player.crafting_table.points.gte(1) && player.constantan.points.gte(2000) && player.wood.points.gte(200) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(151) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.constantan.points = player.constantan.points.sub(2000),
                    player.wood.points = player.wood.points.sub(200)
            },
            unlocked() { return hasUpgrade(ct, 81) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #d39f49 0%, #ffd37c 30%, #eeba4f 80%, #7d6233 100%)",
                    'background-color': '#eeba4f',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        202: {
            title() {
                let t = "康铜精华转化器"
                return t
            },
            display() {
                let d = `
                需要工具：铝质合成台 + 铅锤<br>
                需要材料：${f(15000)}康铜锭 + ${f(2e9)}铅锭<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：解锁康铜精华（康铜层级新页面）<br>`
                return d
            },
            complexity: d(7.7e9),
            canClick() { return player.crafting_table.points.gte(1) && player.constantan.points.gte(2000) && player.lead.points.gte(2e9) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(151) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.constantan.points = player.constantan.points.sub(15000),
                    player.lead.points = player.lead.points.sub(2e9)
            },
            unlocked() { return hasUpgrade(ct, 82) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #d39f49 0%, #ffd37c 30%, #eeba4f 80%, #7d6233 100%)",
                    'background-color': '#eeba4f',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        211: {
            title() {
                let t = "殷钢合成台"
                return t
            },
            display() {
                let d = `
                需要工具：铝质合成台 + 铅锤 + 1e1590合成台（消耗）<br>
                需要材料：100殷钢锭<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：合成的速度变为77x<br>`
                return d
            },
            complexity: d(1e10),
            canClick() { return player.crafting_table.points.gte('1e1590') && player.invar.points.gte(100) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(151) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.crafting_table.points = player.crafting_table.points.sub('1e1590'),
                    player.invar.points = player.invar.points.sub(100)
            },
            unlocked() { return hasUpgrade(ct, 83) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #979a90 0%, #bcc4ba 20%, #e2e7e5 75%, #95a7a1 90%, #697672 100%)",
                    'background-color': '#95a7a1',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        212: {
            title() {
                let t = "殷钢斧"
                return t
            },
            display() {
                let d = `
                需要工具：殷钢合成台 + 铅锤<br>
                需要材料：100殷钢锭 + 200木头<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：1e2000x木头获取，解锁一些自动化升级<br>
                挖掘等级：3`
                return d
            },
            complexity: d(1.8e10),
            canClick() { return player.crafting_table.points.gte(1) && player.invar.points.gte(100) && player.wood.points.gte(200) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(211) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.wood.points = player.wood.points.sub(200),
                    player.invar.points = player.invar.points.sub(100)
            },
            unlocked() { return hasUpgrade(ct, 84) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #979a90 0%, #bcc4ba 20%, #e2e7e5 75%, #95a7a1 90%, #697672 100%)",
                    'background-color': '#95a7a1',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        221: {
            title() {
                let t = "殷钢镐"
                return t
            },
            display() {
                let d = `
                需要工具：殷钢合成台 + 铅锤<br>
                需要材料：120殷钢锭 + 200木头<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：1e2000x石头获取<br>
                挖掘等级：3`
                return d
            },
            complexity: d(2.8e10),
            canClick() { return player.crafting_table.points.gte(1) && player.invar.points.gte(120) && player.wood.points.gte(200) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(211) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.wood.points = player.wood.points.sub(200),
                    player.invar.points = player.invar.points.sub(120)
            },
            unlocked() { return hasUpgrade(ct, 85) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #979a90 0%, #bcc4ba 20%, #e2e7e5 75%, #95a7a1 90%, #697672 100%)",
                    'background-color': '#95a7a1',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        222: {
            title() {
                let t = "4阶太阳能板"
                return t
            },
            display() {
                let d = `
                需要工具：殷钢合成台 + 铅锤<br>
                需要材料：120殷钢锭 + ${f(300000)}玻璃<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：RF发电速度x15<br>`
                return d
            },
            complexity: d(5.6e10),
            canClick() { return player.crafting_table.points.gte(1) && player.invar.points.gte(120) && player.furnace.glass.gte(300000) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(211) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.furnace.glass = player.furnace.glass.sub(300000),
                    player.invar.points = player.invar.points.sub(120)
            },
            unlocked() { return hasUpgrade(ct, 91) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #979a90 0%, #bcc4ba 20%, #e2e7e5 75%, #95a7a1 90%, #697672 100%)",
                    'background-color': '#95a7a1',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        231: {
            title() {
                let t = "热力机械外壳"
                return t
            },
            display() {
                let d = `
                需要工具：殷钢合成台 + 铅锤<br>
                需要材料：240殷钢锭 + 32镍齿轮 + 40铅板 + ${f(500000)}玻璃<br>
                复杂度：${formatWhole(this.complexity)}<br>
                数量：${fw(player[ct].items[231])}<br>`
                return d
            },
            complexity: d(1.12e11),
            canClick() { return player.crafting_table.points.gte(1) && player.invar.points.gte(240) && player[ct].items[141].gte(32) && player[ct].items[182].gte(40) && player.furnace.glass.gte(500000) && !player.crafting_table.crafting && hasCraftingItem(211) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player[ct].items[141] = player[ct].items[141].sub(32),
                    player[ct].items[182] = player[ct].items[182].sub(40),
                    player.furnace.glass = player.furnace.glass.sub(500000),
                    player.invar.points = player.invar.points.sub(240)
            },
            unlocked() { return hasUpgrade(ct, 92) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #979a90 0%, #bcc4ba 20%, #e2e7e5 75%, #95a7a1 90%, #697672 100%)",
                    'background-color': '#95a7a1',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        232: {
            title() {
                let t = "蓄水器"
                return t
            },
            display() {
                let d = `
                需要工具：殷钢合成台 + 铅锤<br>
                需要材料：1热力机械外壳 + 100铝锭<br>
                复杂度：${formatWhole(this.complexity)}<br>`
                return d
            },
            complexity: d(1.68e11),
            canClick() { return player.crafting_table.points.gte(1) && player.aluminum.points.gte(100) && player[ct].items[231].gte(1) && !hasCraftingItem(this.id) && !player.crafting_table.crafting && hasCraftingItem(211) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player[ct].items[231] = player[ct].items[231].sub(1),
                    player.aluminum.points = player.aluminum.points.sub(100)
            },
            unlocked() { return hasUpgrade(ct, 93) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #979a90 0%, #bcc4ba 20%, #e2e7e5 75%, #95a7a1 90%, #697672 100%)",
                    'background-color': '#95a7a1',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        241: {
            title() {
                let t = "熔岩炉"
                return t
            },
            display() {
                let d = `
                需要工具：殷钢合成台 + 铅锤<br>
                需要材料：1热力机械外壳 + 100铁锭<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：熔炼的速度x1.8`
                return d
            },
            complexity: d(2.16e11),
            canClick() { return player.crafting_table.points.gte(1) && player.iron.points.gte(100) && player[ct].items[231].gte(1) && !hasCraftingItem(this.id) && !player.crafting_table.crafting && hasCraftingItem(211) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player[ct].items[231] = player[ct].items[231].sub(1),
                    player.iron.points = player.iron.points.sub(100)
            },
            unlocked() { return hasUpgrade(ct, 94) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #979a90 0%, #bcc4ba 20%, #e2e7e5 75%, #95a7a1 90%, #697672 100%)",
                    'background-color': '#95a7a1',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        242: {
            title() {
                let t = "硬化转换套件"
                return t
            },
            display() {
                let d = `
                需要工具：殷钢合成台 + 铅锤<br>
                需要材料：1镍齿轮 + 4殷钢锭 + ${f(1e9)}RF<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：1个使蓄水器效率变为10x、3个使熔岩炉效率变为10x、5个解锁熔岩炉熔炼金属<br>
                数量：${fw(player[ct].items[242])}/5<br>`
                return d
            },
            complexity: d(4.42e11),
            canClick() { return player.crafting_table.points.gte(1) && player.invar.points.gte(4) && player.rf.points.gte(1e9) && player[ct].items[141].gte(1) && player[ct].items[242].lt(5) && !player.crafting_table.crafting && hasCraftingItem(211) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player[ct].items[141] = player[ct].items[141].sub(1),
                    player.invar.points = player.invar.points.sub(4),
                    player.rf.points = player.rf.points.sub(1e9)
            },
            unlocked() { return hasUpgrade(ct, 95) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #979a90 0%, #bcc4ba 20%, #e2e7e5 75%, #95a7a1 90%, #697672 100%)",
                    'background-color': '#95a7a1',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        251: {
            title() {
                let t = "殷钢维度启动器"
                return t
            },
            display() {
                let d = `
                需要工具：殷钢合成台 + 铅锤<br>
                需要材料：${f(3000)}殷钢锭<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：解锁殷钢维度<br>`
                return d
            },
            complexity: d(1e12),
            canClick() { return player.crafting_table.points.gte(1) && player.invar.points.gte(3000) && !hasCraftingItem(this.id) && !player.crafting_table.crafting && hasCraftingItem(211) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.invar.points = player.invar.points.sub(3000)
            },
            unlocked() { return hasUpgrade(ct, 101) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #979a90 0%, #bcc4ba 20%, #e2e7e5 75%, #95a7a1 90%, #697672 100%)",
                    'background-color': '#95a7a1',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        252: {
            title() {
                let t = "铝黄铜镐"
                return t
            },
            display() {
                let d = `
                需要工具：殷钢合成台 + 铅锤<br>
                需要材料：150铝黄铜锭 + 200木头<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：白桦原木的效果变得更强，非常强<br>
                挖掘等级：3`
                return d
            },
            complexity: d(1.125e12),
            canClick() { return player.crafting_table.points.gte(1) && player.alumbrass.points.gte(150) && player.wood.points.gte(200) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(211) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.wood.points = player.wood.points.sub(200),
                    player.alumbrass.points = player.alumbrass.points.sub(150)
            },
            unlocked() { return hasUpgrade(ct, 102) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #e6c34b 0%, #f0d467 30%, #e6c34b 75%, #ab7d1b 100%)",
                    'background-color': '#f0d467',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        261: {
            title() {
                let t = "锌制探矿杖"
                return t
            },
            display() {
                let d = `
                需要工具：殷钢合成台 + 铅锤<br>
                需要材料：45锌锭 + ${f(1000000)}玻璃<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：找矿的速度变为10x（你一定很需要这样的提升，久等了！）`
                return d
            },
            complexity: d(1.250e12),
            canClick() { return player.crafting_table.points.gte(1) && player.zinc.points.gte(45) && player.furnace.glass.gte(1000000) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(211) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.furnace.glass = player.furnace.glass.sub(1000000),
                    player.zinc.points = player.zinc.points.sub(45)
            },
            unlocked() { return hasUpgrade(ct, 103) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #a3be9e 0%, #fcfcfc 10%, #b7e6bf 40%, #b7e6bf 60%, #d3fcd9 80%, #4f6c62 100%)",
                    'background-color': '#b7e6bf',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        262: {
            title() {
                let t = "锌镐"
                return t
            },
            display() {
                let d = `
                需要工具：殷钢合成台 + 铅锤<br>
                需要材料：300锌锭 + 200木头<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：挖掘速度变为2.25x，青铜力量强化器MK.4的指数上的系数+5<br>
                挖掘等级：3`
                return d
            },
            complexity: d(1.5e12),
            canClick() { return player.crafting_table.points.gte(1) && player.zinc.points.gte(300) && player.wood.points.gte(200) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(211) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.wood.points = player.wood.points.sub(200),
                    player.zinc.points = player.zinc.points.sub(300)
            },
            unlocked() { return hasUpgrade(ct, 104) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #a3be9e 0%, #fcfcfc 10%, #b7e6bf 40%, #b7e6bf 60%, #d3fcd9 80%, #4f6c62 100%)",
                    'background-color': '#b7e6bf',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        271: {
            title() {
                let t = "黄铜合成站"
                return t
            },
            display() {
                let d = `
                需要工具：殷钢合成台 + 铅锤<br>
                需要材料：300黄铜锭 + ${f(5000)}石头<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：合成的速度变为100x`
                return d
            },
            complexity: d(2.5e12),
            canClick() { return player.crafting_table.points.gte(1) && player.brass.points.gte(300) && player.stone.points.gte(5000) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(211) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.stone.points = player.stone.points.sub(5000),
                    player.brass.points = player.brass.points.sub(300)
            },
            unlocked() { return hasUpgrade(ct, 105) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #fce892 0%, #fce892 30%,  #f8ac67 60%, #f8ac67 80%, #75452c 100%)",
                    'background-color': '#f8ac67',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        272: {
            title() {
                let t = "黄铜镐"
                return t
            },
            display() {
                let d = `
                需要工具：黄铜合成站 + 铅锤<br>
                需要材料：300黄铜锭 + 200木头<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：100x锌矿石获取以及锌锭熔炼倍率<br>
                挖掘等级：3`
                return d
            },
            complexity: d(5e12),
            canClick() { return player.crafting_table.points.gte(1) && player.brass.points.gte(300) && player.wood.points.gte(200) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(271) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.wood.points = player.wood.points.sub(200),
                    player.brass.points = player.brass.points.sub(300)
            },
            unlocked() { return hasUpgrade(ct, 111) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #fce892 0%, #fce892 30%,  #f8ac67 60%, #f8ac67 80%, #75452c 100%)",
                    'background-color': '#f8ac67',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        281: {
            title() {
                let t = "黄铜齿轮"
                return t
            },
            display() {
                let d = `
                需要工具：黄铜合成站 + 铅锤<br>
                需要材料：4黄铜锭<br>
                复杂度：${formatWhole(this.complexity)}<br>
                倍率：${fw(this.mult())}<br>
                数量：${fw(player[ct].items[281])}<br>`
                return d
            },
            complexity: d(6e12),
            mult() {
                let m = d(1)
                if (hasUpgrade(brass, 24)) m = player.brass.points.max(1).pow(0.3).floor()
                return m
            },
            effectiveMult() {
                return this.mult().min(player.brass.points.div(4).floor())
            },
            canClick() { return player.crafting_table.points.gte(1) && player.brass.points.gte(d(4)) && !player.crafting_table.crafting && hasCraftingItem(271) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.brass.points = player.brass.points.sub(d(4).times(this.effectiveMult()))
            },
            unlocked() { return hasUpgrade(ct, 112) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #fce892 0%, #fce892 30%,  #f8ac67 60%, #f8ac67 80%, #75452c 100%)",
                    'background-color': '#f8ac67',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        282: {
            title() {
                let t = "水车"
                return t
            },
            display() {
                let d = `
                需要工具：黄铜合成站 + 铅锤<br>
                需要材料：1黄铜齿轮 + 200石头 + 200木头<br>
                复杂度：${formatWhole(this.complexity)}<br>
                倍率：${fw(this.mult())}<br>
                数量：${fw(player[ct].items[282])} ${hasUpgrade(steel, 11) ? `(${fw(this.mult())}/s)` : ""}<br>
                效果：需要合成应力表后才可发挥用途`
                return d
            },
            complexity: d(8e12),
            mult() {
                let m = d(1)
                if (hasUpgrade(brass, 24)) m = player.brass.points.max(1).pow(0.3).floor()
                return m
            },
            effectiveMult() {
                let m = this.mult()
                m = m.min(player.crafting_table.items[281]).min(player.wood.points.div(200).floor()).min(player.stone.points.div(200).floor())
                return m
            },
            autoCraft(diff) {
                if (hasUpgrade(steel, 11)) player.crafting_table.items[282] = player.crafting_table.items[282].add(this.mult().times(diffout))
            },
            canClick() { return player.crafting_table.points.gte(1) && player.crafting_table.items[281].gte(1) && player.wood.points.gte(d(200)) && player.stone.points.gte(d(200)) && !player.crafting_table.crafting && hasCraftingItem(271) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.wood.points = player.wood.points.sub(d(200).times(this.effectiveMult())),
                    player.stone.points = player.stone.points.sub(d(200).times(this.effectiveMult())),
                    player.crafting_table.items[281] = player.crafting_table.items[281].sub(this.effectiveMult())
            },
            unlocked() { return hasUpgrade(ct, 113) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #fce892 0%, #fce892 30%,  #f8ac67 60%, #f8ac67 80%, #75452c 100%)",
                    'background-color': '#f8ac67',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        291: {
            title() {
                let t = "应力表"
                return t
            },
            display() {
                let d = `
                需要工具：黄铜合成站 + 铅锤<br>
                需要材料：300黄铜锭 + 200石头 + 200木头<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：解锁黄铜层级应力界面`
                return d
            },
            complexity: d(1e13),
            canClick() { return player.crafting_table.points.gte(1) && player.brass.points.gte(300) && player.wood.points.gte(200) && player.stone.points.gte(200) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(271) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.wood.points = player.wood.points.sub(200),
                    player.stone.points = player.stone.points.sub(200),
                    player.brass.points = player.brass.points.sub(300)
            },
            unlocked() { return hasUpgrade(ct, 114) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #fce892 0%, #fce892 30%,  #f8ac67 60%, #f8ac67 80%, #75452c 100%)",
                    'background-color': '#f8ac67',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        292: {
            title() {
                let t = "钢斧"
                return t
            },
            display() {
                let d = `
                需要工具：黄铜合成站 + 铅锤<br>
                需要材料：96钢锭 + 200木头<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：丛林、金合欢原木的获取公式变得更好<br>
                挖掘等级：3`
                return d
            },
            complexity: d(1.96e13),
            canClick() { return player.crafting_table.points.gte(1) && player.steel.points.gte(96) && player.wood.points.gte(200) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(271) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.wood.points = player.wood.points.sub(200),
                    player.steel.points = player.steel.points.sub(96)
            },
            unlocked() { return hasUpgrade(ct, 115) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #7a7a7a 0%, #adadad 30%, #adadad 80%, #989898 90%, #414141 100%)",
                    'background-color': '#adadad',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        301: {
            title() {
                let t = "钢镐"
                return t
            },
            display() {
                let d = `
                需要工具：黄铜合成站 + 铅锤<br>
                需要材料：575钢锭 + 200木头<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：钢锭效果现在也能加成锌矿石连锁倍数<br>
                挖掘等级：3`
                return d
            },
            complexity: d(2.94e13),
            canClick() { return player.crafting_table.points.gte(1) && player.steel.points.gte(575) && player.wood.points.gte(200) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(271) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.wood.points = player.wood.points.sub(200),
                    player.steel.points = player.steel.points.sub(575)
            },
            unlocked() { return hasUpgrade(ct, 121) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #7a7a7a 0%, #adadad 30%, #adadad 80%, #989898 90%, #414141 100%)",
                    'background-color': '#adadad',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        302: {
            title() {
                let t = "钢熔炉"
                return t
            },
            display() {
                let d = `
                需要工具：黄铜合成站 + 铅锤 + 1e4330熔炉（消耗）<br>
                需要材料：700钢锭<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：钢锭熔炼倍率加成自动熔炼木炭的数量，解锁更多钢升级<br>
                当前：${f(clickableEffect(ct, 302))}x`
                return d
            },
            complexity: d(3.92e13),
            effect() {
                let eff = tmp.blast_furnace.clickables[31].mult
                return eff
            },
            canClick() { return player.crafting_table.points.gte(1) && player.steel.points.gte(700) && player.furnace.points.gte("1e4330") && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(271) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.furnace.points = player.furnace.points.sub("1e4330"),
                    player.steel.points = player.steel.points.sub(700)
            },
            unlocked() { return hasUpgrade(ct, 122) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #7a7a7a 0%, #adadad 30%, #adadad 80%, #989898 90%, #414141 100%)",
                    'background-color': '#adadad',
                }
            },
            marked() { return hasCraftingItem(this.id) },
            tooltip() {
                let t = `公式：钢锭`
                return t
            },
        },
        311: {
            title() {
                let t = "银斧"
                return t
            },
            display() {
                let d = `
                需要工具：黄铜合成站 + 铅锤<br>
                需要材料：360银锭 + 200木头<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：木头获取变为原来的1.00e100,000x<br>
                挖掘等级：3`
                return d
            },
            complexity: d(5.5e13),
            canClick() { return player.crafting_table.points.gte(1) && player.silver.points.gte(360) && player.wood.points.gte(200) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(271) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.wood.points = player.wood.points.sub(200),
                    player.silver.points = player.silver.points.sub(360)
            },
            unlocked() { return hasUpgrade(ct, 123) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #65696b 0%, #bbc7ce 20%, #ddf2f5 40%, #9cc1ca 70%, #5ca0a6 100%)",
                    'background-color': '#ddf2f5',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        312: {
            title() {
                let t = "银镐"
                return t
            },
            display() {
                let d = `
                需要工具：黄铜合成站 + 铅锤<br>
                需要材料：720银锭 + 200木头<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：等级在85,600之后加成银矿石获取，解锁银矿场<br>
                当前：${f(clickableEffect(ct, 312))}x
                挖掘等级：3`
                return d
            },
            complexity: d(7.5e13),
            effect() {
                let eff = player.level.max(85600).sub(85600).div(8000).add(1).pow(2)
                return eff
            },
            canClick() { return player.crafting_table.points.gte(1) && player.silver.points.gte(720) && player.wood.points.gte(200) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(271) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.wood.points = player.wood.points.sub(200),
                    player.silver.points = player.silver.points.sub(720)
            },
            unlocked() { return hasUpgrade(ct, 124) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #65696b 0%, #bbc7ce 20%, #ddf2f5 40%, #9cc1ca 70%, #5ca0a6 100%)",
                    'background-color': '#ddf2f5',
                }
            },
            marked() { return hasCraftingItem(this.id) },
            tooltip() {
                let t = `公式：((等级-85,600)/8,000+1)<sup>2</sup>`
                return t
            },
        },
        321: {
            title() {
                let t = "金斧"
                return t
            },
            display() {
                let d = `
                需要工具：黄铜合成站 + 铅锤<br>
                需要材料：50金锭 + 200木头<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：10x伐木速度，1e250,000x木头获取<br>
                挖掘等级：3`
                return d
            },
            complexity: d(1e14),
            canClick() { return player.crafting_table.points.gte(1) && player.gold.points.gte(50) && player.wood.points.gte(200) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(271) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.wood.points = player.wood.points.sub(200),
                    player.gold.points = player.gold.points.sub(50)
            },
            unlocked() { return hasUpgrade(ct, 125) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #b26411 0%, #fdf55f 10%, #fffde0 20%, #fdf55f 30%, #fdf55f 80%, #752802 100%)",
                    'background-color': '#fdf55f',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        322: {
            title() {
                let t = "金镐"
                return t
            },
            display() {
                let d = `
                需要工具：黄铜合成站 + 铅锤<br>
                需要材料：50金锭 + 200木头<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：10x挖掘速度，1e80,000x石头获取，15x金矿石获取和金锭熔炼倍率<br>
                挖掘等级：3`
                return d
            },
            complexity: d(1.25e14),
            canClick() { return player.crafting_table.points.gte(1) && player.gold.points.gte(50) && player.wood.points.gte(200) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(271) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.wood.points = player.wood.points.sub(200),
                    player.gold.points = player.gold.points.sub(50)
            },
            unlocked() { return hasUpgrade(ct, 131) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #b26411 0%, #fdf55f 10%, #fffde0 20%, #fdf55f 30%, #fdf55f 80%, #752802 100%)",
                    'background-color': '#fdf55f',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        331: {
            title() {
                let t = "5阶太阳能板"
                return t
            },
            display() {
                let d = `
                需要工具：黄铜合成站 + 铅锤<br>
                需要材料：${f(1000)}金锭 + ${f(5e7)}玻璃<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：RF发电速度变为5x，解锁一些新自动化<br>`
                return d
            },
            complexity: d(1.5e14),
            canClick() { return player.crafting_table.points.gte(1) && player.gold.points.gte(1000) && player.furnace.glass.gte(50000000) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(271) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.furnace.glass = player.furnace.glass.sub(50000000),
                    player.gold.points = player.gold.points.sub(1000)
            },
            unlocked() { return hasUpgrade(ct, 132) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #b26411 0%, #fdf55f 10%, #fffde0 20%, #fdf55f 30%, #fdf55f 80%, #752802 100%)",
                    'background-color': '#fdf55f',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        332: {
            title() {
                let t = "时钟"
                return t
            },
            display() {
                let d = `
                需要工具：黄铜合成站 + 铅锤<br>
                需要材料：${f(1250)}金锭 + ${f(5e7)}玻璃 + ${f(5e18)}银锭<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：解锁时钟页面<br>`
                return d
            },
            complexity: d(1.8e14),
            canClick() { return player.crafting_table.points.gte(1) && player.gold.points.gte(1250) && player.furnace.glass.gte(50000000) && player.silver.points.gte(5e18) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(271) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.furnace.glass = player.furnace.glass.sub(50000000),
                    player.gold.points = player.gold.points.sub(1250),
                    player.silver.points = player.silver.points.sub(5e18)
            },
            unlocked() { return hasUpgrade(ct, 133) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #b26411 0%, #fdf55f 10%, #fffde0 20%, #fdf55f 30%, #fdf55f 80%, #752802 100%)",
                    'background-color': '#fdf55f',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        341: {
            title() {
                let t = "琥珀金镐"
                return t
            },
            display() {
                let d = `
                需要工具：黄铜合成站 + 铅锤<br>
                需要材料：${f(4500)}琥珀金锭 + 200木头<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：1e50x银矿石获取，解锁第二个主动技能<br>`
                return d
            },
            complexity: d(2.2e14),
            canClick() { return player.crafting_table.points.gte(1) && player.electrum.points.gte(4500) && player.wood.points.gte(200) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(271) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.electrum.points = player.electrum.points.sub(4500),
                    player.wood.points = player.wood.points.sub(200)
            },
            unlocked() { return hasUpgrade(ct, 134) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #c6ae49 0%, #f8ef85 20%, #ffff98 50%, #fffcbc 70%, #eee155 90%, #6c5e23 100%)",
                    'background-color': '#fffcbc',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        342: {
            title() {
                let t = "琥珀金探矿杖"
                return t
            },
            display() {
                let d = `
                需要工具：黄铜合成站 + 铅锤<br>
                需要材料：${f(150000)}琥珀金锭 + ${f(5e9)}玻璃<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：找矿速度变为5x，金层级第2个主动技能冷却时间减半，且令其力量变为1e25x，1e25x金矿石获取<br>`
                return d
            },
            complexity: d(2.6e14),
            canClick() { return player.crafting_table.points.gte(1) && player.electrum.points.gte(150000) && player.furnace.glass.gte(5e9) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(271) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.electrum.points = player.electrum.points.sub(150000),
                    player.furnace.glass = player.furnace.glass.sub(5e9)
            },
            unlocked() { return hasUpgrade(ct, 135) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #c6ae49 0%, #f8ef85 20%, #ffff98 50%, #fffcbc 70%, #eee155 90%, #6c5e23 100%)",
                    'background-color': '#fffcbc',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        351: {
            title() {
                let t = "琥珀金钻头"
                return t
            },
            display() {
                let d = `
                需要工具：黄铜合成站 + 铅锤<br>
                需要材料：${f(1.111e11)}琥珀金锭<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：解锁红石层级<br>
                挖掘等级：3<br>`
                return d
            },
            complexity: d(3e14),
            canClick() { return player.crafting_table.points.gte(1) && player.electrum.points.gte(1.111e11) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(271) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.electrum.points = player.electrum.points.sub(1.111e11)
            },
            unlocked() { return hasUpgrade(ct, 141) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #c6ae49 0%, #f8ef85 20%, #ffff98 50%, #fffcbc 70%, #eee155 90%, #6c5e23 100%)",
                    'background-color': '#fffcbc',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        352: {
            title() {
                let t = "红石琥珀金RF钻头"
                return t
            },
            display() {
                let d = `
                需要工具：黄铜合成站 + 铅锤<br>
                需要材料：${f(12000)}红石琥珀金锭<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：金锭加成一次挖掘的红石矿石数量<br>
                当前：${f(clickableEffect(ct, 352))}x<br>
                挖掘等级：3<br>`
                return d
            },
            effect() {
                let eff = d(10).pow(player.gold.points.div('1e5000').add(1).log10().pow(0.4))
                return eff
            },
            complexity: d(4e14),
            canClick() { return player.crafting_table.points.gte(1) && player.red_ele.points.gte(12000) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(271) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.red_ele.points = player.red_ele.points.sub(12000)
            },
            unlocked() { return hasUpgrade(ct, 142) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #c6ae49 0%, #f8ef85 20%, #ffff98 50%, #fffcbc 70%, #eee155 90%, #6c5e23 100%)",
                    'background-color': '#fffcbc',
                    'border-color': '#fc0000',
                }
            },
            marked() { return hasCraftingItem(this.id) },
            tooltip() {
                let t = `公式：10${quickSUP('lg(金锭/1e5000+1)<sup>0.4</sup>')}`
                return t
            },
        },
        361: {
            title() {
                let t = "6阶太阳能板"
                return t
            },
            display() {
                let d = `
                需要工具：黄铜合成站 + 铅锤<br>
                需要材料：${f(6000)}红石琥珀金锭 + ${f(1e16)}玻璃<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：RF发电速度变为5x，解锁一些新自动化，解锁第11琥珀金升级，自动购买金层级时钟界面购买项<br>`
                return d
            },
            complexity: d(5e14),
            canClick() { return player.crafting_table.points.gte(1) && player.red_ele.points.gte(6000) && player.furnace.glass.gte(1e16) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(271) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.furnace.glass = player.furnace.glass.sub(1e16),
                    player.red_ele.points = player.red_ele.points.sub(6000)
            },
            unlocked() { return hasUpgrade(ct, 143) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #c6ae49 0%, #f8ef85 20%, #ffff98 50%, #fffcbc 70%, #eee155 90%, #6c5e23 100%)",
                    'background-color': '#fffcbc',
                    'border-color': '#fc0000',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        362: {
            title() {
                let t = "红石琥珀金传导线圈"
                return t
            },
            display() {
                let d = `
                需要工具：黄铜合成站 + 铅锤<br>
                需要材料：${f(1e14)}红石琥珀金锭<br>
                复杂度：${formatWhole(this.complexity)}<br>
                倍率：${fw(this.mult())}<br>
                数量：${fw(player[ct].items[362])} ${hasUpgrade(obsidian, 11) ? `(${fw(this.mult().times(20))}/s)` : ""}<br>
                效果：首次合成后，解锁一个红石琥珀金层级界面<br>`
                return d
            },
            complexity: d(3.3333e14),
            mult() {
                let m = d(1)
                if (hasUpgrade(red_ele, 15)) m = m.times(upgradeEffect(red_ele, 15))
                return m
            },
            effectiveMult() {
                let m = this.mult()
                m = m.min(player.red_ele.points.div(1e14).floor())
                return m
            },
            autoCraft(diff) {
                if (hasUpgrade(diamond, 11)) player.crafting_table.items[362] = player.crafting_table.items[362].add(this.mult().times(diffout).times(20))
            },
            canClick() { return player.crafting_table.points.gte(1) && player.red_ele.points.gte(1e14) && !player.crafting_table.crafting && hasCraftingItem(271) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.red_ele.points = player.red_ele.points.sub(this.effectiveMult().times(1e14))
            },
            unlocked() { return hasUpgrade(ct, 144) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #c6ae49 0%, #f8ef85 20%, #ffff98 50%, #fffcbc 70%, #eee155 90%, #6c5e23 100%)",
                    'background-color': '#fffcbc',
                    'border-color': '#fc0000',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        371: {
            title() {
                let t = "RF生物群系指南针"
                return t
            },
            display() {
                let d = `
                需要工具：黄铜合成站 + 铅锤<br>
                需要材料：${f(1e45)}红石琥珀金锭 + ${f('1e640000')}铁锭<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：通过RF生物群系指南针，你开始在世界中有目的地探索，在世界层级，你发现了……<br>解锁新的合成配方<br>`
                return d
            },
            complexity: d(3.69e15),
            canClick() { return player.crafting_table.points.gte(1) && player.red_ele.points.gte(1e45) && player.iron.points.gte('1e640000') && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(271) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.iron.points = player.iron.points.sub('1e640000'),
                    player.red_ele.points = player.red_ele.points.sub(1e45)
            },
            unlocked() { return hasUpgrade(ct, 145) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #c6ae49 0%, #f8ef85 20%, #ffff98 50%, #fffcbc 70%, #eee155 90%, #6c5e23 100%)",
                    'background-color': '#fffcbc',
                    'border-color': '#fc0000',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        372: {
            title() {
                let t = "花药台"
                return t
            },
            display() {
                let d = `
                需要工具：黄铜合成站 + 铅锤<br>
                需要材料：1白色神秘花瓣 + ${f('e1.3666e20')}石头<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：解锁新的制造层级和其的花药台界面<br>`
                return d
            },
            complexity: d(4e15),
            canClick() { return player.crafting_table.points.gte(1) && player.stone.points.gte('e1.3666e20') && player.map.botania.flower.white[1].gte(1) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(271) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.stone.points = player.stone.points.sub('e1.3666e20'),
                    player.map.botania.flower.white[1] = player.map.botania.flower.white[1].sub(1)
            },
            unlocked() { return hasUpgrade(ct, 151) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    'background-color': '#4a4a4a',
                    'border-color': '#ddeaea',
                    color: 'white',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        381: {
            title() {
                let t = "魔力发射器"
                return t
            },
            display() {
                let d = `
                需要工具：黄铜合成站 + 铅锤<br>
                需要材料：*1任意神秘花瓣 + 6活木 + 1铜锭<br>
                复杂度：${formatWhole(this.complexity)}<br>
                数量：${fw(player[ct].items[381])}/10<br>
                效果：允许你传输魔力<br>`
                return d
            },
            complexity: d(5e15),
            canClick() { return player.crafting_table.points.gte(1) && player.botania.livingwood.gte(6) && player.map.botania.flower.white[1].add(player.map.botania.flower.lightgray[1]).add(player.map.botania.flower.red[1]).add(player.map.botania.flower.brown[1]).gte(1) && player.copper.points.gte(1) && !player.crafting_table.crafting && player[ct].items[381].lt(10) && hasCraftingItem(271) && hasCraftingItem(181) },
            onClick() {
                let useChoice = "white"
                let flower = player.map.botania.flower
                for (let id in flower) {
                    if (!flower[id][1]) continue
                    else if (flower[useChoice][1].lt(flower[id][1])) useChoice = id
                }
                console.log("选中" + useChoice + "为魔力发射器材料")
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.copper.points = player.copper.points.sub(1),
                    player.botania.livingwood = player.botania.livingwood.sub(6),
                    player.map.botania.flower[useChoice][1] = player.map.botania.flower[useChoice][1].sub(1)
            },
            unlocked() { return hasUpgrade(ct, 152) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    'background-color': '#40190b',
                    color: 'white',
                }
            },
            marked() { return hasCraftingItem(this.id) },
            tooltip() {
                return '*神秘花瓣会选择你当前数量最多的花瓣种类消耗'
            },
        },
        382: {
            title() {
                let t = "魔力池"
                return t
            },
            display() {
                let d = `
                需要工具：黄铜合成站 + 铅锤<br>
                需要材料：5活石<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：在植物魔法层解锁魔力池页面和第2个能源层：魔力<br>`
                return d
            },
            complexity: d(5e15),
            canClick() { return player.crafting_table.points.gte(1) && player.botania.livingrock.gte(5) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(271) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.botania.livingrock = player.botania.livingrock.sub(6)
            },
            unlocked() { return hasUpgrade(ct, 153) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    'background-color': '#c0bca2',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        391: {
            title() {
                let t = "魔钢镐"
                return t
            },
            display() {
                let d = `
                需要工具：黄铜合成站 + 铅锤<br>
                需要材料：1,000魔力钢锭 + 100活木<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：${f(1e100)}x一次挖掘的红石矿石数量<br>`
                return d
            },
            complexity: d(5e15),
            canClick() { return player.crafting_table.points.gte(1) && player.botania.livingwood.gte(100) && player.manasteel.points.gte(1000) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(271) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.botania.livingwood = player.botania.livingwood.sub(100),
                    player.manasteel.points = player.manasteel.points.sub(1000)
            },
            unlocked() { return hasUpgrade(ct, 154) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    'background-color': '#005ee0',
                    background: "linear-gradient(45deg, #005ee0 0%, #7db4ff 20%, #006bff 80%, #0045a3 100%)"
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        392: {
            title() {
                let t = "魔力透镜"
                return t
            },
            display() {
                let d = `
                需要工具：黄铜合成站 + 铅锤<br>
                需要材料：1,000魔力钢锭 + ${f(1e20)}玻璃<br>
                复杂度：${formatWhole(this.complexity)}<br>
                数量：${fw(player[ct].items[392])}<br>
                效果：至少有1个时，合成速度变为15x<br>`
                return d
            },
            complexity: d(7.5e15),
            canClick() { return player.crafting_table.points.gte(1) && player.furnace.glass.gte(1e20) && player.manasteel.points.gte(1000) && !player.crafting_table.crafting && hasCraftingItem(271) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.furnace.glass = player.furnace.glass.sub(1e20),
                    player.manasteel.points = player.manasteel.points.sub(1000)
            },
            unlocked() { return hasUpgrade(ct, 155) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    'background-color': '#005ee0',
                    background: "linear-gradient(45deg, #005ee0 0%, #7db4ff 20%, #006bff 80%, #0045a3 100%)"
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        401: {
            title() {
                let t = "魔力共鸣器"
                return t
            },
            display() {
                let d = `
                需要工具：黄铜合成站 + 铅锤<br>
                需要材料：6魔力透镜 + ${f(1000000)}魔力<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：你向魔力共鸣器中注入了足够的魔力，它指引你去寻找主世界中……更深处且更强大的矿物<br>
                解锁两个新世界1的层级和一些自动化升级<br>`
                return d
            },
            complexity: d(1.25e16),
            canClick() { return player.crafting_table.points.gte(1) && player[ct].items[392].gte(6) && player.manasteel.points.gte(1000) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(271) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player[ct].items[392] = player[ct].items[392].sub(6),
                    player.mana.points = player.mana.points.sub(1000000)
            },
            unlocked() { return hasUpgrade(ct, 161) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    'background-color': '#005ee0',
                    background: "linear-gradient(45deg, #005ee0 0%, #7db4ff 20%, #006bff 80%, #0045a3 100%)"
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        402: {
            title() {
                let t = "铂镐"
                return t
            },
            display() {
                let d = `
                需要工具：黄铜合成站 + 铅锤<br>
                需要材料：150铂锭<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：5x铂矿石获取，3x铂锭熔炼倍率<br>
                挖掘等级：4<br>`
                return d
            },
            complexity: d(1.6e16),
            canClick() { return player.crafting_table.points.gte(1) && player.platinum.points.gte(150) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(271) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.platinum.points = player.platinum.points.sub(150)
            },
            unlocked() { return hasUpgrade(ct, 162) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    'background-color': '#c8fbff'
                }
            },
            styleClass: "platinum45deg",
            marked() { return hasCraftingItem(this.id) },
        },
        411: {
            title() {
                let t = "7阶太阳能板"
                return t
            },
            display() {
                let d = `
                需要工具：黄铜合成站 + 铅锤<br>
                需要材料：600铂锭 + 3钻石 + ${f(1e21)}玻璃<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：3xRF发电速度，解锁更多自动化，在红石通量层级和合金炉层级中各添加一个目前阶段还无法使用的配方<br>`
                return d
            },
            complexity: d(2e16),
            canClick() { return player.crafting_table.points.gte(1) && player.platinum.points.gte(600) && player.diamond.points.gte(3) && player.furnace.glass.gte(1e21) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(271) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.platinum.points = player.platinum.points.sub(600),
                    player.diamond.points = player.diamond.points.sub(3),
                    player.furnace.glass = player.furnace.glass.sub(1e21)
            },
            unlocked() { return hasUpgrade(ct, 163) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    'background-color': '#c8fbff'
                }
            },
            styleClass: "platinum45deg",
            marked() { return hasCraftingItem(this.id) },
        },
        412: {
            title() {
                let t = "钻石斧"
                return t
            },
            display() {
                let d = `
                需要工具：黄铜合成站 + 铅锤<br>
                需要材料：${f(7000000)}钻石<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：允许你撸树时获得深色橡木原木<br>
                挖掘等级：5<br>`
                return d
            },
            complexity: d(3e16),
            canClick() { return player.crafting_table.points.gte(1) && player.diamond.points.gte(7000000) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(271) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.diamond.points = player.diamond.points.sub(7000000)
            },
            unlocked() { return hasUpgrade(ct, 164) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    'background-color': '#a2fbea'
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        421: {
            title() {
                let t = "钻石镐"
                return t
            },
            display() {
                let d = `
                需要工具：黄铜合成站 + 铅锤<br>
                需要材料：${f(12000000)}钻石<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：解锁黑曜石层级，挖掘速度变为3x。熔岩与水结合，产生极坚硬之物<br>
                挖掘等级：5<br>`
                return d
            },
            complexity: d(6e16),
            canClick() { return player.crafting_table.points.gte(1) && player.diamond.points.gte(12000000) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(271) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.diamond.points = player.diamond.points.sub(12000000)
            },
            unlocked() { return hasUpgrade(ct, 165) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    'background-color': '#a2fbea'
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        422: {
            title() {
                let t = "钻石合成台"
                return t
            },
            display() {
                let d = `
                需要工具：黄铜合成站 + 铅锤<br>
                需要材料：${f(3e10)}钻石 + ${f(3e27)}玻璃<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：合成速度变为25x，将成就点数的效果改为对第1红石升级效果的指数提升，但是效果倍率降低。同时修改第9铝升级的效果<br>`
                return d
            },
            complexity: d(1.5e17),
            canClick() { return player.crafting_table.points.gte(1) && player.diamond.points.gte(3e10) && player.furnace.glass.gte(3e27) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(271) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.diamond.points = player.diamond.points.sub(12000000),
                    player.furnace.glass = player.furnace.glass.sub(3e27)
            },
            unlocked() { return hasUpgrade(ct, 171) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    'background-color': '#a2fbea'
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        431: {
            title() {
                let t = "无暇探测器"
                return t
            },
            display() {
                let d = `
                需要工具：钻石合成台 + 铅锤<br>
                需要材料：1热力机械外壳 + 3黑曜石 + ${f(5e10)}钻石 + ${f('1e3100')}红石粉<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：在钻石层级解锁无暇界面<br>`
                return d
            },
            complexity: d(2.18e17),
            canClick() { return player.crafting_table.points.gte(1) && player.diamond.points.gte(5e10) && player.obsidian.points.gte(3) && player.redstone.points.gte('1e3100') && hasCraftingItem(231) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(422) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.diamond.points = player.diamond.points.sub(5e10),
                    player.obsidian.points = player.obsidian.points.sub(3),
                    player.redstone.points = player.redstone.points.sub('1e3100'),
                    player.crafting_table.items[231] = player.crafting_table.items[231].sub(1)
            },
            unlocked() { return hasUpgrade(ct, 172) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    'background-color': '#a2fbea'
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        432: {
            title() {
                let t = "黑曜石斧"
                return t
            },
            display() {
                let d = `
                需要工具：钻石合成台 + 铅锤<br>
                需要材料：300黑曜石<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：深色橡木的效果变为原来的^1.15<br>
                挖掘等级：6`
                return d
            },
            complexity: d(2.88e17),
            canClick() { return player.crafting_table.points.gte(1) && player.obsidian.points.gte(300) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(422) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.obsidian.points = player.obsidian.points.sub(300)
            },
            unlocked() { return hasUpgrade(ct, 173) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    'background-color': '#392a50',
                    color: 'white'
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        441: {
            title() {
                let t = "黑曜石镐"
                return t
            },
            display() {
                let d = `
                需要工具：钻石合成台 + 铅锤<br>
                需要材料：300黑曜石<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：10x黑曜石和玄武岩获取，1.25x挖掘速度<br>
                挖掘等级：6`
                return d
            },
            complexity: d(3.88e17),
            canClick() { return player.crafting_table.points.gte(1) && player.obsidian.points.gte(300) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(422) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.obsidian.points = player.obsidian.points.sub(300)
            },
            unlocked() { return hasUpgrade(ct, 174) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    'background-color': '#392a50',
                    color: 'white'
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        442: {
            title() {
                let t = "黑曜石齿轮"
                return t
            },
            display() {
                let d = `
                需要工具：钻石合成台 + 铅锤<br>
                需要材料：400黑曜石<br>
                复杂度：${formatWhole(this.complexity)}<br>
                数量：${fw(player[ct].items[442])}`
                return d
            },
            complexity: d(2e17),
            canClick() { return player.crafting_table.points.gte(1) && player.obsidian.points.gte(400) && !player.crafting_table.crafting && hasCraftingItem(422) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.obsidian.points = player.obsidian.points.sub(400)
            },
            unlocked() { return hasUpgrade(ct, 175) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    'background-color': '#392a50',
                    color: 'white'
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        451: {
            title() {
                let t = "磨粉机"
                return t
            },
            display() {
                let d = `
                需要工具：钻石合成台 + 铅锤<br>
                需要材料：1热力机械外壳 + 4黑曜石齿轮 + ${f(5.353e53)}玻璃 + ${f('1.122e33669')}红石粉<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：在红石通量层解锁磨粉机界面`
                return d
            },
            complexity: d(4e17),
            canClick() { return player.crafting_table.points.gte(1) && player[ct].items[442].gte(4) && player.furnace.glass.gte(5.353e53) && player.redstone.points.gte('1.122e33669') && !hasCraftingItem(this.id) && hasCraftingItem(231) && !player.crafting_table.crafting && hasCraftingItem(422) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player[ct].items[442] = player[ct].items[442].sub(4),
                    player.furnace.glass = player.furnace.glass.sub(5.353e53),
                    player.redstone.points = player.redstone.points.sub('1.122e33669'),
                    player[ct].items[231] = player[ct].items[231].sub(1)
            },
            unlocked() { return hasUpgrade(ct, 181) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    'background-color': '#392a50',
                    color: 'white'
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        452: {
            title() {
                let t = "强化升级套件"
                return t
            },
            display() {
                let d = `
                需要工具：钻石合成台 + 铅锤<br>
                需要材料：10银锭 + 10琥珀金锭 + 10硬化玻璃<br>
                复杂度：${formatWhole(this.complexity)}<br>
                数量：${fw(player[ct].items[452])}<br>
                效果：1个使蓄水器效率变为${f(2000)}x，5个使熔岩炉效率变为${f(2000)}x，20个使磨粉机效率变为3x`
                return d
            },
            complexity: d(5e17),
            canClick() { return player.crafting_table.points.gte(1) && player.silver.points.gte(10) && player.electrum.points.gte(10) && player.alloy_s.hardenedGlass.gte(10) && hasCraftingItem(231) && !player.crafting_table.crafting && hasCraftingItem(422) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.silver.points = player.silver.points.sub(10),
                    player.electrum.points = player.electrum.points.sub(10),
                    player.alloy_s.hardenedGlass = player.alloy_s.hardenedGlass.sub(10)
            },
            unlocked() { return hasUpgrade(ct, 182) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    "background": "linear-gradient(45deg, #c6ae49 0%, #f8ef85 20%, #ffff98 50%, #fffcbc 70%, #eee155 90%, #6c5e23 100%)",
                    'background-color': '#fffcbc',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        461: {
            title() {
                let t = "绿宝石激光发射器"
                return t
            },
            display() {
                let d = `
                需要工具：钻石合成台 + 铅锤<br>
                需要材料：${f(2.25e28)}绿宝石 + 25红石琥珀金锭 + 25硬化玻璃<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：2.5x挖掘速度，${f(100000)}x黑曜石获取<br>`
                return d
            },
            complexity: d(6.88e17),
            canClick() { return player.crafting_table.points.gte(1) && player.emerald.points.gte(2.25e28) && player.red_ele.points.gte(25) && player.alloy_s.hardenedGlass.gte(25) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(422) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.emerald.points = player.emerald.points.sub(2.25e28),
                    player.red_ele.points = player.red_ele.points.sub(25),
                    player.alloy_s.hardenedGlass = player.alloy_s.hardenedGlass.sub(25)
            },
            unlocked() { return hasUpgrade(ct, 183) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    'background-color': '#17dd61',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        462: {
            title() {
                let t = "8阶太阳能板"
                return t
            },
            display() {
                let d = `
                需要工具：钻石合成台 + 铅锤<br>
                需要材料：${f(1.25e30)}绿宝石 + 25红石琥珀金锭 + 125硬化玻璃<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：8.5xRF发电速度，解锁更多自动化升级，且3x磨粉机基础效率<br>`
                return d
            },
            complexity: d(7.88e17),
            canClick() { return player.crafting_table.points.gte(1) && player.emerald.points.gte(1.25e30) && player.red_ele.points.gte(125) && player.alloy_s.hardenedGlass.gte(125) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(422) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.emerald.points = player.emerald.points.sub(1.25e30),
                    player.red_ele.points = player.red_ele.points.sub(125),
                    player.alloy_s.hardenedGlass = player.alloy_s.hardenedGlass.sub(125)
            },
            unlocked() { return hasUpgrade(ct, 184) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    'background-color': '#17dd61',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        471: {
            title() {
                let t = "纸"
                return t
            },
            display() {
                let d = `
                需要工具：钻石合成台 + 铅锤<br>
                需要材料：3木屑<br>
                复杂度：${formatWhole(this.complexity)}<br>
                数量：${fw(player[ct].items[471])}`
                return d
            },
            complexity: d(1.5e17),
            canClick() { return player.crafting_table.points.gte(1) && player.wood.chips.gte(3) && !player.crafting_table.crafting && hasCraftingItem(422) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.wood.chips = player.wood.chips.sub(3)
            },
            unlocked() { return hasUpgrade(ct, 185) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    'background-color': '#fcfdf5',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        472: {
            title() {
                let t = "村庄英雄之书 - 残页"
                return t
            },
            display() {
                let d = `
                需要工具：钻石合成台 + 铅锤<br>
                需要材料：${f(2.25e30)}绿宝石 + 20纸<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：你现在可以和牧师进行交易，解锁神圣绿宝石<br>
                <i>村民们歌颂英雄的勇气和他保卫村庄的无私，在未来，是否还有这样一位英雄降临呢？</i>`
                return d
            },
            complexity: d(9.88e17),
            canClick() { return player.crafting_table.points.gte(1) && player.emerald.points.gte(2.25e30) && player[ct].items[471].gte(20) && !player.crafting_table.crafting && !hasCraftingItem(this.id) && hasCraftingItem(422) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.emerald.points = player.emerald.points.sub(2.25e30),
                    player[ct].items[471] = player[ct].items[471].sub(20)
            },
            unlocked() { return hasUpgrade(ct, 191) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    'background-color': '#17dd61',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        481: {
            title() {
                let t = "知识精华探矿杖"
                return t
            },
            display() {
                let d = `
                需要工具：钻石合成台 + 铅锤<br>
                需要材料：${f(1e38)}绿宝石 + 200硬化玻璃<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：5x找矿速度<br>`
                return d
            },
            complexity: d(1.28e18),
            canClick() { return player.crafting_table.points.gte(1) && player.experience.points.gte(1e38) && player.alloy_s.hardenedGlass.gte(200) && !hasCraftingItem(this.id) && !player.crafting_table.crafting && hasCraftingItem(422) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.experience.points = player.experience.points.sub(1e38),
                    player.alloy_s.hardenedGlass = player.alloy_s.hardenedGlass.sub(200)
            },
            unlocked() { return hasUpgrade(ct, 192) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    'background-color': '#b2ff59',
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        482: {
            title() {
                let t = "知识精华宝珠"
                return t
            },
            display() {
                let d = `
                需要工具：钻石合成台 + 铅锤<br>
                需要材料：${f(1e39)}绿宝石<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：二阶等级在51开始每级都能使知识精华锭获取变为10x<br>
                当前效果：${f(clickableEffect(this.layer, this.id))}x`
                return d
            },
            complexity: d(1.28e18),
            canClick() { return player.crafting_table.points.gte(1) && player.experience.points.gte(1e39) && !hasCraftingItem(this.id) && !player.crafting_table.crafting && hasCraftingItem(422) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.experience.points = player.experience.points.sub(1e39)
            },
            effect() {
                let eff = d(10).pow(player.tiers[0].sub(50).max(0))
                return eff
            },
            unlocked() { return hasUpgrade(ct, 193) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    'background-color': '#b2ff59',
                }
            },
            marked() { return hasCraftingItem(this.id) },
            tooltip() { return `公式：10${quickSUP('二阶等级-50')}` }
        },
        491: {
            title() {
                let t = "魔钢剑"
                return t
            },
            display() {
                let d = `
                需要工具：钻石合成台 + 铅锤<br>
                需要材料：${f(1e104)}魔力钢锭 + ${f(3000)}活木<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：在地图层解锁战斗界面<br>
                <i>当初我为了发展只能躲着怪物，如今不得不战斗了吗？看来时机已到……</i>`
                return d
            },
            complexity: d(2.56e18),
            canClick() { return player.crafting_table.points.gte(1) && player.manasteel.points.gte(1e104) && player.botania.livingwood.gte(3000) && !hasCraftingItem(this.id) && !player.crafting_table.crafting && hasCraftingItem(422) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.manasteel.points = player.manasteel.points.sub(1e104),
                    player.botania.livingwood = player.botania.livingwood.sub(3000)
            },
            unlocked() { return hasUpgrade(ct, 194) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    'background-color': '#005ee0',
                    'background': "linear-gradient(45deg, #005ee0 0%, #7db4ff 20%, #006bff 80%, #0045a3 100%)",
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        492: {
            title() {
                let t = "工厂环"
                return t
            },
            display() {
                let terrasteeltext = '[未解锁]'
                if (hasUpgrade(mana, 12)) terrasteeltext = '泰拉钢锭'
                let d = `
                需要工具：钻石合成台 + 铅锤<br>
                需要材料：${f(1.5e104)}魔力钢锭 + 4魔力珍珠 + 1魔力钻石<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：基础就有10x合成速度，且${terrasteeltext}的数量能强化工厂环的效果，硬上限在${f(10000000)}x<br>
                当前：${f(clickableEffect(this.layer, this.id))}x<br>`
                return d
            },
            complexity: d(5.12e18),
            canClick() { return player.crafting_table.points.gte(1) && player.manasteel.points.gte(1.5e104) && player.botania.mana_pearl.gte(4) && player.botania.mana_diamond.gte(1) && !hasCraftingItem(this.id) && !player.crafting_table.crafting && hasCraftingItem(422) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.manasteel.points = player.manasteel.points.sub(1.5e104),
                    player.botania.mana_pearl = player.botania.mana_pearl.sub(4),
                    player.botania.mana_diamond = player.botania.mana_diamond.sub(1)
            },
            effect() {
                let eff = d(10)
                if (hasUpgrade(mana, 12)) eff = eff.times(player.terrasteel.points.add(10).log10().pow(3)).min(10000000)
                return eff
            },
            unlocked() { return hasUpgrade(ct, 195) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    'background-color': '#005ee0',
                    'background': "linear-gradient(45deg, #005ee0 0%, #7db4ff 20%, #006bff 80%, #0045a3 100%)",
                }
            },
            marked() { return hasCraftingItem(this.id) },
            tooltip() {
                let terrasteeltext = '[未解锁]'
                if (hasUpgrade(mana, 12)) terrasteeltext = '泰拉钢锭'
                return `公式：10·lg(${terrasteeltext}+10)${quickSUP('3')}`
            }
        },
        501: {
            title() {
                let t = "泰拉凝聚板"
                return t
            },
            display() {
                let d = `
                需要工具：工厂环 + 铅锤<br>
                需要材料：${f(2e104)}魔力钢锭 + ${f(4000)}活石 + 50魔力钻石<br>
                复杂度：${formatWhole(this.complexity)}<br>
                效果：在植物魔法层解锁新界面：泰拉凝聚板<br>`
                return d
            },
            complexity: d(1.024e19),
            canClick() { return player.crafting_table.points.gte(1) && player.manasteel.points.gte(2e104) && player.botania.mana_diamond.gte(50) && player.botania.livingrock.gte(4000) && !hasCraftingItem(this.id) && !player.crafting_table.crafting && hasCraftingItem(492) && hasCraftingItem(181) },
            onClick() {
                player.crafting_table.crafting = true,
                    player.crafting_table.craftingItem = this.id,
                    player.manasteel.points = player.manasteel.points.sub(2e104),
                    player.botania.mana_diamond = player.botania.mana_diamond.sub(50),
                    player.botania.livingrock = player.botania.livingrock.sub(4000)
            },
            unlocked() { return hasUpgrade(ct, 201) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    'background-color': '#005ee0',
                    'background': "linear-gradient(45deg, #005ee0 0%, #7db4ff 20%, #006bff 80%, #0045a3 100%)",
                }
            },
            marked() { return hasCraftingItem(this.id) },
        },
        1001: {
            display() {
                let d = `取消合成`
                return d
            },
            canClick() { return isCraftingItem() },
            onClick() {
                if (confirm("你确定要取消合成吗？这将不会返还材料，并且会丢失合成进度！")) stopCrafting()
            },
            style() {
                return {
                    'min-height': '50px',
                    'width': '120px',
                    'font-size': '20px'
                }
            },
        },
        1011: {
            display() {
                let d = `<<`
                return d
            },
            tooltip: "向前翻5页",
            canClick() { return player.crafting_table.page > 1 },
            onClick() {
                player.crafting_table.page = Math.max(player.crafting_table.page - 5, 1)
            },
            style() {
                return {
                    'min-height': '50px',
                    'width': '50px',
                    'font-size': '20px',
                    'margin-left': '-7px',
                    'margin-right': '-7px',
                }
            },
        },
        1012: {
            display() {
                let d = `<`
                return d
            },
            canClick() { return player.crafting_table.page > 1 },
            onClick() {
                player.crafting_table.page -= 1
            },
            style() {
                return {
                    'min-height': '50px',
                    'width': '50px',
                    'font-size': '20px',
                    'margin-left': '-7px',
                    'margin-right': '-7px',
                }
            },
        },
        1013: {
            display() {
                let d = `${formatWhole(player.crafting_table.page)}/${formatWhole(player.crafting_table.maxPage)}页`
                return d
            },
            canClick() { return false },
            style() {
                return {
                    'min-height': '50px',
                    'width': '150px',
                    'font-size': '20px',
                    'background-color': '#b8945e',
                    'margin-left': '-7px',
                    'margin-right': '-7px',
                    'border-radius': '2.5px',
                }
            },
        },
        1014: {
            display() {
                let d = `>`
                return d
            },
            canClick() { return player.crafting_table.page < player.crafting_table.maxPage },
            onClick() {
                player.crafting_table.page += 1
            },
            style() {
                return {
                    'min-height': '50px',
                    'width': '50px',
                    'font-size': '20px',
                    'margin-left': '-7px',
                    'margin-right': '-7px',
                }
            },
        },
        1015: {
            display() {
                let d = `>>`
                return d
            },
            tooltip: "向后翻5页",
            canClick() { return player.crafting_table.page < player.crafting_table.maxPage },
            onClick() {
                player.crafting_table.page = Math.min(player.crafting_table.page + 5, player.crafting_table.maxPage)
            },
            style() {
                return {
                    'min-height': '50px',
                    'width': '50px',
                    'font-size': '20px',
                    'margin-left': '-7px',
                    'margin-right': '-7px',
                }
            },
        },
        1021: {
            display() {
                let d = ``
                if (player[ct].upg_shown_mode == "all") d = `显示所有图纸`
                if (player[ct].upg_shown_mode == "keep3rows") d = `显示最后3行图纸`
                return d
            },
            canClick() { return true },
            onClick() {
                if (player[ct].upg_shown_mode == "all") player[ct].upg_shown_mode = "keep3rows"
                else player[ct].upg_shown_mode = "all"
            },
            style() {
                return {
                    'min-height': '50px',
                    'width': '240px',
                    'font-size': '20px',
                    'border-radius': '2.5px',
                }
            },
        },
    },

    bars: {
        craft: {
            direction: RIGHT,
            width: 360,
            height: 60,
            display() {
                let comp = craftingItemComp(craftingItemID())
                if (!isCraftingItem()) comp = d(0)
                return `进度: ${format(player.crafting_table.progress)}/${format(comp)}`
            },
            progress() {
                let comp = craftingItemComp(craftingItemID())
                let p = player.crafting_table.progress.div(comp)
                if (!isCraftingItem()) p = d(0)
                return p
            },
            unlocked() { return tmp.crafting_table.layerShown },
            fillStyle() { return { "background-color": craftingItemColor(craftingItemID()) } },
            baseStyle() { return { "background-color": "rgba(0,0,0,0)" } },
        },
    },

    update(diff) {
        if (isCraftingItem()) player.crafting_table.progress = player.crafting_table.progress.add(player.crafting_table.speed.times(diff))
        if (player.crafting_table.progress.gte(craftingItemComp(craftingItemID()))) getCraftingItem(craftingItemID()),
            stopCrafting()

        //合成台合成速度
        let speed = d(2)
        if (hasCraftingItem(31)) speed = speed.times(5)
        if (hasCraftingItem(51)) speed = speed.times(10)
        if (hasCraftingItem(72)) speed = speed.times(25)
        if (hasCraftingItem(101)) speed = speed.times(60)
        if (hasCraftingItem(151)) speed = speed.times(50)
        if (hasCraftingItem(181)) speed = speed.times(15)
        if (hasCraftingItem(211)) speed = speed.times(77)
        if (hasCraftingItem(271)) speed = speed.times(100)
        if (hasUpgrade(brass, 14)) speed = speed.times(upgradeEffect(brass, 14))
        if (hasUpgrade(red_ele, 24)) speed = speed.times(10)
        if (hasCraftingItem(392)) speed = speed.times(15)
        if (hasCraftingItem(422)) speed = speed.times(25)
        if (hasCraftingItem(492)) speed = speed.times(clickableEffect(ct, 492))
        player[ct].speed = speed

        //更新最大页码
        /*if (tmp[ct].clickables[31].unlocked) player[ct].maxPage = 2
        if (tmp[ct].clickables[51].unlocked || tmp[ct].clickables[52].unlocked || tmp[ct].clickables[61].unlocked) player[ct].maxPage = 3
        if (tmp[ct].clickables[71].unlocked) player[ct].maxPage = 4
        if (tmp[ct].clickables[91].unlocked || tmp[ct].clickables[92].unlocked) player[ct].maxPage = 5
        if (tmp[ct].clickables[111].unlocked || tmp[ct].clickables[112].unlocked || tmp[ct].clickables[121].unlocked) player[ct].maxPage = 6
        if (tmp[ct].clickables[131].unlocked) player[ct].maxPage = 7
        if (tmp[ct].clickables[151].unlocked || tmp[ct].clickables[152].unlocked) player[ct].maxPage = 8
        if (tmp[ct].clickables[171].unlocked) player[ct].maxPage = 9
        if (tmp[ct].clickables[191].unlocked || tmp[ct].clickables[192].unlocked) player[ct].maxPage = 10
        if (tmp[ct].clickables[211].unlocked || tmp[ct].clickables[212].unlocked) player[ct].maxPage = 11
        if (tmp[ct].clickables[231].unlocked || tmp[ct].clickables[232].unlocked || tmp[ct].clickables[241].unlocked) player[ct].maxPage = 12
        if (tmp[ct].clickables[251].unlocked) player[ct].maxPage = 13
        if (tmp[ct].clickables[271].unlocked || tmp[ct].clickables[272].unlocked) player[ct].maxPage = 14
        if (tmp[ct].clickables[291].unlocked) player[ct].maxPage = 15
        if (tmp[ct].clickables[311].unlocked || tmp[ct].clickables[312].unlocked) player[ct].maxPage = 16
        if (tmp[ct].clickables[331].unlocked || tmp[ct].clickables[332].unlocked) player[ct].maxPage = 17
        */
        let itemAmount = 198 //超过198个物品这个数字会更改
        let craftList = craftingItemIDList(itemAmount)
        for (let i = 0; i < itemAmount; i++) {
            if (tmp[ct].clickables[craftList[i]] == undefined) break;
            if (!tmp[ct].clickables[craftList[i]].unlocked) continue;
            if (craftList[i] > player[ct].maxCraftID) player[ct].maxCraftID = craftList[i]
        }
        let maxpage = Math.ceil((player[ct].maxCraftID - 10) / 20)
        player[ct].maxPage = maxpage

        //
        if (player[ct].cooldown.gt(0)) player[ct].cooldown = player[ct].cooldown.sub(diff).max(0)
        if (player[ct].cooldown.lte(0.05)) player[ct].cooldown = d(0)
    },

    tabFormat: [
        ["display-text", function () { return getPointsDisplay() }],
        "main-display",
        ["row", ["prestige-button", "blank", ["display-text", () => `你同时最多拥有 ${formatWhole(player.crafting_table.best)} 合成台<br><br>合成有1秒冷却：${format(player.crafting_table.cooldown)}/1.00`]]],
        "blank",
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "craft": {
                unlocked() { return tmp.crafting_table.layerShown },
                name() { return '合成' },
                content: [
                    ["blank", "15px"],
                    ["raw-html", () => `<h4 style="opacity:.5">不是，哥们！这不就是工作台吗？`],
                    "blank",
                    ["display-text", function () {
                        let d = `你正在合成 ${craftingItemName(craftingItemID())}`
                        if (!isCraftingItem()) d = `你当前不在合成`
                        return d
                    }],
                    "blank",
                    ["row", [["bar", "craft"], ["clickables", [100]]]],
                    "blank",
                    ["clickables", [101]],
                    "blank",
                    ["clickables", function () { return [player.crafting_table.page * 2 - 1] }],
                    "blank",
                    ["clickables", function () { return [player.crafting_table.page * 2] }],
                    ["display-text", function () { return `合成速度：${format(player.crafting_table.speed)}/秒` }],
                    "blank",
                    ["display-text", function () { return `一般情况下，合成道具时只会消耗材料，不会消耗工具` }],
                    ["display-text", function () { return `而特殊情况下会进行额外标注` }],
                    ["display-text", function () { return `对于已拥有的道具，对应的合成按钮会附上星标` }],
                    ["display-text", function () { return `注意：取消合成不会返还已消耗的材料，并且会丢失合成进度！` }],
                ]
            },
            "recipe": {
                unlocked() { return hasNormalAchievement(22) },
                name() { return '图纸' },
                content: [
                    ["blank", "15px"],
                    ['clickables', [102]],
                    "blank",
                    ["upgrades", function () {
                        let upgs = []
                        if (player.crafting_table.upg_shown_mode == "all") {
                            let row = tmp[ct].upgrades.rows
                            for (let i = 1; i <= row; i++) {
                                upgs.push(i)
                            }
                            return upgs
                        }
                        if (player.crafting_table.upg_shown_mode == "keep3rows") {
                            let highestUnlockedID = 0
                            for (let id in tmp[ct].upgrades) {
                                if (isNaN(Number(id))) continue;
                                if (tmp[ct].upgrades[id].unlocked && Number(id) > highestUnlockedID) {
                                    highestUnlockedID = Number(id)
                                }
                            }
                            let row = Math.floor(highestUnlockedID / 10)
                            if (row <= 3) return [1, 2, 3]
                            else return [row - 2, row - 1, row]
                        }
                    }
                    ],
                ],
            },
            "milestones": {
                unlocked() { return tmp.crafting_table.layerShown },
                name() { return '里程碑' },
                content: [
                    ["blank", "15px"],
                    "milestones"
                ]
            },
        },
    },
})

function isSmeltingItem() {
    return player.furnace.smelting
}

function stopSmelting() {
    player.furnace.smelting = false,
        player.furnace.smeltingItem = 0,
        player.furnace.temperature = d(20)
}

function smeltingItemName(id) {
    return tmp.furnace.clickables[id].title
}

function smeltingItemTemp(id) {
    return tmp.furnace.clickables[id].temperature
}

function smeltingItemID() {
    return player.furnace.smeltingItem
}

function smeltingItemColor(id) {
    return tmp.furnace.clickables[id].style['background-color']
}

function smeltResult(id) {
    return tmp.furnace.clickables[id].result
}

function isBurningFuel() {
    return player.furnace.burning
}

function hasEnoughFuel(id) {
    return tmp.furnace.clickables[id].correspondingFuel.gte(tmp.furnace.clickables[id].burnSpeed.div(20))
}

function stopBurning() {
    player.furnace.burning = false,
        player.furnace.fuel = 10000
}

function fuelMaxTemp(id) {
    return tmp.furnace.clickables[id].temperature
}

function fuelID() {
    return player.furnace.fuel
}

function fuelName(id) {
    return tmp.furnace.clickables[id].title
}

//制造层2：熔炉
addLayer("furnace", {
    componentStyles: {
        "clickable"() {
            return {
                'margin-left': '-7px',
                'margin-right': '-7px',
            }
        }
    },
    name: "furnace",
    position: 2003,
    row: 201,
    symbol: '熔炉', // This appears on the layer's node. Default is the id with the first letter capitalized
    startData() {
        return {
            unlocked: true,
            points: new ExpantaNum(0),// This actually does nothing, but you have to write this. (Unless you want add something in this layer. #Todo, might change that later.)
            glass: d(0),
            charcoal: d(0),
            brick: d(0),
            scorched_brick: d(0),
            cooldown: d(0),
            speed: d(40),
            smelting: false,
            smeltingItem: 0, //0为凑数id
            burning: false,
            fuel: 10000, //10000为凑数id
            temperature: d(20),
            page: 1,
            maxPage: 1,
        }
    },
    color: "#4a4a4a",
    type: "normal",
    layerType: "craft",
    resource: "熔炉",
    baseResource() { return "石头" },
    baseAmount() { return player.stone.points },
    exponent: 0.05,
    requires: d(1414213),
    tooltip() { return false },
    gainMult() { // Calculate the multiplier for main currency from bonuses
        m = d(1)
        return m
    },
    gainExp() { // Calculate the exponent on main currency from bonuses
        e = d(1)
        return e
    },
    resetDescription: "重置以合成 ",
    layerShown() { return hasNormalAchievement(25) },// If any layer in the array is unlocked, it will returns true. Otherwise it will return false.

    onPrestige() {
        return player.furnace.cooldown = d(1)
    },

    canReset() {
        return player.furnace.cooldown.lte(0) && player.stone.points.gte(1414213)
    },

    doReset(resettingLayer) {
        if (hasMilestone(furnace, 0)) return undefined
    },

    passiveGeneration() { return hasUpgrade(constantan, 14) },

    upgrades: {
        11: {
            title: "玻璃",
            description: "解锁玻璃的熔炼配方",
            currencyInternalName: "sand",
            currencyDisplayName: "沙子",
            currencyLayer: stone,
            cost() { return new ExpantaNum(9999) },
            unlocked() { return hasUpgrade(stone, 33) },
        },
        12: {
            title: "锡锭",
            description: "解锁锡锭的熔炼配方",
            currencyInternalName: "ore",
            currencyDisplayName: "锡矿石",
            currencyLayer: tin,
            cost() { return new ExpantaNum(5) },
            unlocked() { return hasUpgrade(copper, 25) },
        },
        13: {
            title: "木炭",
            description: "解锁木炭的熔炼配方以及现在可以木炭作为燃料",
            currencyInternalName: "ore",
            currencyDisplayName: "铁矿石",
            currencyLayer: iron,
            cost() { return new ExpantaNum(15) },
            unlocked() { return hasUpgrade(iron, 14) },
        },
        14: {
            title: "铁锭",
            description: "解锁铁锭的熔炼配方",
            currencyInternalName: "ore",
            currencyDisplayName: "铁矿石",
            currencyLayer: iron,
            cost() { return new ExpantaNum(15) },
            unlocked() { return hasUpgrade(iron, 14) },
        },
        15: {
            title: "镍锭",
            fullDisplay() {
                return `<h3>${this.title}</h3><br>解锁镍锭的熔炼配方<br><br>正在以熔岩作为燃料时，直接免费解锁`
            },
            cost() { return new ExpantaNum(0) },
            canAfford() { return fuelID() == 10004 },
            unlocked() { return hasUpgrade(nickel, 14) },
        },
        21: {
            title: "铝锭",
            fullDisplay() {
                return `<h3>${this.title}</h3><br>解锁铝锭的熔炼配方<br><br>购买第5个铝升级后免费解锁`
            },
            cost() { return new ExpantaNum(0) },
            unlocked() { return hasUpgrade(aluminum, 15) },
        },
        22: {
            title: "铅锭",
            fullDisplay() {
                return `<h3>${this.title}</h3><br>解锁铅锭的熔炼配方<br><br>购买第5个铅升级后免费解锁`
            },
            cost() { return new ExpantaNum(0) },
            unlocked() { return hasUpgrade(lead, 15) },
        },
        23: {
            title: "锌锭",
            fullDisplay() {
                return `<h3>${this.title}</h3><br>解锁锌锭的熔炼配方<br><br>购买第5个锌升级后免费解锁`
            },
            cost() { return new ExpantaNum(0) },
            unlocked() { return hasUpgrade(zinc, 15) },
        },
        24: {
            title: "红砖",
            fullDisplay() {
                return `<h3>${this.title}</h3><br>解锁红砖的熔炼配方<br><br>获得第2石头里程碑后免费解锁`
            },
            cost() { return new ExpantaNum(0) },
            unlocked() { return hasMilestone(stone, 1) },
        },
        25: {
            title: "高炉砖",
            description: "解锁高炉砖的熔炼配方，并且解锁新的制造层级：高炉",
            currencyInternalName: "clay",
            currencyDisplayName: "粘土球",
            currencyLayer: stone,
            cost() { return new ExpantaNum(22500) },
            unlocked() { return hasMilestone(stone, 1) },
        },
        31: {
            title: "银锭",
            fullDisplay() {
                return `<h3>${this.title}</h3><br>解锁银锭的熔炼配方<br><br>购买第5个银升级后免费解锁`
            },
            cost() { return new ExpantaNum(0) },
            unlocked() { return hasUpgrade(silver, 15) },
        },
        32: {
            title: "金锭",
            fullDisplay() {
                return `<h3>${this.title}</h3><br>解锁金锭的熔炼配方<br><br>购买第4个金升级后免费解锁`
            },
            cost() { return new ExpantaNum(0) },
            unlocked() { return hasUpgrade(gold, 14) },
        },
        33: {
            title: "铂锭",
            fullDisplay() {
                return `<h3>${this.title}</h3><br>解锁铂锭的熔炼配方<br><br>购买第5个铂升级后免费解锁`
            },
            cost() { return new ExpantaNum(0) },
            unlocked() { return hasUpgrade(platinum, 15) },
        },
    },

    milestones: {
        0: {
            requirementDescription() { return `获得2熔炉` },
            effectDescription() { return `合成熔炉和合成台什么都不重置（除了经验，等级绑定经验）<br>重置过于繁琐，如果未来层级重置合成工具那会血压爆炸` },
            done() { return player.furnace.points.gte(2) },
            unlocked() { return true },
        },
        1: {
            requirementDescription() { return `获得320红砖` },
            effectDescription() { return `10x应力获取` },
            done() { return player.furnace.brick.gte(320) },
            unlocked() { return hasUpgrade(furnace, 24) },
        },
    },

    clickables: {
        0: {
            temperature: d(20),
            style() {
                return {
                    'background-color': 'rgba(0,0,0,0)',
                }
            },
            result(diff) { return undefined },
        },
        11: {
            title() {
                let t = "铜锭"
                return t
            },
            display() {
                let d = `
                需要工具：1熔炉<br>
                需要材料：1铜矿石<br>
                需求温度：${formatWhole(this.temperature)}<br>
                产出：1铜锭<br>
                倍率：${formatWhole(this.mult())}x`
                return d
            },
            temperature: d(800),
            mult() {
                let m = d(1)
                if (hasUpgrade(copper, 22)) m = m.times(upgradeEffect(copper, 22))
                if (hasUpgrade(tin, 14)) m = m.times(upgradeEffect(tin, 14))
                if (hasUpgrade(bronze, 13)) m = m.times(upgradeEffect(bronze, 13))
                if (hasMilestone(bronze, 3)) m = player.copper.ore.div(10).ceil().max(0)
                return m
            },
            result(diff) {
                if (player.furnace.temperature.gte(smeltingItemTemp(smeltingItemID())) && isSmeltingItem() && smeltingItemID() == this.id)
                    return player.copper.points = player.copper.points.add(this.mult().min(player.copper.ore)),
                        player.copper.ore = player.copper.ore.sub(this.mult().min(player.copper.ore)),
                        player.furnace.temperature = d(20)
                if (player.copper.ore.lt(1) && smeltingItemID() == this.id) stopSmelting()
            },
            canClick() { return player.copper.ore.gte(1) && player.furnace.burning && !player.furnace.smelting },
            onClick() {
                player.furnace.smelting = true,
                    player.furnace.smeltingItem = this.id
            },
            unlocked() { return tmp.furnace.layerShown },
            style() {
                return {
                    'min-height': '180px',
                    'width': '180px',
                    "background": "linear-gradient(45deg, #ea8601 0%, #ffb53c 100%)",
                    'background-color': '#ffb41d',
                }
            },
        },
        12: {
            title() {
                let t = "玻璃"
                return t
            },
            display() {
                let d = `
                需要工具：20熔炉<br>
                需要材料：1沙子<br>
                需求温度：${formatWhole(this.temperature)}<br>
                产出：1玻璃<br>
                倍率：${formatWhole(this.mult())}x`
                return d
            },
            temperature: d(150),
            mult() {
                let m = d(1)
                if (hasUpgrade(copper, 24)) m = m.times(upgradeEffect(copper, 24))
                return m
            },
            result(diff) {
                if (player.furnace.temperature.gte(smeltingItemTemp(smeltingItemID())) && isSmeltingItem() && smeltingItemID() == this.id)
                    if (!player.furnace.speed.times(options.updatingRate).gte(130))
                        return player.furnace.glass = player.furnace.glass.add(this.mult().min(player.stone.sand)),
                            player.stone.sand = player.stone.sand.sub(this.mult().min(player.stone.sand)),
                            player.furnace.temperature = d(20)
                    else {
                        let compensate = d(options.updatingRate / 1000).div(130).times(player.furnace.speed).min(options.updatingRate / 50)
                        player.furnace.glass = player.furnace.glass.add((this.mult().min(player.stone.sand)).times(compensate))
                    }
                if (player.stone.sand.lt(1) && smeltingItemID() == this.id) stopSmelting()
            },
            canClick() { return player.stone.sand.gte(1) && player.furnace.burning && !player.furnace.smelting },
            onClick() {
                player.furnace.smelting = true,
                    player.furnace.smeltingItem = this.id
            },
            unlocked() { return hasUpgrade(furnace, 11) },
            style() {
                return {
                    'min-height': '180px',
                    'width': '180px',
                    'background-color': '#a2cfd6',
                }
            },
        },
        13: {
            title() {
                let t = "锡锭"
                return t
            },
            display() {
                let d = `
                需要工具：1熔炉<br>
                需要材料：1锡矿石<br>
                需求温度：${formatWhole(this.temperature)}<br>
                产出：1锡锭<br>
                倍率：${formatWhole(this.mult())}x`
                return d
            },
            temperature: d(960),
            mult() {
                let m = d(1)
                if (hasUpgrade(bronze, 14)) m = m.times(upgradeEffect(bronze, 14))
                if (hasMilestone(bronze, 1)) m = player.tin.ore.div(10).ceil().max(0)
                return m
            },
            result(diff) {
                if (player.furnace.temperature.gte(smeltingItemTemp(smeltingItemID())) && isSmeltingItem() && smeltingItemID() == this.id)
                    return player.tin.points = player.tin.points.add(this.mult().min(player.tin.ore)),
                        player.tin.ore = player.tin.ore.sub(this.mult().min(player.tin.ore)),
                        player.furnace.temperature = d(20)
                if (player.tin.ore.lt(1) && smeltingItemID() == this.id) stopSmelting()
            },
            canClick() { return player.tin.ore.gte(1) && player.furnace.burning && !player.furnace.smelting },
            onClick() {
                player.furnace.smelting = true,
                    player.furnace.smeltingItem = this.id
            },
            unlocked() { return hasUpgrade(furnace, 12) },
            style() {
                return {
                    'min-height': '180px',
                    'width': '180px',
                    "background": "linear-gradient(45deg, #c4dce1 0%, #d3e4e4 100%)",
                    'background-color': '#c4dce1'
                }
            },
        },
        14: {
            title() {
                let t = "木炭"
                return t
            },
            display() {
                let d = `
                需要工具：1熔炉<br>
                需要材料：1木头<br>
                需求温度：${formatWhole(this.temperature)}<br>
                产出：1木炭<br>
                倍率：${formatWhole(this.mult())}x`
                return d
            },
            temperature: d(800),
            mult() {
                let m = d(100)
                return m
            },
            result(diff) {
                if (player.furnace.temperature.gte(smeltingItemTemp(smeltingItemID())) && isSmeltingItem() && smeltingItemID() == this.id)
                    return player.furnace.charcoal = player.furnace.charcoal.add(this.mult().min(player.wood.points)),
                        player.wood.points = player.wood.points.sub(this.mult().min(player.wood.points)),
                        player.furnace.temperature = d(20)
                if (player.wood.points.lt(1) && smeltingItemID() == this.id) stopSmelting()
            },
            canClick() { return player.wood.points.gte(1) && player.furnace.burning && !player.furnace.smelting },
            onClick() {
                player.furnace.smelting = true,
                    player.furnace.smeltingItem = this.id
            },
            unlocked() { return hasUpgrade(furnace, 13) },
            style() {
                return {
                    'min-height': '180px',
                    'width': '180px',
                    'background-color': '#2b261d',
                    'color': 'white'
                }
            },
        },
        15: {
            title() {
                let t = "铁锭"
                return t
            },
            display() {
                let d = `
                需要工具：1熔炉<br>
                需要材料：1铁矿石<br>
                需求温度：${formatWhole(this.temperature)}<br>
                产出：1铁锭<br>
                倍率：${formatWhole(this.mult())}x`
                return d
            },
            temperature: d(1930),
            mult() {
                let m = d(1)
                if (hasUpgrade(iron, 22)) m = m.times(upgradeEffect(iron, 22))
                if (hasUpgrade(nickel, 22)) m = m.times(challengeEffect(nickel, 12))
                if (hasUpgrade(nickel, 24)) m = m.times(upgradeEffect(nickel, 24))
                if (hasCraftingItem(161)) m = player.iron.ore.max(0).div(10)
                return m
            },
            result(diff) {
                if (player.furnace.temperature.gte(smeltingItemTemp(smeltingItemID())) && isSmeltingItem() && smeltingItemID() == this.id)
                    return player.iron.points = player.iron.points.add(this.mult().min(player.iron.ore)),
                        player.iron.ore = player.iron.ore.sub(this.mult().min(player.iron.ore)),
                        player.furnace.temperature = d(20)
                if (player.iron.ore.lt(1) && smeltingItemID() == this.id) stopSmelting()
            },
            canClick() { return player.iron.ore.gte(1) && player.furnace.burning && !player.furnace.smelting },
            onClick() {
                player.furnace.smelting = true,
                    player.furnace.smeltingItem = this.id
            },
            unlocked() { return hasUpgrade(furnace, 14) },
            style() {
                return {
                    'min-height': '180px',
                    'width': '180px',
                    "background": "linear-gradient(45deg, #d8d8d8 0%, #d8d8d8 50%, #a8a8a8 70%, #5e5e5e 90%)",
                    'background-color': '#d8d8d8',
                }
            },
        },
        21: {
            title() {
                let t = "镍锭"
                return t
            },
            display() {
                let d = `
                需要工具：1熔炉<br>
                需要材料：1镍矿石<br>
                需求温度：${formatWhole(this.temperature)}<br>
                产出：1镍锭<br>
                倍率：${formatWhole(this.mult())}x`
                return d
            },
            temperature: d(2160),
            mult() {
                let m = d(1)
                if (hasUpgrade(nickel, 22)) m = m.times(challengeEffect(nickel, 12))
                if (hasUpgrade(aluminum, 23)) m = m.times(upgradeEffect(aluminum, 23))
                if (hasMilestone(nickel, 0)) m = player.nickel.ore.max(0).div(10)
                return m
            },
            result(diff) {
                if (player.furnace.temperature.gte(smeltingItemTemp(smeltingItemID())) && isSmeltingItem() && smeltingItemID() == this.id)
                    return player.nickel.points = player.nickel.points.add(this.mult().min(player.nickel.ore)),
                        player.nickel.ore = player.nickel.ore.sub(this.mult().min(player.nickel.ore)),
                        player.furnace.temperature = d(20)
                if (player.nickel.ore.lt(1) && smeltingItemID() == this.id) stopSmelting()
            },
            canClick() { return player.nickel.ore.gte(1) && player.furnace.burning && !player.furnace.smelting },
            onClick() {
                player.furnace.smelting = true,
                    player.furnace.smeltingItem = this.id
            },
            unlocked() { return hasUpgrade(furnace, 15) },
            style() {
                return {
                    'min-height': '180px',
                    'width': '180px',
                    "background": "linear-gradient(45deg, #fffcc0 0%, #f5f5d7 25%, #fffcc0 50%, #e3df94 75%, #8b8566 100%)",
                    'background-color': '#fffcc0',
                }
            },
        },
        22: {
            title() {
                let t = "铝锭"
                return t
            },
            display() {
                let d = `
                需要工具：1熔炉<br>
                需要材料：1铝矿石<br>
                需求温度：${formatWhole(this.temperature)}<br>
                产出：1铝锭<br>
                倍率：${formatWhole(this.mult())}x`
                return d
            },
            temperature: d(2340),
            mult() {
                let m = d(1)
                if (hasUpgrade(aluminum, 21)) m = m.times(50)
                if (hasCraftingItem(181)) m = m.times(25)
                if (hasUpgrade(lead, 21)) m = m.times(upgradeEffect(lead, 21))
                return m
            },
            result(diff) {
                if (player.furnace.temperature.gte(smeltingItemTemp(smeltingItemID())) && isSmeltingItem() && smeltingItemID() == this.id)
                    return player.aluminum.points = player.aluminum.points.add(this.mult().min(player.aluminum.ore)),
                        player.aluminum.ore = player.aluminum.ore.sub(this.mult().min(player.aluminum.ore)),
                        player.furnace.temperature = d(20)
                if (player.aluminum.ore.lt(1) && smeltingItemID() == this.id) stopSmelting()
            },
            canClick() { return player.aluminum.ore.gte(1) && player.furnace.burning && !player.furnace.smelting },
            onClick() {
                player.furnace.smelting = true,
                    player.furnace.smeltingItem = this.id
            },
            unlocked() { return hasUpgrade(furnace, 21) },
            style() {
                return {
                    'min-height': '180px',
                    'width': '180px',
                    "background": "linear-gradient(45deg, #e2e3ee 0%, #d4d5e4 50%, #a0a2ac 100%)",
                    'background-color': '#e2e3ee',
                }
            },
        },
        23: {
            title() {
                let t = "铅锭"
                return t
            },
            display() {
                let d = `
                需要工具：1熔炉<br>
                需要材料：1铅矿石<br>
                需求温度：${formatWhole(this.temperature)}<br>
                产出：1铅锭<br>
                倍率：${formatWhole(this.mult())}x`
                return d
            },
            temperature: d(2700),
            mult() {
                let m = d(1)
                if (hasUpgrade(lead, 22)) m = m.times(upgradeEffect(lead, 14))
                if (hasUpgrade(constantan, 12)) m = m.times(upgradeEffect(constantan, 12))
                return m
            },
            result(diff) {
                if (player.furnace.temperature.gte(smeltingItemTemp(smeltingItemID())) && isSmeltingItem() && smeltingItemID() == this.id)
                    return player.lead.points = player.lead.points.add(this.mult().min(player.lead.ore)),
                        player.lead.ore = player.lead.ore.sub(this.mult().min(player.lead.ore)),
                        player.furnace.temperature = d(20)
                if (player.lead.ore.lt(1) && smeltingItemID() == this.id) stopSmelting()
            },
            canClick() { return player.lead.ore.gte(1) && player.furnace.burning && !player.furnace.smelting },
            onClick() {
                player.furnace.smelting = true,
                    player.furnace.smeltingItem = this.id
            },
            unlocked() { return hasUpgrade(furnace, 22) },
            style() {
                return {
                    'min-height': '180px',
                    'width': '180px',
                    "background": "linear-gradient(45deg, #667397 0%, #acc0ff 20%, #97a9e0 50%, #6a7392 80%, #333848 100%)",
                    'background-color': '#97a9e0',
                }
            },
        },
        24: {
            title() {
                let t = "锌锭"
                return t
            },
            display() {
                let d = `
                需要工具：1熔炉<br>
                需要材料：1锌矿石<br>
                需求温度：${formatWhole(this.temperature)}<br>
                产出：1锌锭<br>
                倍率：${formatWhole(this.mult())}x`
                return d
            },
            temperature: d(3520),
            mult() {
                let m = d(1)
                if (hasCraftingItem(272)) m = m.times(100)
                if (hasMilestone(brass, 0)) m = m.times(10)
                if (hasUpgrade(brass, 23)) m = player.zinc.ore.div(10).max(1)
                return m
            },
            result(diff) {
                if (player.furnace.temperature.gte(smeltingItemTemp(smeltingItemID())) && isSmeltingItem() && smeltingItemID() == this.id)
                    return player.zinc.points = player.zinc.points.add(this.mult().min(player.zinc.ore)),
                        player.zinc.ore = player.zinc.ore.sub(this.mult().min(player.zinc.ore)),
                        player.furnace.temperature = d(20)
                if (player.zinc.ore.lt(1) && smeltingItemID() == this.id) stopSmelting()
            },
            canClick() { return player.zinc.ore.gte(1) && player.furnace.burning && !player.furnace.smelting },
            onClick() {
                player.furnace.smelting = true,
                    player.furnace.smeltingItem = this.id
            },
            unlocked() { return hasUpgrade(furnace, 23) },
            style() {
                return {
                    'min-height': '180px',
                    'width': '180px',
                    "background": "linear-gradient(45deg, #a3be9e 0%, #fcfcfc 10%, #b7e6bf 40%, #b7e6bf 60%, #d3fcd9 80%, #4f6c62 100%)",
                    'background-color': '#b7e6bf',
                }
            },
        },
        25: {
            title() {
                let t = "红砖"
                return t
            },
            display() {
                let d = `
                需要工具：1熔炉<br>
                需要材料：1粘土球<br>
                需求温度：${formatWhole(this.temperature)}<br>
                产出：1红砖<br>
                倍率：${formatWhole(this.mult())}x`
                return d
            },
            temperature: d(880),
            mult() {
                let m = d(1)
                return m
            },
            result(diff) {
                if (player.furnace.temperature.gte(smeltingItemTemp(smeltingItemID())) && isSmeltingItem() && smeltingItemID() == this.id)
                    return player.furnace.brick = player.furnace.brick.add(this.mult().min(player.stone.clay)),
                        player.stone.clay = player.stone.clay.sub(this.mult().min(player.stone.clay)),
                        player.furnace.temperature = d(20)
                if (player.stone.clay.lt(1) && smeltingItemID() == this.id) stopSmelting()
            },
            canClick() { return player.stone.clay.gte(1) && player.furnace.burning && !player.furnace.smelting },
            onClick() {
                player.furnace.smelting = true,
                    player.furnace.smeltingItem = this.id
            },
            unlocked() { return hasUpgrade(furnace, 24) },
            style() {
                return {
                    'min-height': '180px',
                    'width': '180px',
                    "background": "repeating-linear-gradient(to bottom, #c2664f 0%, #c2664f 3.125%, #bc6955 3.125%, #bc6955 6.25%, #7a4435 6.25%, #7a4435 9.375%, #886c65 9.375%, #886c65 12.5%, #c2664f 12.5%)",
                    'background-color': '#c2664f',
                }
            },
        },
        31: {
            title() {
                let t = "高炉砖"
                return t
            },
            display() {
                let d = `
                需要工具：1熔炉<br>
                需要材料：1红砖 + 1石头<br>
                需求温度：${formatWhole(this.temperature)}<br>
                产出：1高炉砖<br>
                倍率：${formatWhole(this.mult())}x`
                return d
            },
            temperature: d(930),
            mult() {
                let m = d(1)
                return m
            },
            result(diff) {
                if (player.furnace.temperature.gte(smeltingItemTemp(smeltingItemID())) && isSmeltingItem() && smeltingItemID() == this.id)
                    return player.furnace.scorched_brick = player.furnace.scorched_brick.add(this.mult().min(player.furnace.brick).min(player.stone.points)),
                        player.furnace.brick = player.furnace.brick.sub(this.mult().min(player.furnace.brick).min(player.stone.points)),
                        player.stone.points = player.stone.points.sub(this.mult().min(player.furnace.brick).min(player.stone.points)),
                        player.furnace.temperature = d(20)
                if ((player.furnace.brick.lt(1) || player.stone.points.lt(1)) && smeltingItemID() == this.id) stopSmelting()
            },
            canClick() { return player.furnace.brick.gte(1) && player.stone.points.gte(1) && player.furnace.burning && !player.furnace.smelting },
            onClick() {
                player.furnace.smelting = true,
                    player.furnace.smeltingItem = this.id
            },
            unlocked() { return hasUpgrade(furnace, 25) },
            style() {
                return {
                    'min-height': '180px',
                    'width': '180px',
                    'background-color': '#3a2f18',
                    'color': 'white',
                }
            },
        },
        32: {
            title() {
                let t = "银锭"
                return t
            },
            display() {
                let d = `
                需要工具：1熔炉<br>
                需要材料：1银矿石<br>
                需求温度：${formatWhole(this.temperature)}<br>
                产出：1银锭<br>
                倍率：${formatWhole(this.mult())}x`
                return d
            },
            temperature: d(3700),
            mult() {
                let m = d(1)
                if (hasUpgrade(silver, 22)) m = m.times(5)
                if (hasUpgrade(silver, 24)) m = m.times(upgradeEffect(silver, 24))
                if (hasUpgrade(silver, 32)) m = m.times(124.1)
                if (hasUpgrade(gold, 15)) m = m.times(upgradeEffect(gold, 15))
                m = m.floor()
                return m
            },
            result(diff) {
                if (player.furnace.temperature.gte(smeltingItemTemp(smeltingItemID())) && isSmeltingItem() && smeltingItemID() == this.id)
                    return player.silver.points = player.silver.points.add(this.mult().min(player.silver.ore)),
                        player.silver.ore = player.silver.ore.sub(this.mult().min(player.silver.ore)),
                        player.furnace.temperature = d(20)
                if (player.silver.ore.lt(1) && smeltingItemID() == this.id) stopSmelting()
            },
            canClick() { return player.silver.ore.gte(1) && player.furnace.burning && !player.furnace.smelting },
            onClick() {
                player.furnace.smelting = true,
                    player.furnace.smeltingItem = this.id
            },
            unlocked() { return hasUpgrade(furnace, 31) },
            style() {
                return {
                    'min-height': '180px',
                    'width': '180px',
                    "background": "linear-gradient(45deg, #65696b 0%, #bbc7ce 20%, #ddf2f5 40%, #9cc1ca 70%, #5ca0a6 100%)",
                    'background-color': '#ddf2f5',
                }
            },
        },
        33: {
            title() {
                let t = "金锭"
                return t
            },
            display() {
                let d = `
                需要工具：1熔炉<br>
                需要材料：1金矿石<br>
                需求温度：${formatWhole(this.temperature)}<br>
                产出：1金锭<br>
                倍率：${formatWhole(this.mult())}x`
                return d
            },
            temperature: d(3900),
            mult() {
                let m = d(1)
                if (hasCraftingItem(322)) m = m.times(15),
                    m = m.times(tmp.gold.timeEff)
                if (hasUpgrade(gold, 31)) m = m.times(upgradeEffect(gold, 12))
                if (hasUpgrade(gold, 32)) m = m.times(1e6)
                if (hasUpgrade(gold, 34)) m = m.times(upgradeEffect(gold, 34))
                m = m.floor()
                return m
            },
            result(diff) {
                if (player.furnace.temperature.gte(smeltingItemTemp(smeltingItemID())) && isSmeltingItem() && smeltingItemID() == this.id)
                    return player.gold.points = player.gold.points.add(this.mult().min(player.gold.ore)),
                        player.gold.ore = player.gold.ore.sub(this.mult().min(player.gold.ore)),
                        player.furnace.temperature = d(20)
                if (player.gold.ore.lt(1) && smeltingItemID() == this.id) stopSmelting()
            },
            canClick() { return player.gold.ore.gte(1) && player.furnace.burning && !player.furnace.smelting },
            onClick() {
                player.furnace.smelting = true,
                    player.furnace.smeltingItem = this.id
            },
            unlocked() { return hasUpgrade(furnace, 32) },
            style() {
                return {
                    'min-height': '180px',
                    'width': '180px',
                    "background": "linear-gradient(45deg, #b26411 0%, #fdf55f 10%, #fffde0 20%, #fdf55f 30%, #fdf55f 80%, #752802 100%)",
                    'background-color': '#fdf55f',
                }
            },
        },
        34: {
            title() {
                let t = "铂锭"
                return t
            },
            display() {
                let d = `
                需要工具：1熔炉<br>
                需要材料：1铂矿石<br>
                需求温度：${formatWhole(this.temperature)}<br>
                产出：1铂锭<br>
                倍率：${formatWhole(this.mult())}x`
                return d
            },
            temperature: d(4400),
            mult() {
                let m = d(1)
                if (hasUpgrade(platinum, 21)) m = m.times(3)
                if (hasCraftingItem(402)) m = m.times(3)
                if (hasUpgrade(platinum, 23)) m = m.times(upgradeEffect(platinum, 23))
                if (hasUpgrade(obsidian, 11)) m = m.times(2000)
                m = m.floor()
                return m
            },
            result(diff) {
                if (player.furnace.temperature.gte(smeltingItemTemp(smeltingItemID())) && isSmeltingItem() && smeltingItemID() == this.id)
                    return player.platinum.points = player.platinum.points.add(this.mult().min(player.platinum.ore)),
                        player.platinum.ore = player.platinum.ore.sub(this.mult().min(player.platinum.ore)),
                        player.furnace.temperature = d(20)
                if (player.platinum.ore.lt(1) && smeltingItemID() == this.id) stopSmelting()
            },
            canClick() { return player.platinum.ore.gte(1) && player.furnace.burning && !player.furnace.smelting },
            onClick() {
                player.furnace.smelting = true,
                    player.furnace.smeltingItem = this.id
            },
            unlocked() { return hasUpgrade(furnace, 33) },
            style() {
                return {
                    'min-height': '180px',
                    'width': '180px',
                    "background": "linear-gradient(45deg, #62d1f3 0%, #c8fbff 30%, #ffffff 50%, #aae3ff 80%, #476fbe 100%)",
                    'background-color': '#c8fbff',
                }
            },
        },
        //燃料
        10000: {
            temperature: d(20),
            burnSpeed: d(0),
            correspondingFuel() { return player.points },
        },
        10001: {
            title() {
                let t = "木头"
                return t
            },
            display() {
                let d = `
                消耗速度：${formatWhole(this.burnSpeed)}/秒<br>
                温度上限：${formatWhole(this.temperature)}<br>`
                return d
            },
            burnSpeed: d(100),
            temperature: d(1000),
            correspondingFuel() { return player.wood.points },
            canClick() { return player.wood.points.gte(100) && player.furnace.points.gte(1) && !player.furnace.burning },
            onClick() {
                player.furnace.burning = true,
                    player.furnace.fuel = this.id
            },
            unlocked() { return tmp.furnace.layerShown },
            style() {
                return {
                    'min-height': '120px',
                    'width': '120px',
                    'background-color': '#b8945e',
                }
            },
        },
        10002: {
            title() {
                let t = "煤炭"
                return t
            },
            display() {
                let d = `
                消耗速度：${formatWhole(this.burnSpeed)}/秒<br>
                温度上限：${formatWhole(this.temperature)}<br>`
                return d
            },
            burnSpeed: d(50),
            temperature: d(1800),
            correspondingFuel() { return player.stone.coal },
            canClick() { return player.stone.coal.gte(50) && player.furnace.points.gte(1) && !player.furnace.burning },
            onClick() {
                player.furnace.burning = true,
                    player.furnace.fuel = this.id
            },
            unlocked() { return hasUpgrade(stone, 35) },
            style() {
                return {
                    'min-height': '120px',
                    'width': '120px',
                    'background-color': '#2e2e2e',
                    'color': '#ffffff',
                }
            },
        },
        10003: {
            title() {
                let t = "木炭"
                return t
            },
            display() {
                let d = `
                消耗速度：${formatWhole(this.burnSpeed)}/秒<br>
                温度上限：${formatWhole(this.temperature)}<br>`
                return d
            },
            burnSpeed: d(50),
            temperature: d(2100),
            correspondingFuel() { return player.furnace.charcoal },
            canClick() { return player.furnace.charcoal.gte(50) && player.furnace.points.gte(1) && !player.furnace.burning },
            onClick() {
                player.furnace.burning = true,
                    player.furnace.fuel = this.id
            },
            unlocked() { return hasUpgrade(furnace, 13) },
            style() {
                return {
                    'min-height': '120px',
                    'width': '120px',
                    'background-color': '#2b261d',
                    'color': '#ffffff',
                }
            },
        },
        10004: {
            title() {
                let t = "熔岩"
                return t
            },
            display() {
                let d = `
                消耗速度：${formatWhole(this.burnSpeed)}mB/秒<br>
                冷却消耗：${fw(5000)}mB水/秒<br>
                温度上限：${formatWhole(this.temperature)}`
                return d
            },
            burnSpeed: d(500),
            temperature: d(3200),
            correspondingFuel() { return player.iron.lava },
            canClick() { return player.iron.lava.gte(500) && player.iron.water.gte(5000) && player.furnace.points.gte(1) && !player.furnace.burning },
            onClick() {
                player.furnace.burning = true,
                    player.furnace.fuel = this.id
            },
            unlocked() { return hasUpgrade(nickel, 14) },
            style() {
                return {
                    'min-height': '120px',
                    'width': '120px',
                    'background-color': '#d76013',
                }
            },
        },
        10005: {
            title() {
                let t = "熔岩炉-RF"
                return t
            },
            display() {
                let d = `
                消耗速度：${formatWhole(this.burnSpeed)}RF/秒<br>
                冷却消耗：${fw(50000)}mB水/秒<br>
                温度上限：${formatWhole(this.temperature)}`
                return d
            },
            burnSpeed: d(1024000),
            temperature: d(5040),
            correspondingFuel() { return player.rf.points },
            canClick() { return player.rf.points.gte(51200) && player.iron.water.gte(50000) && player.furnace.points.gte(1) && !player.furnace.burning },
            onClick() {
                player.furnace.burning = true,
                    player.furnace.fuel = this.id
            },
            unlocked() { return player[ct].items[242].gte(5) },
            style() {
                return {
                    'min-height': '120px',
                    'width': '120px',
                    'background-color': '#d8d8d8',
                }
            },
        },
        20001: {
            display() {
                let d = `取消熔炼`
                return d
            },
            canClick() { return isSmeltingItem() },
            onClick() {
                stopSmelting()
            },
            style() {
                return {
                    'min-height': '50px',
                    'width': '120px',
                    'font-size': '20px'
                }
            },
        },
        20011: {
            display() {
                let d = `取出燃料`
                return d
            },
            canClick() { return isBurningFuel() },
            onClick() {
                stopSmelting(),
                    stopBurning(),
                    stopAlloying()
            },
            style() {
                return {
                    'min-height': '50px',
                    'width': '120px',
                    'font-size': '20px'
                }
            },
        },
    },

    bars: {
        smelt: {
            direction: RIGHT,
            width: 360,
            height: 60,
            display() {
                let temp = smeltingItemTemp(smeltingItemID())
                if (!isSmeltingItem()) temp = d(20)
                return `进度: ${format(player.furnace.temperature)}/${format(temp)}`
            },
            progress() {
                let temp = smeltingItemTemp(smeltingItemID())
                let p = player.furnace.temperature.sub(20).div(temp.sub(20))
                if (!isSmeltingItem()) p = d(0)
                return p
            },
            unlocked() { return tmp.furnace.layerShown },
            fillStyle() { return { "background-color": smeltingItemColor(smeltingItemID()) } },
            baseStyle() { return { "background-color": "rgba(0,0,0,0)" } },
        },
    },

    update(diff) {
        if (isSmeltingItem() && player.furnace.temperature.lt(fuelMaxTemp(fuelID()).sub(player.furnace.speed.times(diff)))) player.furnace.temperature = player.furnace.temperature.add(player.furnace.speed.times(diff))
        if (player.furnace.temperature.gte(fuelMaxTemp(fuelID()).sub(player.furnace.speed.times(diff)))) player.furnace.temperature = fuelMaxTemp(fuelID())

        if (!hasEnoughFuel(fuelID())) stopSmelting(), stopBurning(), stopAlloying()

        //熔炼速度
        let speed = d(40)
        if (hasCraftingItem(52)) speed = speed.times(10)
        if (hasUpgrade(iron, 21)) speed = speed.times(3)
        if (hasUpgrade(aluminum, 22)) speed = speed.times(1.5)
        if (hasCraftingItem(241)) speed = speed.times(1.8)
        player.furnace.speed = speed

        //燃料消耗

        if (player.furnace.fuel == 10001) player.wood.points = player.wood.points.sub(tmp.furnace.clickables[10001].burnSpeed.times(diff))
        if (player.furnace.fuel == 10002) player.stone.coal = player.stone.coal.sub(tmp.furnace.clickables[10002].burnSpeed.times(diff))
        if (player.furnace.fuel == 10003) player.furnace.charcoal = player.furnace.charcoal.sub(tmp.furnace.clickables[10003].burnSpeed.times(diff))
        if (player.furnace.fuel == 10004) player.iron.lava = player.iron.lava.sub(tmp.furnace.clickables[10004].burnSpeed.times(diff)),
            player.iron.water = player.iron.water.sub(d(5000).times(diff))

        //更新最大页码
        // if (tmp[ct].clickables[31].unlocked) player[ct].maxPage = 2

        //最多有
        if (player.furnace.points.gte(player.furnace.best)) player.furnace.best = player.furnace.points
        if (player.furnace.cooldown.gt(0)) player.furnace.cooldown = player.furnace.cooldown.sub(diff).max(0)
        if (player.furnace.cooldown.lte(0.05)) player.furnace.cooldown = d(0)
    },

    tabFormat: [
        ["display-text", function () { return getPointsDisplay() }],
        "main-display",
        ["row", ["prestige-button", "blank", ["display-text", () => `你同时最多拥有 ${formatWhole(player.furnace.best)} 熔炉<br><br>合成有1秒冷却：${format(player.furnace.cooldown)}/1.00`]]],
        "blank",
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "smelt": {
                unlocked() { return tmp.furnace.layerShown },
                name() { return '熔炼' },
                content: [
                    ["blank", "15px"],
                    "blank",
                    ["display-text", function () {
                        let d = `你正在熔炼 ${smeltingItemName(smeltingItemID())}`
                        if (!isSmeltingItem()) d = `你当前不在熔炼`
                        return d
                    }],
                    "blank",
                    ["row", [["bar", "smelt"], ["clickables", [2000]]]],
                    "blank",
                    ["clickables", function () { return [1, 2, 3] }],
                    ["display-text", function () { return `熔炼（升温）速度：${format(player.furnace.speed)}/秒` }],
                    "blank",
                    ["display-text", function () { return `一般情况下，熔炼时只会消耗材料，不会消耗工具` }],
                    ["display-text", function () { return `而特殊情况下会进行额外标注` }],
                    ["display-text", function () { return `熔炼完成会自动开始下一次熔炼，直到材料用完` }],
                    ["display-text", function () { return `你需要消耗燃料才能开始熔炼，请注意对应燃料的温度上限，如果温度上限不足以熔炼对应材料是无法完成熔炼的` }],
                    ["display-text", function () { return `熔炼倍率如果过大以至于材料不足会一次性消耗所有材料，直到不足以熔炼1份的量` }],
                    "blank",
                    ["display-text", function () { return `提示：尽量不要让熔炉闲置下来` }],
                ]
            },
            "fuel": {
                unlocked() { return tmp.furnace.layerShown },
                name() { return '燃料' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () {
                        let d = `当前正在消耗 ${fuelName(fuelID())} 作为燃料`
                        if (!isBurningFuel()) d = `当前不在消耗燃料`
                        return d
                    }],
                    "blank",
                    ["clickables", [2001]],
                    "blank",
                    ["clickables", function () { return [1000, 1001] }],
                    ["display-text", function () { return `熔炼（升温）速度：${format(player.furnace.speed)}/秒` }],
                    "blank",
                    ["display-text", function () { return `只有正在熔炼时才会提升温度` }],
                    ["display-text", function () { return `你必须放入至少能支持消耗1秒的燃料` }],
                    ["display-text", function () { return `如果不手动取出燃料将会一直消耗直到只剩下1秒的消耗量为止` }],
                ]
            },
            "milestones": {
                unlocked() { return tmp.furnace.layerShown },
                name() { return '里程碑' },
                content: [
                    ["blank", "15px"],
                    "milestones"
                ]
            },
            "recipe": {
                unlocked() { return hasUpgrade(stone, 33) },
                name() { return '配方' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { if (hasUpgrade(furnace, 11)) return `你有 ${textStyle_h2(formatWhole(player.furnace.glass), 'a2cfd6')} 玻璃` }],
                    ["display-text", function () { if (hasUpgrade(furnace, 13)) return `你有 ${textStyle_h2(formatWhole(player.furnace.charcoal), '2b261d', 'ffffff')} 木炭` }],
                    ["display-text", function () { if (hasUpgrade(furnace, 24)) return `你有 ${textStyle_h2(formatWhole(player.furnace.brick), 'c2664f')} 红砖` }],
                    ["display-text", function () { if (hasUpgrade(furnace, 25)) return `你有 ${textStyle_h2(formatWhole(player.furnace.scorched_brick), '3a2f18')} 高炉砖` }],
                    "upgrades",
                ],
            },
        },
    },
})

function isAlloyingItem() {
    return player.alloy_s.alloying
}

function stopAlloying() {
    player.alloy_s.alloying = false,
        player.alloy_s.alloyingItem = 0,
        player.alloy_s.temperature = d(20)
}

function alloyingItemName(id) {
    return tmp.alloy_s.clickables[id].title
}

function alloyingItemTemp(id) {
    return tmp.alloy_s.clickables[id].temperature
}

function alloyingItemID() {
    return player.alloy_s.alloyingItem
}

function alloyingItemColor(id) {
    return tmp.alloy_s.clickables[id].style['background-color']
}

function alloyResult(id) {
    return tmp.alloy_s.clickables[id].result
}


//制造层3：合金炉
addLayer("alloy_s", {
    componentStyles: {
        "clickable"() {
            return {
                'margin-left': '-7px',
                'margin-right': '-7px',
            }
        }
    },
    name: "alloy_s",
    position: 2004,
    row: 201,
    symbol: '合金炉', // This appears on the layer's node. Default is the id with the first letter capitalized
    startData() {
        return {
            unlocked: true,
            points: new ExpantaNum(0),// This actually does nothing, but you have to write this. (Unless you want add something in this layer. #Todo, might change that later.)
            hardenedGlass: d(0),
            cooldown: d(0),
            speed: d(40),
            alloying: false,
            alloyingItem: 0, //0为凑数id
            temperature: d(20),
            page: 1,
            maxPage: 1,
        }
    },
    color: "#40464d",
    type: "normal",
    layerType: "craft",
    resource: "合金炉",
    baseResource() { return "锡锭" },
    baseAmount() { return player.tin.points },
    exponent: 0.3,
    requires: d(30),
    tooltip() { return false },
    gainMult() { // Calculate the multiplier for main currency from bonuses
        m = d(1)
        if (hasUpgrade(constantan, 41)) m = m.times(1e20)
        return m
    },
    gainExp() { // Calculate the exponent on main currency from bonuses
        e = d(1)
        return e
    },
    resetDescription: "合成获得 ",
    layerShown() { return hasNormalAchievement(36) },// If any layer in the array is unlocked, it will returns true. Otherwise it will return false.

    onPrestige() {
        return player.alloy_s.cooldown = d(1)
    },

    canReset() {
        return player.alloy_s.cooldown.lte(0) && player.tin.points.gte(30)
    },

    doReset(resettingLayer) {
        return undefined
    },

    passiveGeneration() { return hasUpgrade(constantan, 14) },

    upgrades: {
        11: {
            title: "青铜",
            description: "解锁青铜锭的合金配方及其层级页面",
            cost() { return new ExpantaNum(1) },
            unlocked() { return tmp.alloy_s.layerShown },
        },
        12: {
            title: "康铜",
            description: "需求：等级664<br>解锁康铜锭的合金配方",
            canAfford() { return player.level.gte(664) },
            cost() { return new ExpantaNum(1e213) },
            unlocked() { return hasUpgrade(lead, 31) },
        },
        13: {
            title: "殷钢",
            description: "需求：等级1,553<br>解锁殷钢锭的合金配方",
            canAfford() { return player.level.gte(1553) },
            cost() { return new ExpantaNum('1e520') },
            unlocked() { return hasUpgrade(lead, 31) },
        },
        14: {
            title: "铝黄铜",
            description: "需求：等级4,040<br>解锁铝黄铜锭的合金配方",
            canAfford() { return player.level.gte(4040) },
            cost() { return new ExpantaNum('1e820') },
            unlocked() { return hasNormalAchievement(92) },
        },
        15: {
            title: "黄铜",
            description: "需求：等级7,985<br>解锁黄铜锭的合金配方",
            canAfford() { return player.level.gte(7985) },
            cost() { return new ExpantaNum('1e2131') },
            unlocked() { return hasNormalAchievement(97) },
        },
        21: {
            title: "琥珀金",
            description: "解锁琥珀金的合金配方",
            cost() { return new ExpantaNum('1e195000') },
            unlocked() { return hasNormalAchievement(123) },
        },
        22: {
            title: "红石琥珀金",
            description: "解锁红石琥珀金的合金配方",
            cost() { return new ExpantaNum('e1.55e9') },
            unlocked() { return hasNormalAchievement(134) },
        },
        23: {
            title: "硬化玻璃",
            description: "解锁硬化玻璃的合金配方",
            currencyInternalName: "dust",
            currencyDisplayName: "黑曜石粉",
            currencyLayer: obsidian,
            cost() { return new ExpantaNum(30) },
            unlocked() { return hasCraftingItem(411) },
        },
    },

    clickables: {
        0: {
            temperature: d(20),
            style() {
                return {
                    'background-color': 'rgba(0, 0, 0, 0)',
                }
            },
            result(diff) { return undefined },
        },
        11: {
            title() {
                let t = "青铜锭"
                return t
            },
            display() {
                let d = `
                需要工具：1合金炉<br>
                需要材料：3铜锭 + 1锡锭<br>
                需求温度：${formatWhole(this.temperature)}<br>
                产出：4青铜锭<br>
                倍率：${formatWhole(this.mult())}x`
                return d
            },
            temperature: d(1250),
            mult() {
                let m = d(1)
                if (hasUpgrade(bronze, 15)) m = m.times(upgradeEffect(bronze, 15))
                if (hasUpgrade(bronze, 22)) m = player.copper.points.max(0).div(30).min(player.tin.points.max(0).div(10)).ceil()
                return m
            },
            result(diff) {
                if (player.alloy_s.temperature.gte(alloyingItemTemp(alloyingItemID())) && isAlloyingItem() && alloyingItemID() == this.id)
                    player.bronze.points = player.bronze.points.add(this.mult().min(player.tin.points.times(4)).times(4)),
                        player.copper.points = player.copper.points.sub(this.mult().times(3).min(player.copper.points)),
                        player.tin.points = player.tin.points.sub(this.mult().min(player.tin.points)),
                        player.alloy_s.temperature = d(20)
                if ((player.copper.points.lt(d(3).times(this.mult())) || player.tin.points.lt(d(1).times(this.mult()))) && alloyingItemID() == this.id) stopAlloying()
            },
            canClick() { return player.copper.points.gte(3) && player.tin.points.gte(1) && player.furnace.burning && !player.alloy_s.alloying },
            onClick() {
                player.alloy_s.alloying = true,
                    player.alloy_s.alloyingItem = this.id
            },
            unlocked() { return hasUpgrade(alloy_s, 11) },
            style() {
                return {
                    'min-height': '180px',
                    'width': '180px',
                    "background": "linear-gradient(45deg, #b77b2f 0%, #ffd7a1 80%, #ffeed8 100%)",
                    'background-color': '#ffd7a1',
                }
            },
        },
        12: {
            title() {
                let t = "康铜锭"
                return t
            },
            display() {
                let d = `
                需要工具：1合金炉<br>
                需要材料：1铜锭 + 1镍锭<br>
                需求温度：${formatWhole(this.temperature)}<br>
                产出：2康铜锭<br>
                倍率：${formatWhole(this.mult())}x`
                return d
            },
            temperature: d(2940),
            mult() {
                let m = d(1)
                if (hasUpgrade(constantan, 11)) m = m.times(3)
                if (hasUpgrade(constantan, 13)) m = m.times(10)
                if (hasUpgrade(constantan, 22)) m = m.times(upgradeEffect(constantan, 22))
                if (hasUpgrade(invar, 12)) m = player.copper.points.min(player.nickel.points).max(1).pow(0.5).floor()
                return m
            },
            result(diff) {
                if (player.alloy_s.temperature.gte(alloyingItemTemp(alloyingItemID())) && isAlloyingItem() && alloyingItemID() == this.id)
                    player.constantan.points = player.constantan.points.add(this.mult().min(player.nickel.points.min(player.copper.points)).times(2)),
                        player.copper.points = player.copper.points.sub(this.mult().min(player.copper.points)),
                        player.nickel.points = player.nickel.points.sub(this.mult().min(player.nickel.points)),
                        player.alloy_s.temperature = d(20)
                if ((player.nickel.points.lt(this.mult()) || player.copper.points.lt(this.mult())) && alloyingItemID() == this.id) stopAlloying()
            },
            canClick() { return player.copper.points.gte(1) && player.nickel.points.gte(1) && player.furnace.burning && !player.alloy_s.alloying },
            onClick() {
                player.alloy_s.alloying = true,
                    player.alloy_s.alloyingItem = this.id
            },
            unlocked() { return hasUpgrade(alloy_s, 12) },
            style() {
                return {
                    'min-height': '180px',
                    'width': '180px',
                    "background": "linear-gradient(45deg, #d39f49 0%, #ffd37c 30%, #eeba4f 80%, #7d6233 100%)", 'background-color': '#ffd7a1',
                    'background-color': '#eeba4f',
                }
            },
        },
        13: {
            title() {
                let t = "殷钢锭"
                return t
            },
            display() {
                let d = `
                需要工具：1合金炉<br>
                需要材料：1铁锭 + 1镍锭<br>
                需求温度：${formatWhole(this.temperature)}<br>
                产出：2殷钢锭<br>
                倍率：${formatWhole(this.mult())}x`
                return d
            },
            temperature: d(3180),
            mult() {
                let m = d(1)
                if (hasUpgrade(invar, 11)) m = m.times(5)
                if (hasUpgrade(invar, 23)) m = m.times(10)
                if (hasUpgrade(invar, 32)) m = m.times(upgradeEffect(invar, 32))
                if (hasUpgrade(alumbrass, 24)) m = player.iron.points.min(player.nickel.points).max(1).pow(upgradeEffect(alumbrass, 24)).floor()
                return m
            },
            result(diff) {
                if (player.alloy_s.temperature.gte(alloyingItemTemp(alloyingItemID())) && isAlloyingItem() && alloyingItemID() == this.id)
                    player.invar.points = player.invar.points.add(this.mult().min(player.nickel.points.min(player.iron.points)).times(2)),
                        player.iron.points = player.iron.points.sub(this.mult().min(player.iron.points)),
                        player.nickel.points = player.nickel.points.sub(this.mult().min(player.nickel.points)),
                        player.alloy_s.temperature = d(20)
                if ((player.nickel.points.lt(this.mult()) || player.copper.points.lt(this.mult())) && alloyingItemID() == this.id) stopAlloying()
            },
            canClick() { return player.iron.points.gte(1) && player.nickel.points.gte(1) && player.furnace.burning && !player.alloy_s.alloying },
            onClick() {
                player.alloy_s.alloying = true,
                    player.alloy_s.alloyingItem = this.id
            },
            unlocked() { return hasUpgrade(alloy_s, 13) },
            style() {
                return {
                    'min-height': '180px',
                    'width': '180px',
                    "background": "linear-gradient(45deg, #979a90 0%, #bcc4ba 20%, #e2e7e5 75%, #95a7a1 90%, #697672 100%)",
                    'background-color': '#95a7a1',
                }
            },
        },
        14: {
            title() {
                let t = "铝黄铜锭"
                return t
            },
            display() {
                let d = `
                需要工具：1合金炉<br>
                需要材料：3铜锭 + 1铝锭<br>
                需求温度：${formatWhole(this.temperature)}<br>
                产出：4铝黄铜锭<br>
                倍率：${formatWhole(this.mult())}x`
                return d
            },
            temperature: d(3300),
            mult() {
                let m = d(1)
                if (hasUpgrade(alumbrass, 11)) m = m.times(3)
                if (hasUpgrade(alumbrass, 14)) m = m.times(upgradeEffect(alumbrass, 14))
                if (player.alumbrass.cast.ingot) m = m.times(10)
                if (player.alumbrass.cast.nugget) m = m.times(25)
                if (hasUpgrade(alumbrass, 23)) m = m.times(10)
                if (hasUpgrade(zinc, 22)) m = m.times(upgradeEffect(zinc, 22))
                if (hasUpgrade(brass, 12)) m = m.times(upgradeEffect(brass, 12))
                return m
            },
            result(diff) {
                if (player.alloy_s.temperature.gte(alloyingItemTemp(alloyingItemID())) && isAlloyingItem() && alloyingItemID() == this.id)
                    player.alumbrass.points = player.alumbrass.points.add(this.mult().min(player.aluminum.points.times(4)).times(4)),
                        player.copper.points = player.copper.points.sub(this.mult().times(3).min(player.copper.points)),
                        player.aluminum.points = player.aluminum.points.sub(this.mult().min(player.aluminum.points)),
                        player.alloy_s.temperature = d(20)
                if ((player.copper.points.lt(d(3).times(this.mult())) || player.aluminum.points.lt(d(1).times(this.mult()))) && alloyingItemID() == this.id) stopAlloying()
            },
            canClick() { return player.copper.points.gte(3) && player.aluminum.points.gte(1) && player.furnace.burning && !player.alloy_s.alloying },
            onClick() {
                player.alloy_s.alloying = true,
                    player.alloy_s.alloyingItem = this.id
            },
            unlocked() { return hasUpgrade(alloy_s, 14) },
            style() {
                return {
                    'min-height': '180px',
                    'width': '180px',
                    "background": "linear-gradient(45deg, #e6c34b 0%, #f0d467 30%, #e6c34b 75%, #ab7d1b 100%)",
                    'background-color': '#f0d467',
                }
            },
        },
        15: {
            title() {
                let t = "黄铜锭"
                return t
            },
            display() {
                let d = `
                需要工具：1合金炉<br>
                需要材料：1铜锭 + 1锌锭<br>
                需求温度：${formatWhole(this.temperature)}<br>
                产出：2黄铜锭<br>
                倍率：${formatWhole(this.mult())}x`
                return d
            },
            temperature: d(3702),
            mult() {
                let m = d(1)
                if (hasNormalAchievement(102)) m = m.times(5)
                if (hasUpgrade(brass, 22)) m = player.zinc.points.max(1).pow(0.6).floor()
                return m
            },
            result(diff) {
                if (player.alloy_s.temperature.gte(alloyingItemTemp(alloyingItemID())) && isAlloyingItem() && alloyingItemID() == this.id)
                    player.brass.points = player.brass.points.add(this.mult().min(player.zinc.points.min(player.copper.points)).times(2)),
                        player.copper.points = player.copper.points.sub(this.mult().min(player.copper.points)),
                        player.zinc.points = player.zinc.points.sub(this.mult().min(player.zinc.points)),
                        player.alloy_s.temperature = d(20)
                if ((player.zinc.points.lt(this.mult()) || player.copper.points.lt(this.mult())) && alloyingItemID() == this.id) stopAlloying()
            },
            canClick() { return player.zinc.points.gte(1) && player.copper.points.gte(1) && player.furnace.burning && !player.alloy_s.alloying },
            onClick() {
                player.alloy_s.alloying = true,
                    player.alloy_s.alloyingItem = this.id
            },
            unlocked() { return hasUpgrade(alloy_s, 15) },
            style() {
                return {
                    'min-height': '180px',
                    'width': '180px',
                    "background": "linear-gradient(45deg, #fce892 0%, #fce892 30%,  #f8ac67 60%, #f8ac67 80%, #75452c 100%)",
                    'background-color': '#f8ac67',
                }
            },
        },
        21: {
            title() {
                let t = "琥珀金锭"
                return t
            },
            display() {
                let d = `
                需要工具：1合金炉<br>
                需要材料：1银锭 + 1金锭<br>
                需求温度：${formatWhole(this.temperature)}<br>
                产出：2琥珀金锭<br>
                倍率：${formatWhole(this.mult())}x`
                return d
            },
            temperature: d(4000),
            mult() {
                let m = d(1)
                if (hasUpgrade(gold, 44)) m = m.times(12)
                if (hasUpgrade(electrum, 14)) m = m.times(upgradeEffect(electrum, 14))
                if (hasUpgrade(electrum, 23)) m = m.times(upgradeEffect(electrum, 23))
                if (goldSkillActived(3)) m = m.times(clickableEffect(gold, 23))
                if (hasUpgrade(redstone, 55)) m = m.times(upgradeEffect(redstone, 55))
                m = m.floor()
                return m
            },
            result(diff) {
                if (player.alloy_s.temperature.gte(alloyingItemTemp(alloyingItemID())) && isAlloyingItem() && alloyingItemID() == this.id)
                    player.electrum.points = player.electrum.points.add(this.mult().min(player.gold.points.min(player.silver.points)).times(2)),
                        player.silver.points = player.silver.points.sub(this.mult().min(player.silver.points)),
                        player.gold.points = player.gold.points.sub(this.mult().min(player.gold.points)),
                        player.alloy_s.temperature = d(20)
                if ((player.gold.points.lt(this.mult()) || player.silver.points.lt(this.mult())) && alloyingItemID() == this.id) stopAlloying()
            },
            canClick() { return player.gold.points.gte(1) && player.silver.points.gte(1) && player.furnace.burning && !player.alloy_s.alloying },
            onClick() {
                player.alloy_s.alloying = true,
                    player.alloy_s.alloyingItem = this.id
            },
            unlocked() { return hasUpgrade(alloy_s, 21) },
            style() {
                return {
                    'min-height': '180px',
                    'width': '180px',
                    "background": "linear-gradient(45deg, #c6ae49 0%, #f8ef85 20%, #ffff98 50%, #fffcbc 70%, #eee155 90%, #6c5e23 100%)",
                    'background-color': '#fffcbc',
                }
            },
        },
        22: {
            title() {
                let t = "红石琥珀金锭"
                return t
            },
            display() {
                let d = `
                需要工具：1合金炉<br>
                需要材料：200mB熔融红石 + 1琥珀金锭<br>
                需求温度：${formatWhole(this.temperature)}<br>
                产出：1红石琥珀金锭<br>
                倍率：${formatWhole(this.mult())}x`
                return d
            },
            temperature: d(4200),
            mult() {
                let m = d(1)
                if (hasUpgrade(redstone, 55)) m = m.times(upgradeEffect(redstone, 55))
                m = m.floor()
                return m
            },
            result(diff) {
                if (player.alloy_s.temperature.gte(alloyingItemTemp(alloyingItemID())) && isAlloyingItem() && alloyingItemID() == this.id)
                    player.red_ele.points = player.red_ele.points.add(this.mult().min(player.electrum.points.min(player.redstone.molten.div(200).floor()))),
                        player.electrum.points = player.electrum.points.sub(this.mult().min(player.electrum.points)),
                        player.redstone.molten = player.redstone.molten.sub(this.mult().min(player.redstone.molten.div(200).floor()).times(200)),
                        player.alloy_s.temperature = d(20)
                if ((player.electrum.points.lt(this.mult()) || player.redstone.molten.lt(this.mult().times(200))) && alloyingItemID() == this.id) stopAlloying()
            },
            canClick() { return player.electrum.points.gte(1) && player.redstone.molten.gte(200) && player.furnace.burning && !player.alloy_s.alloying },
            onClick() {
                player.alloy_s.alloying = true,
                    player.alloy_s.alloyingItem = this.id
            },
            unlocked() { return hasUpgrade(alloy_s, 22) },
            style() {
                return {
                    'min-height': '180px',
                    'width': '180px',
                    "background": "linear-gradient(45deg, #c6ae49 0%, #f8ef85 20%, #ffff98 50%, #fffcbc 70%, #eee155 90%, #6c5e23 100%)",
                    'background-color': '#fffcbc',
                    'border-color': '#fc0000',
                }
            },
        },
        23: {
            title() {
                let t = "硬化玻璃"
                return t
            },
            display() {
                let d = `
                需要工具：1合金炉<br>
                需要材料：1铅锭 + 4黑曜石粉<br>
                需求温度：${formatWhole(this.temperature)}<br>
                产出：2硬化玻璃<br>
                倍率：${formatWhole(this.mult())}x`
                return d
            },
            temperature: d(2500),
            mult() {
                let m = d(1)
                m = m.floor()
                return m
            },
            effectiveMult() {
                let m = this.mult()
                m = m.min(player.lead.points).min(player.obsidian.dust.div(4)).floor().max(0)
                return m
            },
            result(diff) {
                if ((player.alloy_s.temperature.gte(alloyingItemTemp(alloyingItemID())) || player.furnace.speed.times(diff).gte(alloyingItemTemp(alloyingItemID()))) && isAlloyingItem() && alloyingItemID() == this.id)
                    player.alloy_s.hardenedGlass = player.alloy_s.hardenedGlass.add(this.effectiveMult().times(2)),
                        player.lead.points = player.lead.points.sub(this.effectiveMult()),
                        player.obsidian.dust = player.obsidian.dust.sub(this.effectiveMult().times(4)),
                        player.alloy_s.temperature = d(20)
                if ((player.lead.points.lt(1) || player.obsidian.dust.lt(4) && alloyingItemID() == this.id)) stopAlloying()
            },
            canClick() { return player.lead.points.gte(1) && player.obsidian.dust.gte(4) && player.furnace.burning && !player.alloy_s.alloying },
            onClick() {
                player.alloy_s.alloying = true,
                    player.alloy_s.alloyingItem = this.id
            },
            unlocked() { return hasUpgrade(alloy_s, 23) },
            style() {
                return {
                    'min-height': '180px',
                    'width': '180px',
                    "background": "repeating-linear-gradient(135deg, #00000000 0%, #00000000 29%, #97a9e0 29%, #97a9e0 30%, #00000000 30%)",
                    'background-color': '#00000000',
                    'border-color': 'white',
                    color: 'white',
                }
            },
        },
        20001: {
            display() {
                let d = `取消合金`
                return d
            },
            canClick() { return isAlloyingItem() },
            onClick() {
                stopAlloying()
            },
            style() {
                return {
                    'min-height': '50px',
                    'width': '120px',
                    'font-size': '20px'
                }
            },
        },
    },

    bars: {
        alloy: {
            direction: RIGHT,
            width: 360,
            height: 60,
            display() {
                let temp = alloyingItemTemp(alloyingItemID())
                if (!isAlloyingItem()) temp = d(20)
                return `进度: ${format(player.alloy_s.temperature)}/${format(temp)}`
            },
            progress() {
                let temp = alloyingItemTemp(alloyingItemID())
                let p = player.alloy_s.temperature.sub(20).div(temp.sub(20))
                if (!isAlloyingItem()) p = d(0)
                return p
            },
            unlocked() { return tmp.alloy_s.layerShown },
            fillStyle() { return { "background-color": alloyingItemColor(alloyingItemID()) } },
            baseStyle() { return { "background-color": "rgba(0,0,0,0)" } },
        },
    },

    update(diff) {
        if (isAlloyingItem() && player.furnace.speed.times(diff).gte(alloyingItemTemp(alloyingItemID()).sub(20))) player.alloy_s.temperature = alloyingItemTemp(alloyingItemID())
        else if (isAlloyingItem() && player.alloy_s.temperature.lt(fuelMaxTemp(fuelID()).sub(player.furnace.speed.times(diff)))) player.alloy_s.temperature = player.alloy_s.temperature.add(player.furnace.speed.times(diff))
        if (player.alloy_s.temperature.gte(fuelMaxTemp(fuelID()).sub(player.furnace.speed.div(20)))) player.alloy_s.temperature = fuelMaxTemp(fuelID())

        //更新最大页码
        // if (tmp[ct].clickables[31].unlocked) player[ct].maxPage = 2

        //最多有
        if (player.alloy_s.points.gte(player.alloy_s.best)) player.alloy_s.best = player.alloy_s.points
        if (player.alloy_s.cooldown.gt(0)) player.alloy_s.cooldown = player.alloy_s.cooldown.sub(diff).max(0)
        if (player.alloy_s.cooldown.lte(0.05)) player.alloy_s.cooldown = d(0)
    },

    tabFormat: [
        ["display-text", function () { return getPointsDisplay() }],
        "main-display",
        ["row", ["prestige-button", "blank", ["display-text", () => `你同时最多拥有 ${formatWhole(player.alloy_s.best)} 合金炉<br><br>合成有1秒冷却：${format(player.alloy_s.cooldown)}/1.00`]]],
        "blank",
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "smelt": {
                unlocked() { return tmp.alloy_s.layerShown },
                name() { return '合金' },
                content: [
                    ["blank", "15px"],
                    "blank",
                    ["display-text", function () {
                        let d = `你正在合金 ${alloyingItemName(alloyingItemID())}`
                        if (!isAlloyingItem()) d = `你当前不在合金`
                        return d
                    }],
                    "blank",
                    ["row", [["bar", "alloy"], ["clickables", [2000]]]],
                    "blank",
                    ["clickables", function () { return [1, 2] }],
                    ["display-text", function () { return `合金（升温）速度：${format(player.furnace.speed)}/秒 （和熔炼页面一致）` }],
                    "blank",
                    ["display-text", function () { return `合金完成会自动开始下一次合金，直到材料用完` }],
                    ["display-text", function () { return `你需要消耗燃料才能开始合金，请注意对应燃料的温度上限，如果温度上限不足以熔炼对应材料是无法完成合金的` }],
                    "blank",
                    ["display-text", function () { return `提示：尽量不要让合金炉闲置下来` }],
                ]
            },
            "milestones": {
                unlocked() { return tmp.alloy_s.layerShown },
                name() { return '里程碑' },
                content: [
                    ["blank", "15px"],
                    "milestones"
                ]
            },
            "recipe": {
                unlocked() { return tmp.alloy_s.layerShown },
                name() { return '配方' },
                content: [
                    ["blank", "15px"],
                    ["display-text", function () { if (hasUpgrade(alloy_s, 23)) return `你有 ${textStyle_h2(formatWhole(player.alloy_s.hardenedGlass), 'ffffff')} 硬化玻璃` }],
                    "upgrades",
                ],
            },
        },
    },
})

function getSingularityBuyblesOrder(id) { //一行4个购买项，获取购买项顺位。只有矿物资源有对应奇点
    let row = Math.floor(id / 10)
    let col = id % 10
    return (row - 1) * 4 + col
}

//制造层4：奇点凝聚器
addLayer("sing_fus", {
    name: "sing_fus",
    position: 2005,
    row: 201,
    symbol: '奇点凝聚器', // This appears on the layer's node. Default is the id with the first letter capitalized
    startData() {
        return {
            unlocked: true,
            points: new ExpantaNum(0),// This actually does nothing, but you have to write this. (Unless you want add something in this layer. #Todo, might change that later.)
            cooldown: d(0),
            speed: d(40),
            alloying: false,
            alloyingItem: 0, //0为凑数id
            temperature: d(20),
            page: 1,
            maxPage: 1,
            availableSingularityText: "当前没有奇点可以聚合",
        }
    },
    color: "#438e8b",
    type: "none",
    layerType: "craft",
    resource: "奇点凝聚器",
    baseResource() { return "锡锭" },
    baseAmount() { return player.tin.points },
    exponent: 0.3,
    requires: d(30),
    tooltip() { return false },
    gainMult() { // Calculate the multiplier for main currency from bonuses
        m = d(1)
        return m
    },
    gainExp() { // Calculate the exponent on main currency from bonuses
        e = d(1)
        return e
    },
    layerShown() { return hasNormalAchievement(73) },// If any layer in the array is unlocked, it will returns true. Otherwise it will return false.

    doReset(resettingLayer) {
        return undefined
    },

    buyables: {
        11: {
            title: "聚合奇点-铜",
            cost(x) { return d('1e800').pow(x.max(0).pow(3)).times('1e800') },
            display() {
                let display = `加成铜矿石获取<br>
                效果公式：${format(this.effBase())}<sup>x</sup><br>
                凝聚需求量：${format(this.cost())} 铜锭`
                return display
            },
            canAfford() { return player.copper.points.gte(this.cost()) },
            buyMax() {
                if (this.canAfford())
                    return setBuyableAmount(sing_fus, 11, player.copper.points.div('1e800').max(1).logBase('1e800').root(3).floor().add(1))
            },
            canBuyMax() { return false },
            buy() {
                if (!this.canBuyMax()) player.copper.points = player.copper.points.sub(this.cost()).max(0),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (this.canBuyMax()) this.buyMax()
            },
            effBase() {
                let b = d(1e50)
                if (hasCraftingItem(192)) b = b.pow(2.5)
                return b
            },
            effect(x) {
                let effect = ExpantaNum.pow(this.effBase(), x.max(0))
                return effect
            },
            unlocked() { return tmp.sing_fus.layerShown },
            canAuto() { return hasMilestone(sing_fus, 2) },
            auto() {
                if (this.canAuto())
                    this.buyMax()

                player.copper.singularity = getBuyableAmount(this.layer, this.id)
            },
            style() {
                s = {
                    'height': '120px',
                    'box-shadow': '0 0 20px #ffb41d',
                }
                if (this.canAfford())
                    s = {
                        'height': '120px',
                        "background": "linear-gradient(45deg, #ea8601 0%, #ffb53c 100%)",
                        'box-shadow': '0 0 20px #ffb41d',
                    }
                return s
            }
        },
        12: {
            title: "聚合奇点-锡",
            cost(x) { return d('1e1200').pow(x.max(0).pow(3.1)).times('1e1200') },
            display() {
                let display = `加成锡矿石获取<br>
                效果公式：${format(this.effBase())}<sup>x</sup><br>
                凝聚需求量：${format(this.cost())} 锡锭`
                return display
            },
            canAfford() { return player.tin.points.gte(this.cost()) },
            buyMax() {
                if (this.canAfford())
                    return setBuyableAmount(sing_fus, 12, player.tin.points.div('1e1200').max(1).logBase('1e1200').root(3.1).floor().add(1))
            },
            canBuyMax() { return false },
            buy() {
                if (!this.canBuyMax()) player.tin.points = player.tin.points.sub(this.cost()).max(0),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (this.canBuyMax()) this.buyMax()
            },
            effBase() {
                let b = d(1e108)
                return b
            },
            effect(x) {
                let effect = ExpantaNum.pow(this.effBase(), x.max(0))
                return effect
            },
            unlocked() { return hasMilestone(sing_fus, 1) },
            canAuto() { return hasMilestone(sing_fus, 3) },
            auto() {
                if (this.canAuto())
                    this.buyMax()

                player.tin.singularity = getBuyableAmount(this.layer, this.id)
            },
            style() {
                s = {
                    'height': '120px',
                    'box-shadow': '0 0 20px #c4dce1',
                }
                if (this.canAfford())
                    s = {
                        'height': '120px',
                        "background": "linear-gradient(45deg, #c4dce1 0%, #d3e4e4 100%)",
                        'box-shadow': '0 0 20px #c4dce1',
                    }
                return s
            }
        },
        13: {
            title: "聚合奇点-铁",
            cost(x) { return d('1e1111').pow(x.max(0).pow(3.25)).times('1e1111') },
            display() {
                let display = `加成铁矿石获取<br>
                效果公式：${format(this.effBase())}<sup>x</sup><br>
                凝聚需求量：${format(this.cost())} 铁锭`
                return display
            },
            canAfford() { return player.iron.points.gte(this.cost()) },
            buyMax() {
                if (this.canAfford())
                    return setBuyableAmount(sing_fus, 13, player.iron.points.div('1e1111').max(1).logBase('1e1111').root(3.25).floor().add(1))
            },
            canBuyMax() { return false },
            buy() {
                if (!this.canBuyMax()) player.iron.points = player.iron.points.sub(this.cost()).max(0),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (this.canBuyMax()) this.buyMax()
            },
            effBase() {
                let b = d(1e125)
                return b
            },
            effect(x) {
                let effect = ExpantaNum.pow(this.effBase(), x.max(0))
                return effect
            },
            unlocked() { return hasMilestone(sing_fus, 2) },
            canAuto() { return hasMilestone(sing_fus, 4) },
            auto() {
                if (this.canAuto())
                    this.buyMax()

                player.iron.singularity = getBuyableAmount(this.layer, this.id)
            },
            style() {
                s = {
                    'height': '120px',
                    'box-shadow': '0 0 20px #d8d8d8',
                }
                if (this.canAfford())
                    s = {
                        'height': '120px',
                        "background": "linear-gradient(45deg, #d8d8d8 0%, #d8d8d8 50%, #a8a8a8 70%, #5e5e5e 90%)",
                        'box-shadow': '0 0 20px #d8d8d8',
                    }
                return s
            }
        },
        14: {
            title: "聚合奇点-镍",
            cost(x) { return d('3e3000').pow(x.max(0).pow(3.25)).times('3e3000') },
            display() {
                let display = `加成镍矿石获取<br>
                效果公式：${format(this.effBase())}<sup>x</sup><br>
                凝聚需求量：${format(this.cost())} 镍锭`
                return display
            },
            canAfford() { return player.nickel.points.gte(this.cost()) },
            buyMax() {
                if (this.canAfford())
                    return setBuyableAmount(sing_fus, 14, player.nickel.points.div('3e3000').max(1).logBase('3e3000').root(3.25).floor().add(1))
            },
            canBuyMax() { return false },
            buy() {
                if (!this.canBuyMax()) player.nickel.points = player.nickel.points.sub(this.cost()).max(0),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (this.canBuyMax()) this.buyMax()
            },
            effBase() {
                let b = d('1e400')
                return b
            },
            effect(x) {
                let effect = ExpantaNum.pow(this.effBase(), x.max(0))
                return effect
            },
            unlocked() { return hasMilestone(sing_fus, 3) },
            canAuto() { return hasMilestone(sing_fus, 5) },
            auto() {
                if (this.canAuto())
                    this.buyMax()

                player.nickel.singularity = getBuyableAmount(this.layer, this.id)
            },
            style() {
                s = {
                    'height': '120px',
                    'box-shadow': '0 0 20px #fffcc0',
                }
                if (this.canAfford())
                    s = {
                        'height': '120px',
                        "background": "linear-gradient(45deg, #fffcc0 0%, #f5f5d7 25%, #fffcc0 50%, #e3df94 75%, #8b8566 100%)",
                        'box-shadow': '0 0 20px #fffcc0',
                    }
                return s
            }
        },
        21: {
            title: "聚合奇点-铝",
            cost(x) { return d('3e6000').pow(x.max(0).pow(3.25)).times('3e6000') },
            display() {
                let display = `加成铝矿石获取<br>
                效果公式：${format(this.effBase())}<sup>x</sup><br>
                凝聚需求量：${format(this.cost())} 铝锭`
                return display
            },
            canAfford() { return player.aluminum.points.gte(this.cost()) },
            buyMax() {
                if (this.canAfford())
                    return setBuyableAmount(sing_fus, 21, player.aluminum.points.div('3e6000').max(1).logBase('3e6000').root(3.25).floor().add(1))
            },
            canBuyMax() { return false },
            buy() {
                if (!this.canBuyMax()) player.aluminum.points = player.aluminum.points.sub(this.cost()).max(0),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (this.canBuyMax()) this.buyMax()
            },
            effBase() {
                let b = d('1e300')
                return b
            },
            effect(x) {
                let effect = ExpantaNum.pow(this.effBase(), x.max(0))
                return effect
            },
            unlocked() { return hasMilestone(sing_fus, 4) },
            canAuto() { return hasMilestone(sing_fus, 6) },
            auto() {
                if (this.canAuto())
                    this.buyMax()

                player.aluminum.singularity = getBuyableAmount(this.layer, this.id)
            },
            style() {
                s = {
                    'height': '120px',
                    'box-shadow': '0 0 20px #e2e3ee',
                }
                if (this.canAfford())
                    s = {
                        'height': '120px',
                        "background": "linear-gradient(45deg, #e2e3ee 0%, #d4d5e4 50%, #a0a2ac 100%)",
                        'box-shadow': '0 0 20px #e2e3ee',
                    }
                return s
            }
        },
        22: {
            title: "聚合奇点-铅",
            cost(x) { return d('1e12000').pow(x.max(0).pow(3.25)).times('1e12000') },
            display() {
                let display = `加成铝矿石获取<br>
                效果公式：${format(this.effBase())}<sup>x</sup><br>
                凝聚需求量：${format(this.cost())} 铅锭`
                return display
            },
            canAfford() { return player.lead.points.gte(this.cost()) },
            buyMax() {
                if (this.canAfford())
                    return setBuyableAmount(sing_fus, 22, player.lead.points.div('1e12000').max(1).logBase('1e12000').root(3.25).floor().add(1))
            },
            canBuyMax() { return false },
            buy() {
                if (!this.canBuyMax()) player.lead.points = player.lead.points.sub(this.cost()).max(0),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (this.canBuyMax()) this.buyMax()
            },
            effBase() {
                let b = d('1e600')
                return b
            },
            effect(x) {
                let effect = ExpantaNum.pow(this.effBase(), x.max(0))
                return effect
            },
            unlocked() { return hasMilestone(sing_fus, 5) },
            canAuto() { return hasMilestone(sing_fus, 7) },
            auto() {
                if (this.canAuto())
                    this.buyMax()

                player.lead.singularity = getBuyableAmount(this.layer, this.id)
            },
            style() {
                s = {
                    'height': '120px',
                    'box-shadow': '0 0 20px #97a9e0',
                }
                if (this.canAfford())
                    s = {
                        'height': '120px',
                        "background": "linear-gradient(45deg, #667397 0%, #acc0ff 20%, #97a9e0 50%, #6a7392 80%, #333848 100%)",
                        'box-shadow': '0 0 20px #e2e3ee',
                    }
                return s
            }
        },
        23: {
            title: "聚合奇点-锌",
            cost(x) { return d('1e12000').pow(x.max(0).pow(3.25)).times('1e27500') },
            display() {
                let display = `加成锌矿石获取<br>
                效果公式：${format(this.effBase())}<sup>x</sup><br>
                凝聚需求量：${format(this.cost())} 锌锭`
                return display
            },
            canAfford() { return player.zinc.points.gte(this.cost()) },
            buyMax() {
                if (this.canAfford())
                    return setBuyableAmount(sing_fus, 23, player.zinc.points.div('1e27500').max(1).logBase('1e12000').root(3.25).floor().add(1))
            },
            canBuyMax() { return false },
            buy() {
                if (!this.canBuyMax()) player.zinc.points = player.zinc.points.sub(this.cost()).max(0),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (this.canBuyMax()) this.buyMax()
            },
            effBase() {
                let b = d('1e1440')
                return b
            },
            effect(x) {
                let effect = ExpantaNum.pow(this.effBase(), x.max(0))
                return effect
            },
            unlocked() { return hasMilestone(sing_fus, 6) },
            canAuto() { return hasMilestone(sing_fus, 8) },
            auto() {
                if (this.canAuto())
                    this.buyMax()

                player.zinc.singularity = getBuyableAmount(this.layer, this.id)
            },
            style() {
                s = {
                    'height': '120px',
                    'box-shadow': '0 0 20px #b7e6bf',
                }
                if (this.canAfford())
                    s = {
                        'height': '120px',
                        "background": "linear-gradient(45deg, #a3be9e 0%, #fcfcfc 10%, #b7e6bf 40%, #b7e6bf 60%, #d3fcd9 80%, #4f6c62 100%)",
                        'box-shadow': '0 0 20px #b7e6bf',
                    }
                return s
            }
        },
        24: {
            title: "聚合奇点-银",
            cost(x) { return d('1e30000').pow(x.max(0).pow(3.25)).times('1e45000') },
            display() {
                let display = `加成银矿石获取<br>
                效果公式：${format(this.effBase())}<sup>x</sup><br>
                凝聚需求量：${format(this.cost())} 银锭`
                return display
            },
            canAfford() { return player.silver.points.gte(this.cost()) },
            buyMax() {
                if (this.canAfford())
                    return setBuyableAmount(sing_fus, 24, player.silver.points.div('1e45000').max(1).logBase('1e30000').root(3.25).floor().add(1))
            },
            canBuyMax() { return false },
            buy() {
                if (!this.canBuyMax()) player.silver.points = player.silver.points.sub(this.cost()).max(0),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (this.canBuyMax()) this.buyMax()
            },
            effBase() {
                let b = d('1e5000')
                return b
            },
            effect(x) {
                let effect = ExpantaNum.pow(this.effBase(), x.max(0))
                return effect
            },
            unlocked() { return hasMilestone(sing_fus, 7) },
            canAuto() { return hasMilestone(sing_fus, 9) },
            auto() {
                if (this.canAuto())
                    this.buyMax()

                player.silver.singularity = getBuyableAmount(this.layer, this.id)
            },
            style() {
                s = {
                    'height': '120px',
                    'box-shadow': '0 0 20px #b7e6bf',
                }
                if (this.canAfford())
                    s = {
                        'height': '120px',
                        "background": "linear-gradient(45deg, #65696b 0%, #bbc7ce 20%, #ddf2f5 40%, #9cc1ca 70%, #5ca0a6 100%)",
                        'box-shadow': '0 0 20px #ddf2f5',
                    }
                return s
            }
        },
        31: {
            title: "聚合奇点-金",
            cost(x) { return d('1e50000').pow(x.max(0).pow(3.25)).times('1e90000') },
            display() {
                let display = `加成金矿石获取<br>
                效果公式：${format(this.effBase())}<sup>x</sup><br>
                凝聚需求量：${format(this.cost())} 金锭`
                return display
            },
            canAfford() { return player.gold.points.gte(this.cost()) },
            buyMax() {
                if (this.canAfford())
                    return setBuyableAmount(sing_fus, 31, player.gold.points.div('1e90000').max(1).logBase('1e50000').root(3.25).floor().add(1))
            },
            canBuyMax() { return false },
            buy() {
                if (!this.canBuyMax()) player.gold.points = player.gold.points.sub(this.cost()).max(0),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (this.canBuyMax()) this.buyMax()
            },
            effBase() {
                let b = d('1e8000')
                return b
            },
            effect(x) {
                let effect = ExpantaNum.pow(this.effBase(), x.max(0))
                return effect
            },
            unlocked() { return hasMilestone(sing_fus, 8) },
            canAuto() { return hasMilestone(sing_fus, 10) },
            auto() {
                if (this.canAuto())
                    this.buyMax()

                player.gold.singularity = getBuyableAmount(this.layer, this.id)
            },
            style() {
                s = {
                    'height': '120px',
                    'box-shadow': '0 0 20px #fdf55f',
                }
                if (this.canAfford())
                    s = {
                        'height': '120px',
                        "background": "linear-gradient(45deg, #b26411 0%, #fdf55f 10%, #fffde0 20%, #fdf55f 30%, #fdf55f 80%, #752802 100%)",
                        'box-shadow': '0 0 20px #fdf55f',
                    }
                return s
            }
        },
        32: {
            title: "聚合奇点-红石",
            cost(x) { return d('1e70000').pow(x.max(0).pow(2.5)).times('1e135000') },
            display() {
                let display = `加成一次挖掘的红石矿石<br>
                效果公式：${format(this.effBase())}<sup>x</sup><br>
                凝聚需求量：${format(this.cost())} 红石粉`
                return display
            },
            canAfford() { return player.redstone.points.gte(this.cost()) },
            buyMax() {
                if (this.canAfford())
                    return setBuyableAmount(sing_fus, 32, player.redstone.points.div('1e135000').max(1).logBase('1e70000').root(2.5).floor().add(1))
            },
            canBuyMax() { return false },
            buy() {
                if (!this.canBuyMax()) player.redstone.points = player.redstone.points.sub(this.cost()).max(0),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (this.canBuyMax()) this.buyMax()
            },
            effBase() {
                let b = d('1e12500')
                return b
            },
            effect(x) {
                let effect = ExpantaNum.pow(this.effBase(), x.max(0))
                return effect
            },
            unlocked() { return hasMilestone(sing_fus, 9) },
            canAuto() { return hasMilestone(sing_fus, 11) },
            auto() {
                if (this.canAuto())
                    this.buyMax()

                player.redstone.singularity = getBuyableAmount(this.layer, this.id)
            },
            style() {
                s = {
                    'height': '120px',
                    'box-shadow': '0 0 20px #fc0000',
                }
                if (this.canAfford())
                    s = {
                        'height': '120px',
                        "background": "#fc0000",
                        'box-shadow': '0 0 20px #fc0000',
                    }
                return s
            }
        },
        33: {
            title: "聚合奇点-铂",
            cost(x) { return d('1e100000').pow(x.max(0).pow(2.5)).times('1e280000') },
            display() {
                let display = `加成铂矿石获取<br>
                效果公式：${format(this.effBase())}<sup>x</sup><br>
                凝聚需求量：${format(this.cost())} 铂锭`
                return display
            },
            canAfford() { return player.platinum.points.gte(this.cost()) },
            buyMax() {
                if (this.canAfford())
                    return setBuyableAmount(sing_fus, 33, player.platinum.points.div('1e280000').max(1).logBase('1e100000').root(2.5).floor().add(1))
            },
            canBuyMax() { return false },
            buy() {
                if (!this.canBuyMax()) player.platinum.points = player.platinum.points.sub(this.cost()).max(0),
                    setBuyableAmount(this.layer, this.id, getBuyableAmount(this.layer, this.id).add(1))
                if (this.canBuyMax()) this.buyMax()
            },
            effBase() {
                let b = d('1e22500')
                return b
            },
            effect(x) {
                let effect = ExpantaNum.pow(this.effBase(), x.max(0))
                return effect
            },
            unlocked() { return hasMilestone(sing_fus, 10) },
            canAuto() { return hasMilestone(sing_fus, 12) },
            auto() {
                if (this.canAuto())
                    this.buyMax()

                player.platinum.singularity = getBuyableAmount(this.layer, this.id)
            },
            style() {
                s = {
                    'height': '120px',
                    'box-shadow': '0 0 20px #c8fbff',
                }
                if (this.canAfford())
                    s = {
                        'height': '120px',
                        "background": "linear-gradient(45deg, #62d1f3 0%, #c8fbff 30%, #ffffff 50%, #aae3ff 80%, #476fbe 100%)",
                        'box-shadow': '0 0 20px #c8fbff',
                    }
                return s
            }
        },
    },

    milestones: {
        0: {
            requirementDescription() { return `获得1铜奇点` },
            effectDescription() { return `自动凝聚石头奇点（虽然刚解锁这个还没什么用，第3石头奇点要1e10000多石头）` },
            done() { return singularity(copper).gte(1) },
            unlocked() { return tmp.sing_fus.layerShown },
        },
        1: {
            requirementDescription() { return `获得${f('1e900')}锡锭` },
            effectDescription() { return `解锁锡奇点，木头倍增器现在可以一键购买最大且不消耗` },
            done() { return player.tin.points.gte('1e900') },
            unlocked() { return tmp.sing_fus.layerShown },
        },
        2: {
            requirementDescription() { return `获得${f('1e1000')}铁锭` },
            effectDescription() { return `解锁铁奇点，自动购买铜奇点` },
            done() { return player.iron.points.gte('1e1000') },
            unlocked() { return tmp.iron.layerShown },
        },
        3: {
            requirementDescription() { return `获得${f('1e3000')}镍锭` },
            effectDescription() { return `解锁镍奇点，自动购买锡奇点` },
            done() { return player.nickel.points.gte('1e3000') },
            unlocked() { return tmp.nickel.layerShown },
        },
        4: {
            requirementDescription() { return `获得${f('1e6000')}铝锭` },
            effectDescription() { return `解锁铝奇点，自动购买铁奇点` },
            done() { return player.aluminum.points.gte('1e6000') },
            unlocked() { return tmp.aluminum.layerShown },
        },
        5: {
            requirementDescription() { return `获得${f('1e12000')}铅锭` },
            effectDescription() { return `解锁铅奇点，自动购买镍奇点` },
            done() { return player.lead.points.gte('1e12000') },
            unlocked() { return tmp.lead.layerShown },
        },
        6: {
            requirementDescription() { return `获得${f('1e27500')}锌锭` },
            effectDescription() { return `解锁锌奇点，自动购买铝奇点` },
            done() { return player.zinc.points.gte('1e27500') },
            unlocked() { return tmp.zinc.layerShown },
        },
        7: {
            requirementDescription() { return `获得${f('1e45000')}银锭` },
            effectDescription() { return `解锁银奇点，自动购买铅奇点` },
            done() { return player.silver.points.gte('1e45000') },
            unlocked() { return tmp.silver.layerShown },
        },
        8: {
            requirementDescription() { return `获得${f('1e90000')}金锭` },
            effectDescription() { return `解锁金奇点，自动购买锌奇点` },
            done() { return player.gold.points.gte('1e90000') },
            unlocked() { return tmp.gold.layerShown },
        },
        9: {
            requirementDescription() { return `获得${f('1e135000')}红石粉` },
            effectDescription() { return `解锁红石奇点，自动购买银奇点` },
            done() { return player.redstone.points.gte('1e135000') },
            unlocked() { return tmp.redstone.layerShown },
        },
        10: {
            requirementDescription() { return `获得${f('1e280000')}铂锭` },
            effectDescription() { return `解锁铂奇点，自动购买金奇点` },
            done() { return player.platinum.points.gte('1e280000') },
            unlocked() { return tmp.platinum.layerShown },
        },
        11: {
            requirementDescription() { return `获得${f('1e560000')}钻石` },
            effectDescription() { return `解锁钻石奇点，自动购买红石奇点` },
            done() { return player.diamond.points.gte('1e560000') },
            unlocked() { return tmp.diamond.layerShown },
        },
        12: {
            requirementDescription() { return `获得${f('1e1120000')}绿宝石` },
            effectDescription() { return `解锁绿宝石奇点，自动购买铂奇点` },
            done() { return player.emerald.points.gte('1e1120000') },
            unlocked() { return tmp.emerald.layerShown },
        },
    },

    update(diff) {
        if (hasCraftingItem(172)) player.sing_fus.points = d(1)

        let singularity = 0
        for (let id in player.sing_fus.buyables) {
            if (tmp.sing_fus.buyables[id].unlocked && tmp.sing_fus.buyables[id].canAfford) {
                if (hasMilestone(sing_fus, getSingularityBuyblesOrder(id) + 1)) continue
                else singularity += 1
            }
        }
        player.sing_fus.availableSingularityText = singularity >= 1 ? "当前有奇点可聚合 " + textColor('[!]', 'cc0000') : "当前没有奇点可以聚合"
    },

    tabFormat: [
        ["display-text", function () { return getPointsDisplay() }],
        "main-display",
        "blank",
        ["display-text", function () { return `你可以在主游戏界面左上角查看是否有奇点可聚合` }],
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "singularity": {
                unlocked() { return tmp.sing_fus.layerShown },
                name() { return '奇点' },
                content: [
                    ["blank", "15px"],
                    "blank",
                    ["display-text", function () { if (hasNormalAchievement(63)) return `你有 ${textStyle_h2(fw(singularity(stone)), '4a4a4a')} 石头奇点，加成石头获取 ${textStyle_h2(f(buyableEffect(stone, 21)) + "x", '4a4a4a')}` }],
                    ["display-text", function () { if (hasNormalAchievement(73)) return `你有 ${textStyle_h2(fw(singularity(copper)), 'ffb41d')} 铜奇点，加成铜矿石获取 ${textStyle_h2(f(buyableEffect(sing_fus, 11)) + "x", 'ffb41d')}` }],
                    ["display-text", function () { if (hasMilestone(sing_fus, 1)) return `你有 ${textStyle_h2(fw(singularity(tin)), 'c4dce1')} 锡奇点，加成锡矿石获取 ${textStyle_h2(f(buyableEffect(sing_fus, 12)) + "x", 'c4dce1')}` }],
                    ["display-text", function () { if (hasMilestone(sing_fus, 2)) return `你有 ${textStyle_h2(fw(singularity(iron)), 'd8d8d8')} 铁奇点，加成铁矿石获取 ${textStyle_h2(f(buyableEffect(sing_fus, 13)) + "x", 'd8d8d8')}` }],
                    ["display-text", function () { if (hasMilestone(sing_fus, 3)) return `你有 ${textStyle_h2(fw(singularity(nickel)), 'fffcc0')} 镍奇点，加成镍矿石获取 ${textStyle_h2(f(buyableEffect(sing_fus, 14)) + "x", 'fffcc0')}` }],
                    ["display-text", function () { if (hasMilestone(sing_fus, 4)) return `你有 ${textStyle_h2(fw(singularity(aluminum)), 'e2e3ee')} 铝奇点，加成铝矿石获取 ${textStyle_h2(f(buyableEffect(sing_fus, 21)) + "x", 'e2e3ee')}` }],
                    ["display-text", function () { if (hasMilestone(sing_fus, 5)) return `你有 ${textStyle_h2(fw(singularity(lead)), '97a9e0')} 铅奇点，加成铅矿石获取 ${textStyle_h2(f(buyableEffect(sing_fus, 22)) + "x", '97a9e0')}` }],
                    ["display-text", function () { if (hasMilestone(sing_fus, 6)) return `你有 ${textStyle_h2(fw(singularity(zinc)), 'b7e6bf')} 锌奇点，加成锌矿石获取 ${textStyle_h2(f(buyableEffect(sing_fus, 23)) + "x", 'b7e6bf')}` }],
                    ["display-text", function () { if (hasMilestone(sing_fus, 7)) return `你有 ${textStyle_h2(fw(singularity(silver)), 'ddf2f5')} 银奇点，加成银矿石获取 ${textStyle_h2(f(buyableEffect(sing_fus, 24)) + "x", 'ddf2f5')}` }],
                    ["display-text", function () { if (hasMilestone(sing_fus, 8)) return `你有 ${textStyle_h2(fw(singularity(gold)), 'fdf55f')} 金奇点，加成金矿石获取 ${textStyle_h2(f(buyableEffect(sing_fus, 31)) + "x", 'fdf55f')}` }],
                    ["display-text", function () { if (hasMilestone(sing_fus, 9)) return `你有 ${textStyle_h2(fw(singularity(redstone)), 'fc0000')} 红石奇点，加成红石矿石获取 ${textStyle_h2(f(buyableEffect(sing_fus, 32)) + "x", 'fc0000')}` }],
                    ["display-text", function () { if (hasMilestone(sing_fus, 10)) return `你有 ${textResourceStyle(fw(singularity(platinum)), 'text-platinum')} 铂奇点，加成铂矿石获取 ${textResourceStyle(f(buyableEffect(sing_fus, 33)) + "x", 'text-platinum')}` }],
                    "buyables",
                ],
            },
            "milestones": {
                unlocked() { return tmp.sing_fus.layerShown },
                name() { return '里程碑' },
                content: [
                    ["blank", "15px"],
                    "milestones"
                ]
            },
            "recipe": {
                unlocked() { return tmp.sing_fus.layerShown },
                name() { return '配方' },
                content: [
                    ["blank", "15px"],
                    "upgrades",
                ],
            },
        },
    },
})

function BF_top_bottom_structure() {
    let scorched_block_position = [202, 203, 204, 302, 303, 304, 402, 403, 404, 1202, 1203, 1204, 1302, 1303, 1304, 1402, 1403, 1404]
    let b = 0
    for (i = 0; i < scorched_block_position.length; i++) {
        if (player.blast_furnace.grid[scorched_block_position[i]] == 'block') b += 1
    }
    return b >= 18
}

function BF_Y2_structure() {
    let Y2_center = [702, 703, 704, 802, 804, 902, 903, 904]
    let c = 0
    let d = 0
    let b = 0
    for (i = 0; i < Y2_center.length; i++) {
        if (player.blast_furnace.grid[Y2_center[i]] == 'controller') c += 1
        if (player.blast_furnace.grid[Y2_center[i]] == 'drain') d += 1
        if (player.blast_furnace.grid[Y2_center[i]] == 'block') b += 1
    }
    return (c == 1 && d == 1 && b == 6)
}

function faucet_table_binding(id) {
    return player.blast_furnace.grid[id] == 'faucet' && player.blast_furnace.grid[id - 500] == 'casting_table'
}

function BF_faucet_and_table() {
    if (BF_Y2_structure()) {
        let d_pos
        let Y2_center = [702, 703, 704, 802, 804, 902, 903, 904]
        for (i = 0; i < Y2_center.length; i++) {
            if (player.blast_furnace.grid[Y2_center[i]] == 'drain') d_pos = Y2_center[i]
        }
        if (d_pos == 702) {
            return faucet_table_binding(602) || faucet_table_binding(701)
        }
        if (d_pos == 703) {
            return faucet_table_binding(603)
        }
        if (d_pos == 704) {
            return faucet_table_binding(604) || faucet_table_binding(705)
        }
        if (d_pos == 802) {
            return faucet_table_binding(801)
        }
        if (d_pos == 804) {
            return faucet_table_binding(805)
        }
        if (d_pos == 902) {
            return faucet_table_binding(1002) || faucet_table_binding(901)
        }
        if (d_pos == 903) {
            return faucet_table_binding(1003)
        }
        if (d_pos == 904) {
            return faucet_table_binding(1004) || faucet_table_binding(905)
        }
    }
}

function BF_structure_complete() {
    return (BF_top_bottom_structure() && BF_Y2_structure() && BF_faucet_and_table() && player.blast_furnace.grid[803] == "")
}

//制造层5：高炉
addLayer("blast_furnace", {
    componentStyles: {
        "clickable"() {
            return {
                'margin-left': '-7px',
                'margin-right': '-7px',
            }
        }
    },
    name: "blast_furnace",
    position: 2006,
    row: 201,
    symbol: '高炉', // This appears on the layer's node. Default is the id with the first letter capitalized
    startData() {
        return {
            unlocked: true,
            points: new ExpantaNum(0),// This actually does nothing, but you have to write this. (Unless you want add something in this layer. #Todo, might change that later.)
            built: false,
            struText: "",
            actived: {
                31: false, 32: false, 33: false, 34: false, 35: false
            },
            time: {
                31: d(0), 32: d(0), 33: d(0), 34: d(0), 35: d(0)
            },
            time_multi: d(1),
            page: 1,
            maxPage: 1,
            chosenID: 0,
            placeBlock: "remove",
            posY: 1,
        }
    },
    color: "#3a2f18",
    type: "none",
    layerType: "craft",
    resource: "高炉",
    baseResource() { return "石头" },
    baseAmount() { return player.stone.points },
    exponent: 0.05,
    requires: d(1414213),
    tooltip() { return false },
    gainMult() { // Calculate the multiplier for main currency from bonuses
        m = d(1)
        return m
    },
    gainExp() { // Calculate the exponent on main currency from bonuses
        e = d(1)
        return e
    },
    resetDescription: "重置以合成 ",
    layerShown() { return hasNormalAchievement(106) },// If any layer in the array is unlocked, it will returns true. Otherwise it will return false.


    canReset() {
        return player.furnace.cooldown.lte(0) && player.stone.points.gte(1414213)
    },

    doReset(resettingLayer) {
        return undefined
    },

    grid: {
        rows: 15, // If these are dynamic make sure to have a max value as well!
        cols: 5,
        getStartData(id) {
            return ""
        },
        getUnlocked(id) { // Default
            return true
        },
        getCanClick(data, id) {
            if (player.blast_furnace.built) return false
            if (data == player.blast_furnace.placeBlock || (player.blast_furnace.placeBlock == "remove" && data == "")) return false
            else {
                if (player.blast_furnace.placeBlock == "remove") return true
                let blocks = [11, 12, 13, 14, 15]
                for (i = 0; i < blocks.length; i++) {
                    if (player.blast_furnace.placeBlock == tmp.blast_furnace.clickables[blocks[i]].corItem)
                        return player.furnace.scorched_brick.gte(tmp.blast_furnace.clickables[blocks[i]].cost)
                }
            }
        },
        onClick(data, id) {
            if (player.blast_furnace.placeBlock != 'remove') {
                let blocks = [11, 12, 13, 14, 15]
                for (i = 0; i < blocks.length; i++) {
                    if (player.blast_furnace.placeBlock == tmp.blast_furnace.clickables[blocks[i]].corItem)
                        return player.furnace.scorched_brick = player.furnace.scorched_brick.sub(tmp.blast_furnace.clickables[blocks[i]].cost),
                            player[this.layer].grid[id] = player.blast_furnace.placeBlock
                }
            }
            else player[this.layer].grid[id] = ""
        },
        getTitle(data, id) {
            if (data == 'controller') return 'c'
            if (data == 'casting_table') return 't'
            if (data == 'drain') return 'd'
            if (data == 'block') return 'b'
            if (data == 'faucet') return 'f'
            if (data == '') return ''
        },
        getStyle(data, id) {
            if (data == "") return {
                'background-color': 'rgba(0,0,0,0)',
                'border-color': 'white',
                'font-size': '25px',
                'color': 'white',
            }
            else return {
                'border-color': 'white',
                'background-color': '#3a2f18',
                'font-size': '25px',
                'color': 'white',
            }
        },

    },

    clickables: {
        11: {
            title() {
                let t = "高炉控制器(c)"
                return t
            },
            display() {
                let d = `需要8高炉砖`
                return d
            },
            corItem: "controller",
            cost: d(8),
            canClick() { return player.blast_furnace.placeBlock != this.corItem },
            onClick() {
                player.blast_furnace.placeBlock = this.corItem
            },
            unlocked() { return tmp.blast_furnace.layerShown },
            style() {
                return {
                    'min-height': '96px',
                    'width': '128px',
                    'background-color': '#3a2f18',
                    'color': 'white',
                    'border-color': `${player.blast_furnace.placeBlock == this.corItem ? 'white' : 'rgba(0, 0, 0, 0.15)'}`
                }
            },
        },
        12: {
            title() {
                let t = "高炉浇铸台(t)"
                return t
            },
            display() {
                let d = `需要7高炉砖`
                return d
            },
            corItem: "casting_table",
            cost: d(7),
            canClick() { return player.blast_furnace.placeBlock != this.corItem },
            onClick() {
                player.blast_furnace.placeBlock = this.corItem
            },
            unlocked() { return tmp.blast_furnace.layerShown },
            style() {
                return {
                    'min-height': '96px',
                    'width': '128px',
                    'background-color': '#3a2f18',
                    'color': 'white',
                    'border-color': `${player.blast_furnace.placeBlock == this.corItem ? 'white' : 'rgba(0, 0, 0, 0.15)'}`
                }
            },
        },
        13: {
            title() {
                let t = "高炉排液口(d)"
                return t
            },
            display() {
                let d = `需要6高炉砖`
                return d
            },
            corItem: "drain",
            cost: d(6),
            canClick() { return player.blast_furnace.placeBlock != this.corItem },
            onClick() {
                player.blast_furnace.placeBlock = this.corItem
            },
            unlocked() { return tmp.blast_furnace.layerShown },
            style() {
                return {
                    'min-height': '96px',
                    'width': '128px',
                    'background-color': '#3a2f18',
                    'color': 'white',
                    'border-color': `${player.blast_furnace.placeBlock == this.corItem ? 'white' : 'rgba(0, 0, 0, 0.15)'}`
                }
            },
        },
        14: {
            title() {
                let t = "高炉方块(b)"
                return t
            },
            display() {
                let d = `需要4高炉砖`
                return d
            },
            corItem: "block",
            cost: d(4),
            canClick() { return player.blast_furnace.placeBlock != this.corItem },
            onClick() {
                player.blast_furnace.placeBlock = this.corItem
            },
            unlocked() { return tmp.blast_furnace.layerShown },
            style() {
                return {
                    'min-height': '96px',
                    'width': '128px',
                    'background-color': '#3a2f18',
                    'color': 'white',
                    'border-color': `${player.blast_furnace.placeBlock == this.corItem ? 'white' : 'rgba(0, 0, 0, 0.15)'}`
                }
            },
        },
        15: {
            title() {
                let t = "高炉浇注口(f)"
                return t
            },
            display() {
                let d = `需要3高炉砖`
                return d
            },
            corItem: "faucet",
            cost: d(3),
            canClick() { return player.blast_furnace.placeBlock != this.corItem },
            onClick() {
                player.blast_furnace.placeBlock = this.corItem
            },
            unlocked() { return tmp.blast_furnace.layerShown },
            style() {
                return {
                    'min-height': '96px',
                    'width': '128px',
                    'background-color': '#3a2f18',
                    'color': 'white',
                    'border-color': `${player.blast_furnace.placeBlock == this.corItem ? 'white' : 'rgba(0, 0, 0, 0.15)'}`
                }
            },
        },
        16: {
            title() {
                let t = "移除模式"
                return t
            },
            display() {
                let d = `不会返还高炉砖`
                return d
            },
            corItem: "remove",
            canClick() { return player.blast_furnace.placeBlock != this.corItem },
            onClick() {
                player.blast_furnace.placeBlock = this.corItem
            },
            unlocked() { return tmp.blast_furnace.layerShown },
            style() {
                return {
                    'min-height': '96px',
                    'width': '128px',
                    'background-color': 'rgba(0,0,0,0)',
                    'color': 'white',
                    'border-color': `${player.blast_furnace.placeBlock == this.corItem ? 'white' : 'rgba(0, 0, 0, 0.15)'}`
                }
            },
        },
        21: {
            title() {
                let t = "检测结构完整性"
                return t
            },
            canClick() { return !player.blast_furnace.built },
            onClick() {
                if (BF_structure_complete()) player.blast_furnace.built = true,
                    player.blast_furnace.struText = "结构搭建正确！现在可以使用高炉！"
                else player.blast_furnace.struText = "结构不完整或者有不该填充的位置被填充"
            },
            unlocked() { return tmp.blast_furnace.layerShown },
            style() {
                return {
                    'min-height': '96px',
                    'width': '128px',
                    'background-color': '#3a2f18',
                    'color': 'white',
                    'border-color': `${player.blast_furnace.placeBlock == this.corItem ? 'white' : 'rgba(0, 0, 0, 0.15)'}`
                }
            },
        },
        31: {
            title() {
                let t = "钢"
                return t
            },
            display() {
                let d = `
                需要材料：1铁矿石 + 1木炭<br>
                产出：144mB 熔融钢 （相当于1锭）<br>
                ${player.blast_furnace.actived[this.id] ? `进度：${ftl(player.blast_furnace.time[this.id])}/${ftl(tmp.blast_furnace.clickables[this.id].time)}` : "此配方未激活或者材料不足"}
                倍率：${formatWhole(this.mult())}x`
                return d
            },
            time: d(10),
            mult() {
                let m = d(1)
                if (hasUpgrade(steel, 11)) m = m.times(3)
                if (hasUpgrade(steel, 13)) m = m.times(3)
                if (hasUpgrade(steel, 14)) m = m.times(upgradeEffect(steel, 14))
                if (hasUpgrade(steel, 21)) m = m.times(upgradeEffect(steel, 21))
                if (hasUpgrade(steel, 22)) m = m.times(upgradeEffect(steel, 22))
                if (hasUpgrade(steel, 24)) m = m.times(upgradeEffect(steel, 24))
                if (hasUpgrade(silver, 13)) m = m.times(upgradeEffect(silver, 13))
                if (hasUpgrade(silver, 21)) m = m.times(upgradeEffect(silver, 21))

                return m
            },
            result(diff) {
                if (player.blast_furnace.actived[this.id]) {
                    if (!(player.iron.ore.gte(1) && player.furnace.charcoal.gte(1))) player.blast_furnace.actived[this.id] = false
                    player.blast_furnace.time[this.id] = player.blast_furnace.time[this.id].add(player.blast_furnace.time_multi.times(diffout))
                }
                if (player.blast_furnace.time[this.id].gte(tmp.blast_furnace.clickables[this.id].time.sub(d(1).times(diffout)))) {
                    player.blast_furnace.time[this.id] = d(0)
                    player.steel.molten = player.steel.molten.add(d(144).times(this.mult().min(player.iron.ore).min(player.furnace.charcoal)))
                    player.iron.ore = player.iron.ore.sub(this.mult().min(player.iron.ore).min(player.furnace.charcoal))
                    player.furnace.charcoal = player.furnace.charcoal.sub(this.mult().min(player.iron.ore).min(player.furnace.charcoal))
                }
            },
            canClick() {
                if (!player.blast_furnace.actived[this.id]) return player.iron.ore.gte(1) && player.furnace.charcoal.gte(1)
                else return true
            },
            onClick() {
                player.blast_furnace.actived[this.id] = !player.blast_furnace.actived[this.id],
                    player.blast_furnace.time[this.id] = d(0)
            },
            unlocked() { return hasMilestone(blast_furnace, 0) },
            styleClass() {
                if (this.canClick()) return 'fluid-pixels bbmm molten-animation'
            },
            style() {
                if (this.canClick()) return {
                    'min-height': '180px',
                    'width': '180px',
                    'background-image': 'url("resources/game_pic/molten.png")',
                    'background-color': '#a4a4a4',
                }
                else return {
                    'min-height': '180px',
                    'width': '180px',
                }
            },
        },
        32: {
            title() {
                let t = "熔融红石"
                return t
            },
            display() {
                let d = `
                需要材料：1不稳红石络合物<br>
                产出：250mB 熔融红石<br>
                ${player.blast_furnace.actived[this.id] ? `进度：${ftl(player.blast_furnace.time[this.id])}/${ftl(tmp.blast_furnace.clickables[this.id].time)}` : "此配方未激活或者材料不足"}
                倍率：${formatWhole(this.mult())}x`
                return d
            },
            time: d(10),
            mult() {
                let m = d(1)
                if (hasUpgrade(red_ele, 11)) m = m.times(upgradeEffect(red_ele, 11))
                if (hasUpgrade(redstone, 55)) m = m.times(upgradeEffect(redstone, 55))
                m = m.floor()
                return m
            },
            effectiveMult() {
                let m = this.mult()
                let effm = m.min(player.redstone.destabilized_clathrate)
                return effm
            },
            result(diff) {
                if (player.blast_furnace.actived[this.id]) {
                    if (player.redstone.destabilized_clathrate.lt(1)) player.blast_furnace.actived[this.id] = false
                    player.blast_furnace.time[this.id] = player.blast_furnace.time[this.id].add(player.blast_furnace.time_multi.times(diffout))
                }
                if (player.blast_furnace.time[this.id].gte(tmp.blast_furnace.clickables[this.id].time.sub(d(1).times(diffout)))) {
                    player.blast_furnace.time[this.id] = d(0)
                    player.redstone.molten = player.redstone.molten.add(d(250).times(this.effectiveMult()))
                    player.redstone.destabilized_clathrate = player.redstone.destabilized_clathrate.sub(this.effectiveMult())
                }
            },
            canClick() {
                if (!player.blast_furnace.actived[this.id]) return player.redstone.destabilized_clathrate.gte(1)
                else return true
            },
            onClick() {
                player.blast_furnace.actived[this.id] = !player.blast_furnace.actived[this.id],
                    player.blast_furnace.time[this.id] = d(0)
            },
            unlocked() { return hasUpgrade(redstone, 52) },
            styleClass() {
                if (this.canClick()) return 'fluid-pixels liquid-animation'
            },
            style() {
                if (this.canClick()) return {
                    'min-height': '180px',
                    'width': '180px',
                    color: 'white',
                    'background-image': 'url("resources/game_pic/redstone_still.png")',
                }
                else return {
                    'min-height': '180px',
                    'width': '180px',
                }
            },
        },
        1001: {
            display() {
                let d = `<`
                return d
            },
            canClick() { return player.blast_furnace.posY > 1 },
            onClick() {
                player.blast_furnace.posY -= 1
            },
            style() {
                return {
                    'min-height': '50px',
                    'width': '50px',
                    'font-size': '20px',
                    'color': 'white',
                }
            },
        },
        1002: {
            display() {
                let d = `Y = ${fw(player.blast_furnace.posY)}`
                return d
            },
            canClick() { return false },
            style() {
                return {
                    'min-height': '50px',
                    'width': '150px',
                    'font-size': '20px',
                    'background-color': '#3a2f18',
                    'border-radius': '2.5px',
                    'color': 'white',
                }
            },
        },
        1003: {
            display() {
                let d = `>`
                return d
            },
            canClick() { return player.blast_furnace.posY < 3 },
            onClick() {
                player.blast_furnace.posY += 1
            },
            style() {
                return {
                    'min-height': '50px',
                    'width': '50px',
                    'font-size': '20px',
                    'color': 'white',
                }
            },
        },
    },

    milestones: {
        0: {
            requirementDescription() { return `完成搭建高炉` },
            effectDescription() { return `解锁钢层级和钢的高炉熔炼配方` },
            done() { return player.blast_furnace.built },
            unlocked() { return tmp.blast_furnace.layerShown },
        },
    },

    tabFormat: [
        ["display-text", function () { return getPointsDisplay() }],
        ["display-text", function () { if (tmp.blast_furnace.layerShown) return `高炉建造${textStyle_h2(player.blast_furnace.built ? "已完成" : "未完成", '3a2f18')}` }],
        "blank",
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "smelt": {
                unlocked() { return tmp.blast_furnace.layerShown },
                name() { return '熔炼' },
                content: [
                    ["blank", "15px"],
                    "blank",
                    ["clickables", [3, 4, 5]]
                ]
            },
            "milestones": {
                unlocked() { return tmp.blast_furnace.layerShown },
                name() { return '里程碑' },
                content: [
                    ["blank", "15px"],
                    "milestones"
                ]
            },
            "build": {
                unlocked() { return tmp.blast_furnace.layerShown },
                name() { return '搭建' },
                content: [
                    ["blank", "15px"],
                    ["clickables", [100]],
                    "blank",
                    ["grid", function () {
                        let y = player.blast_furnace.posY
                        return [[y * 5 - 4], [y * 5 - 3], [y * 5 - 2], [y * 5 - 1], [y * 5]]
                    }],
                    "blank",
                    ["clickables", [1]],
                    ["display-text", function () { if (hasUpgrade(furnace, 25)) return `你有 ${textStyle_h2(formatWhole(player.furnace.scorched_brick), '3a2f18')} 高炉砖` }],
                    "blank",
                    ["clickables", [2]],
                    ["display-text", function () { return player.blast_furnace.struText }],
                    "blank",
                    ["display-text", function () { return `高炉可以熔炼未来一系列复杂合金，要使用高炉，需要先建造对应的多方块结构` }],
                    ["display-text", function () { return `通过翻页调整Y值（高度），点击上方6个按钮选择放置的方块（或者移除放置错误的方块）` }],
                    ["display-text", function () { return `选中方块后点击上方的5x5方格进行放置，并扣除相应的高炉砖（高炉砖不足无法放置）` }],
                    ["display-text", function () { return `底部中间3x3放置高炉方块，第2层中间的3x3除中心需要一个高炉控制器，高炉排液口，其余为高炉方块。` }],
                    ["display-text", function () { return `高炉浇注口需要在高炉排液口外进行连接。高炉浇注口的正下方需要一个高炉浇铸台，第3层3x3高炉方块封顶，另外中心点(3,2,3)需要为空` }],
                    ["display-text", function () { return `或者<a href=\"https://www.mcmod.cn/item/401543.html\" target=\"_blank\" style=\"color:#0080ff;text-decoration:underline\" window.open(this.href, '_blank'); return false;\">点此</a>查看高炉原型和搭建教程` }],
                ],
            },
        },
    },
})
/*    petal_apothecary_recipes: {
        pure_daisy: {
            1: ['white', 4],
        },
        endoflame: {
            1: ['red', 1],
            2: ['brown', 2],
            3: ['gray', 1],
        },
    }, */
function petal_apothecary_craft() {
    let slots = player.botania.petal_apothecary.slots
    let put = {}
    for (let i = 0; i < 4; i++) {
        if (slots[i]) put[slots[i]] = put[slots[i]] ? put[slots[i]] + 1 : 1
    }
    if (put.white == 4) return "pure_daisy"
    if (put.red == 1 && put.brown == 2 && put.lightgray == 1) return "endoflame"
    if (put.lime == 1 && put.purple == 2 && put.pink == 1) return "rosa_arcana"
    return undefined
}

//制造层6：植物魔法
addLayer("botania", {
    componentStyles: {
        "clickable"() {
            return {
                'margin-left': '-7px',
                'margin-right': '-7px',
            }
        }
    },
    name: "blast_furnace",
    position: 2007,
    row: 201,
    symbol: '植物魔法', // This appears on the layer's node. Default is the id with the first letter capitalized
    startData() {
        return {
            unlocked: true,
            points: new ExpantaNum(0),// This actually does nothing, but you have to write this. (Unless you want add something in this layer. #Todo, might change that later.)
            built: false,
            petal_apothecary: {
                slots: [],
                slotsZH: [],
                water: false,
            },
            livingwood: d(0),
            livingrock: d(0),
            pure_daisy: d(0), //白雏菊
            pure_daisy_cooldown: d(0),
            endoflame: d(0), //火红莲
            rosa_arcana: d(0), //阿卡纳蔷薇

            mana_diamond: d(0), //魔力钻石
            mana_pearl: d(0), //魔力珍珠
        }
    },
    color: "#80ff00",
    type: "none",
    nodeStyle: { background: "repeating-linear-gradient(90deg, #1f9000 0%, #1f9000 2%, #80ff00 2%, #80ff00 4%, #1f9000 4%)" },
    layerType: "craft",
    resource: "高炉",
    baseResource() { return "石头" },
    baseAmount() { return player.stone.points },
    exponent: 0.05,
    requires: d(1414213),
    tooltip() { return false },
    gainMult() { // Calculate the multiplier for main currency from bonuses
        m = d(1)
        return m
    },
    gainExp() { // Calculate the exponent on main currency from bonuses
        e = d(1)
        return e
    },
    resetDescription: "重置以合成 ",
    layerShown() { return hasNormalAchievement(143) },// If any layer in the array is unlocked, it will returns true. Otherwise it will return false.

    doReset(resettingLayer) {
        return undefined
    },

    clickables: {
        11: {
            title() {
                let t = ""
                return t
            },
            display() {
                let slots = player.botania.petal_apothecary.slotsZH
                let d = slots[0] ? slots[0] : "空"
                d += '<br>'
                d += slots[2] ? slots[2] : "空"
                return d
            },
            canClick() { return false },
            unlocked() { return tmp.botania.layerShown },
            style() {
                return {
                    height: '180px',
                    width: '135px',
                    background: 'linear-gradient(to bottom, #4a4a4a 0, #4a4a4a 89px, #ddeaea 91px, #ddeaea 76px, #4a4a4a 76px, #4a4a4a 100%)',
                    'border-radius': '0',
                    'border-color': '#ddeaea',
                    left: '1px',
                    color: '#ddeaea',
                    'font-size': '15px',
                    'line-height': '600%',
                }
            },
        },
        12: {
            title() {
                let t = ""
                return t
            },
            display() {
                let slots = player.botania.petal_apothecary.slotsZH
                let d = slots[1] ? slots[1] : "空"
                d += '<br>'
                d += slots[3] ? slots[3] : "空"
                return d
            },
            canClick() { return false },
            unlocked() { return tmp.botania.layerShown },
            style() {
                return {
                    height: '180px',
                    width: '135px',
                    background: 'linear-gradient(to bottom, #4a4a4a 0, #4a4a4a 89px, #ddeaea 91px, #ddeaea 76px, #4a4a4a 76px, #4a4a4a 100%)',
                    'border-radius': '0',
                    'border-color': '#ddeaea',
                    right: '1px',
                    color: '#ddeaea',
                    'font-size': '15px',
                    'line-height': '600%',
                }
            },
        },
        21: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = `放入白色神秘花瓣`
                return d
            },
            canClick() { return player.map.botania.flower.white[1].gte(1) && player.botania.petal_apothecary.slots.length < 4 },
            onClick() {
                player.botania.petal_apothecary.slots.push('white'),
                    player.botania.petal_apothecary.slotsZH.push('白色神秘花瓣'),
                    player.map.botania.flower.white[1] = player.map.botania.flower.white[1].sub(1)
            },
            unlocked() { return tmp.botania.layerShown },
            styleClass: "mysticalFlowerClickables",
            style() {
                if (this.canClick()) return { 'background-color': '#ddeaea' }
            },
        },
        22: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = `放入淡灰色神秘花瓣`
                return d
            },
            canClick() { return player.map.botania.flower.lightgray[1].gte(1) && player.botania.petal_apothecary.slots.length < 4 },
            onClick() {
                player.botania.petal_apothecary.slots.push('lightgray'),
                    player.botania.petal_apothecary.slotsZH.push('淡灰色神秘花瓣'),
                    player.map.botania.flower.lightgray[1] = player.map.botania.flower.lightgray[1].sub(1)
            },
            unlocked() { return tmp.botania.layerShown },
            styleClass: "mysticalFlowerClickables",
            style() {
                if (this.canClick()) return { 'background-color': '#737373' }
            },
        },
        23: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = `放入红色神秘花瓣`
                return d
            },
            canClick() { return player.map.botania.flower.red[1].gte(1) && player.botania.petal_apothecary.slots.length < 4 },
            onClick() {
                player.botania.petal_apothecary.slots.push('red'),
                    player.botania.petal_apothecary.slotsZH.push('红色神秘花瓣'),
                    player.map.botania.flower.red[1] = player.map.botania.flower.red[1].sub(1)
            },
            unlocked() { return tmp.botania.layerShown },
            styleClass: "mysticalFlowerClickables",
            style() {
                if (this.canClick()) return { 'background-color': '#a00019' }
            },
        },
        24: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = `放入棕色神秘花瓣`
                return d
            },
            canClick() { return player.map.botania.flower.brown[1].gte(1) && player.botania.petal_apothecary.slots.length < 4 },
            onClick() {
                player.botania.petal_apothecary.slots.push('brown'),
                    player.botania.petal_apothecary.slotsZH.push('棕色神秘花瓣'),
                    player.map.botania.flower.brown[1] = player.map.botania.flower.brown[1].sub(1)
            },
            unlocked() { return tmp.botania.layerShown },
            styleClass: "mysticalFlowerClickables",
            style() {
                if (this.canClick()) return { 'background-color': '#5e3c24' }
            },
        },
        31: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = `放入紫色神秘花瓣`
                return d
            },
            canClick() { return player.map.botania.flower.purple[1].gte(1) && player.botania.petal_apothecary.slots.length < 4 },
            onClick() {
                player.botania.petal_apothecary.slots.push('purple'),
                    player.botania.petal_apothecary.slotsZH.push('紫色神秘花瓣'),
                    player.map.botania.flower.purple[1] = player.map.botania.flower.purple[1].sub(1)
            },
            unlocked() { return hasUpgrade(experience, 25) },
            styleClass: "mysticalFlowerClickables",
            style() {
                if (this.canClick()) return { 'background-color': '#8932b8' }
            },
        },
        32: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = `放入粉色神秘花瓣`
                return d
            },
            canClick() { return player.map.botania.flower.pink[1].gte(1) && player.botania.petal_apothecary.slots.length < 4 },
            onClick() {
                player.botania.petal_apothecary.slots.push('pink'),
                    player.botania.petal_apothecary.slotsZH.push('粉色神秘花瓣'),
                    player.map.botania.flower.pink[1] = player.map.botania.flower.pink[1].sub(1)
            },
            unlocked() { return hasUpgrade(experience, 25) },
            styleClass: "mysticalFlowerClickables",
            style() {
                if (this.canClick()) return { 'background-color': '#f38baa' }
            },
        },
        33: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = `放入黄绿色神秘花瓣`
                return d
            },
            canClick() { return player.map.botania.flower.lime[1].gte(1) && player.botania.petal_apothecary.slots.length < 4 },
            onClick() {
                player.botania.petal_apothecary.slots.push('lime'),
                    player.botania.petal_apothecary.slotsZH.push('黄绿色神秘花瓣'),
                    player.map.botania.flower.lime[1] = player.map.botania.flower.lime[1].sub(1)
            },
            unlocked() { return hasUpgrade(experience, 25) },
            styleClass: "mysticalFlowerClickables",
            style() {
                if (this.canClick()) return { 'background-color': '#80c71f' }
            },
        },
        41: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = `取出花药台内的物品`
                return d
            },
            canClick() { return player.botania.petal_apothecary.slots.length >= 1 || player.botania.petal_apothecary.water },
            onClick() {
                let slots = player.botania.petal_apothecary.slots
                let put = {}
                for (let i = 0; i < 4; i++) {
                    if (slots[i]) put[slots[i]] = put[slots[i]] ? put[slots[i]] + 1 : 1
                }
                for (let id in put) {
                    player.map.botania.flower[id][1] = player.map.botania.flower[id][1].add(put[id])
                }
                player.botania.petal_apothecary.slots = [],
                    player.botania.petal_apothecary.slotsZH = [],
                    player.botania.petal_apothecary.water = false
            },
            unlocked() { return tmp.botania.layerShown },
            styleClass: "mysticalFlowerClickables",
            style() {
                if (this.canClick()) return { 'background-color': '#4a4a4a' }
            },
        },
        42: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = `倒入水`
                return d
            },
            canClick() { return !player.botania.petal_apothecary.water },
            onClick() {
                player.botania.petal_apothecary.water = true
            },
            unlocked() { return tmp.botania.layerShown },
            styleClass: "mysticalFlowerClickables",
            style() {
                if (this.canClick()) return { 'background-color': '#2b3cf4' }
            },
        },
        43: {
            title() {
                let t = ""
                return t
            },
            display() {
                let d = `进行合成`
                return d
            },
            canClick() { return petal_apothecary_craft() && player.botania.petal_apothecary.water },
            onClick() {
                player.botania[petal_apothecary_craft()] = player.botania[petal_apothecary_craft()].add(1),
                    player.botania.petal_apothecary.slots = [],
                    player.botania.petal_apothecary.slotsZH = [],
                    player.botania.petal_apothecary.water = false
            },
            unlocked() { return tmp.botania.layerShown },
            styleClass: "mysticalFlowerClickables",
            style() {
                if (this.canClick()) return { 'background-color': '#4a4a4a' }
            },
        },
        //魔力池配方
        101: {
            title() {
                let t = "魔力钢"
                return t
            },
            display() {
                let d = `
                向魔力池中投入铁锭，转化为魔力钢<br>
                需要魔力：${f(3000)}<br>
                需要材料：1铁锭<br>
                倍率：${fw(this.mult())}x`
                return d
            },
            mult() {
                let m = d(1)
                if (hasUpgrade(manasteel, 21)) m = m.times(player.mana.points.div(30000).floor())
                return m
            },
            effectiveMult() {
                let m = this.mult()
                m = m.min(player.mana.points.div(3000).floor()).min(player.iron.points)
                return m
            },
            canClick() { return player.mana.points.gte(3000) && player.iron.points.gte(1) && hasCraftingItem(382) },
            onClick() {
                player.manasteel.points = player.manasteel.points.add(this.effectiveMult()),
                    player.mana.points = player.mana.points.sub(this.effectiveMult().times(3000)),
                    player.iron.points = player.iron.points.sub(this.effectiveMult())
            },
            unlocked() { return hasNormalAchievement(145) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    'background': "linear-gradient(45deg, #005ee0 0%, #7db4ff 20%, #006bff 80%, #0045a3 100%)",
                }
            },
            tooltip() {
                let t = `魔力钢锭：${textResourceStyle(fw(player.manasteel.points), 'text-manasteel', 'h3')}<br>
                魔力：${textStyle_h3(fw(player.mana.points), '00bce2')}<br>
                铁锭：${textStyle_h3(fw(player.iron.points), 'd8d8d8')}<br>`
                return t
            },
        },
        102: {
            title() {
                let t = "魔力钻石"
                return t
            },
            display() {
                let d = `
                向魔力池中投入钻石，转化为魔力钻石<br>
                需要魔力：${f(1e106)}<br>
                需要材料：1钻石<br>
                倍率：${fw(this.mult())}x`
                return d
            },
            mult() {
                let m = d(1)
                return m
            },
            effectiveMult() {
                let m = this.mult()
                m = m.min(player.mana.points.div(1e106).floor()).min(player.diamond.points)
                return m
            },
            canClick() { return player.mana.points.gte(1e106) && player.diamond.points.gte(1) && hasCraftingItem(382) },
            onClick() {
                player.botania.mana_diamond = player.botania.mana_diamond.add(this.effectiveMult()),
                    player.mana.points = player.mana.points.sub(this.effectiveMult().times(1e106)),
                    player.diamond.points = player.diamond.points.sub(this.effectiveMult())
            },
            unlocked() { return hasNormalAchievement(145) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    'background': "#a0f8ff",
                }
            },
            tooltip() {
                let t = `
                魔力：${textStyle_h3(fw(player.mana.points), '00bce2')}<br>
                钻石：${textStyle_h3(fw(player.diamond.points), 'a2fbea')}<br>`
                return t
            },
        },
        103: {
            title() {
                let t = "魔力珍珠"
                return t
            },
            display() {
                let d = `
                向魔力池中投入末影珍珠，转化为魔力珍珠<br>
                需要魔力：${f(1e106)}<br>
                需要材料：1末影珍珠<br>
                倍率：${fw(this.mult())}x`
                return d
            },
            mult() {
                let m = d(1)
                return m
            },
            effectiveMult() {
                let m = this.mult()
                m = m.min(player.mana.points.div(1e106).floor()).min(player.map.battle.drops.ender_pearl)
                return m
            },
            canClick() { return player.mana.points.gte(1e106) && player.map.battle.drops.ender_pearl.gte(1) && hasCraftingItem(382) },
            onClick() {
                player.botania.mana_pearl = player.botania.mana_pearl.add(this.effectiveMult()),
                    player.mana.points = player.mana.points.sub(this.effectiveMult().times(1e106)),
                    player.map.battle.drops.ender_pearl = player.map.battle.drops.ender_pearl.sub(this.effectiveMult())
            },
            unlocked() { return hasNormalAchievement(145) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    'background': "#0095bc",
                }
            },
            tooltip() {
                let t = `
                魔力：${textStyle_h3(f(player.mana.points), '00bce2')}<br>
                末影珍珠：${textStyle_h3(fw(player.map.battle.drops.ender_pearl), '105e51')}<br>`
                return t
            },
        },
        //泰拉凝聚板配方
        201: {
            title() {
                let t = "泰拉钢"
                return t
            },
            display() {
                let d = `
                向泰拉凝聚板上丢出魔力钢锭、魔力钻石和魔力珍珠，等待魔力的注入，合成泰拉钢锭<br>
                需要魔力：${fw(this.manaCost())}<br>
                需要材料：1魔力钢锭 + 1魔力钻石 + 1魔力珍珠<br>
                倍率：${fw(this.mult())}x${this.effectiveMult().lt(this.mult() && this.effectiveMult().gt(0) && this.mult().gte(2)) ? `(${fw(this.effectiveMult())}x)` : ''}<br>
                下一个需要：${fw(this.costNext())}魔力`
                return d
            },
            manaCost() {
                let t = player.terrasteel.points
                let c = d(1e108).times(t.max(0).add(1).pow(5))
                return c
            },
            mult() {
                let m = d(1)
                return m
            },
            pending() {
                let terrasteel_pending = player.mana.points.div(1e108).root(5).sub(1).max(0).floor().add(1)
                return terrasteel_pending
            },
            effectiveMult() {
                let m = this.mult()
                let terrasteel_pending = this.pending()
                let difference = terrasteel_pending.sub(player.terrasteel.points).max(0)
                let effm = difference.min(m).min(player.botania.mana_diamond).min(player.botania.mana_pearl).floor()
                return effm
            },
            effectiveManaCost() {
                let t = player.terrasteel.points
                let tp = t.add(this.effectiveMult()).sub(1)
                return d(1e108).times(tp.max(0).add(1).pow(5))
            },
            costNext() {
                let t = player.terrasteel.points
                let tp = t.add(this.effectiveMult())
                return d(1e108).times(tp.max(0).add(1).pow(5))
            },
            canClick() { return player.mana.points.gte(this.manaCost()) && player.botania.mana_diamond.gte(1) && player.botania.mana_pearl.gte(1) && player.manasteel.points.gte(1) && hasCraftingItem(501) },
            onClick() {
                player.terrasteel.points = player.terrasteel.points.add(this.effectiveMult()),
                    player.botania.mana_diamond = player.botania.mana_diamond.sub(this.effectiveMult()),
                    player.botania.mana_pearl = player.botania.mana_pearl.sub(this.effectiveMult()),
                    player.mana.points = player.mana.points.sub(this.effectiveManaCost())
            },
            unlocked() { return hasUpgrade(mana, 12) },
            style() {
                return {
                    'min-height': '210px',
                    'width': '210px',
                    'background': "linear-gradient(45deg, #2f8300 0%, #9fff57 15%, #53f900 80%, #39bc00 90%, #277c00 100%)",
                }
            },
            tooltip() {
                let t = `泰拉钢锭：${textResourceStyle(fw(player.terrasteel.points), 'text-terrasteel', 'h3')}<br>
                魔力钢锭：${textResourceStyle(fw(player.manasteel.points), 'text-manasteel', 'h3')}<br>
                魔力钻石：${textStyle_h3(fw(player.botania.mana_diamond), 'a0f8ff')}<br>
                魔力珍珠：${textStyle_h3(fw(player.botania.mana_pearl), '0095bc')}<br>
                魔力：${textStyle_h3(fw(player.mana.points), '00bce2')}<br>`
                return t
            },
        },
    },

    infoboxes: {
        petal_apothecary_recipe: {
            title: '花药台配方',
            body() {
                let b = '白雏菊：4白色神秘花瓣<br>火红莲：1淡灰色神秘花瓣 + 1红色神秘花瓣 + 2棕色神秘花瓣'
                if (hasUpgrade(experience, 25)) b += '<br>阿卡纳蔷薇：1黄绿色神秘花瓣 + 1粉色神秘花瓣 + 2紫色神秘花瓣'
                b += '<br>花药台需要倒入水才能合成'
                return b
            },
        }
    },

    livingGain() {
        let base = d(4)
        let g = base.times(player.botania.pure_daisy)
        return g
    },

    update(diff) {
        if (player.botania.pure_daisy.gte(1) && player.botania.pure_daisy_cooldown.eq(60)) player.botania.livingwood = player.botania.livingwood.add(tmp.botania.livingGain),
            player.botania.livingrock = player.botania.livingrock.add(tmp.botania.livingGain),
            player.botania.pure_daisy_cooldown = d(0)

        if (player.botania.pure_daisy.gte(1) && player.botania.pure_daisy_cooldown.lt(60)) player.botania.pure_daisy_cooldown = player.botania.pure_daisy_cooldown.add(diff).min(60)
    },

    tabFormat: [
        ["display-text", function () { return getPointsDisplay() }],
        "blank",
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "petal_apothecary": {
                unlocked() { return tmp.botania.layerShown },
                name() { return '花药台' },
                content: [
                    ["blank", "15px"],
                    ["clickables", [1]],
                    ["display-text", function () { return player.botania.petal_apothecary.water ? `水已倒入` : `水未倒入` }],
                    "blank",
                    ["clickables", [2, 3]],
                    "blank",
                    ["clickables", [4]],
                    "blank",
                    ["display-text", function () {
                        let white = `你有${textStyle_h3(fw(player.map.botania.flower.white[1]), 'ddeaea')}白色神秘花瓣`
                        let lightgray = `你有${textStyle_h3(fw(player.map.botania.flower.lightgray[1]), '737373')}淡灰色神秘花瓣`
                        let red = `你有${textStyle_h3(fw(player.map.botania.flower.red[1]), 'a00019')}红色神秘花瓣`
                        let brown = `你有${textStyle_h3(fw(player.map.botania.flower.brown[1]), '5e3c24')}棕色神秘花瓣`
                        let purple = `你有${textStyle_h3(fw(player.map.botania.flower.purple[1]), '8932b8')}紫色神秘花瓣`
                        let pink = `你有${textStyle_h3(fw(player.map.botania.flower.pink[1]), 'f38baa')}粉色神秘花瓣`
                        let lime = `你有${textStyle_h3(fw(player.map.botania.flower.lime[1]), '80c71f')}黄绿色神秘花瓣`
                        let br = "<br>"
                        let extra1 = hasUpgrade(experience, 25) ? br + purple + br + pink + br + lime : ''
                        return white + br + lightgray + br + red + br + brown + extra1
                    }],
                    ["infobox", "petal_apothecary_recipe"],
                    ["display-text", function () {
                        return `你有 ${textStyle_h2(fw(player.botania.pure_daisy), 'ddeaea')} 白雏菊`
                    }],
                    ["display-text", function () {
                        return `你有 ${textStyle_h2(fw(player.botania.endoflame), 'b87c00')} 火红莲`
                    }],
                    ["display-text", function () {
                        if (hasUpgrade(experience, 25)) return `你有 ${textStyle_h2(fw(player.botania.rosa_arcana), 'ff02ff')} 阿卡纳蔷薇`
                    }],
                    ["display-text", function () {
                        if (player.botania.pure_daisy.gte(1)) return `每分钟能够转化 ${textStyle_h2(fw(tmp.botania.livingGain), 'ddeaea')} 活木和活石`
                    }],
                    ["display-text", function () {
                        if (player.botania.pure_daisy.gte(1)) return `转化进度：${ftl(player.botania.pure_daisy_cooldown)}/${ftl(60)}`
                    }],
                    ["display-text", function () {
                        if (player.botania.pure_daisy.gte(1)) return `你有 ${textStyle_h2(fw(player.botania.livingwood), '40190b')} 活木`
                    }],
                    ["display-text", function () {
                        if (player.botania.pure_daisy.gte(1)) return `你有 ${textStyle_h2(fw(player.botania.livingrock), 'c0bca2')} 活石`
                    }],
                ]
            },
            "mana_pool": {
                unlocked() { return hasCraftingItem(382) },
                name() { return '魔力池' },
                content: [
                    ["blank", "15px"],
                    ["clickables", [10, 11]],
                    "blank",
                    ["display-text", function () {
                        if (hasUpgrade(manasteel, 33)) return `你有 ${textStyle_h2(fw(player.botania.mana_diamond), 'a0f8ff')} 魔力钻石`
                    }],
                    ["display-text", function () {
                        if (hasUpgrade(manasteel, 33)) return `你有 ${textStyle_h2(fw(player.botania.mana_pearl), '0095bc')} 魔力珍珠`
                    }],
                ]
            },
            "terrestrial_agglomeration_plate": {
                unlocked() { return hasCraftingItem(501) },
                name() { return '泰拉凝聚板' },
                content: [
                    ["blank", "15px"],
                    ["clickables", [20, 21]],
                    "blank",
                ]
            },
        },
    },
})


addLayer("energy", {
    name: "energy",
    position: 3001,
    row: 301,
    symbol() { return '↓ 能源 ↓' },
    small: true,// Set true to generate a slightly different layer
    nodeStyle: { "font-size": "15px", "height": "30px" },// Change layer button' style
    startData() {
        return {
            unlocked: true,
            points: new ExpantaNum(0),// This actually does nothing, but you have to write this. (Unless you want add something in this layer. #Todo, might change that later.)
        }
    },
    color: "#fefefe",
    type: "none",
    tooltip() { return false },
    layerShown() { return hasNormalAchievement(33) },// If any layer in the array is unlocked, it will returns true. Otherwise it will return false.
    tabFormat: [
        ["display-text", function () { return getPointsDisplay() }]
    ],
})

function RFAutobuyerActivated(id) {
    return player.rf.autobuyer[id]
}

//能源层1：红石通量
addLayer("rf", {
    componentStyles: {
        "clickable"() {
            return {
                'margin-left': '-7px',
                'margin-right': '-7px',
            }
        }
    },
    name: "rf",
    position: 3002,
    row: 301,
    symbol: '红石通量', // This appears on the layer's node. Default is the id with the first letter capitalized
    startData() {
        return {
            unlocked: true,
            points: new ExpantaNum(0),// This actually does nothing, but you have to write this. (Unless you want add something in this layer. #Todo, might change that later.)
            autobuyer: {

            },
            autoCurrencyPage: 1,
            maxAutoCurrencyPage: 1,
        }
    },
    color: "#fc0000",
    type: "none",
    layerType: "energy",
    resource: "RF",
    baseResource() { return "石头" },
    baseAmount() { return player.stone.points },
    exponent: 0.05,
    requires: d(1414213),
    tooltip() { return false },
    gainMult() { // Calculate the multiplier for main currency from bonuses
        m = d(0)
        if (hasCraftingItem(61)) m = m.add(15)
        if (hasUpgrade(rf, 11)) m = m.times(3)
        if (hasCraftingItem(92)) m = m.times(4)
        if (hasUpgrade(rf, 13)) m = m.times(3)
        if (hasCraftingItem(121)) m = m.times(10)
        if (hasCraftingItem(222)) m = m.times(15)
        if (hasMilestone(brass, 1)) m = m.times(1.5)
        if (hasCraftingItem(331)) m = m.times(5)
        if (hasCraftingItem(361)) m = m.times(5)
        if (hasCraftingItem(411)) m = m.times(3)
        if (hasCraftingItem(462)) m = m.times(8.5)
        return m
    },
    netGrowth() {
        let g = tmp.rf.gainMult
        if (RFAutobuyerActivated(11)) g = g.sub(3)
        if (RFAutobuyerActivated(12)) g = g.sub(3)
        if (RFAutobuyerActivated(13)) g = g.sub(3)
        if (RFAutobuyerActivated(14)) g = g.sub(3)
        if (RFAutobuyerActivated(15)) g = g.sub(300)
        if (RFAutobuyerActivated(21)) g = g.sub(8)
        if (RFAutobuyerActivated(22)) g = g.sub(8)
        if (RFAutobuyerActivated(23)) g = g.sub(8)
        if (RFAutobuyerActivated(24)) g = g.sub(16)
        if (RFAutobuyerActivated(31)) g = g.sub(128)
        if (RFAutobuyerActivated(32)) g = g.sub(192)
        if (RFAutobuyerActivated(33)) g = g.sub(768)
        if (RFAutobuyerActivated(34)) g = g.sub(1080)
        if (RFAutobuyerActivated(35)) g = g.sub(1080)
        if (RFAutobuyerActivated(41)) g = g.sub(1080)
        if (RFAutobuyerActivated(51)) g = g.sub(600)
        if (RFAutobuyerActivated(52)) g = g.sub(600000)
        if (RFAutobuyerActivated(61)) g = g.sub(800)
        if (RFAutobuyerActivated(62)) g = g.sub(12800)
        if (RFAutobuyerActivated(63)) g = g.sub(3240)
        if (RFAutobuyerActivated(64)) g = g.sub(100000)
        if (RFAutobuyerActivated(65)) g = g.sub(150000)
        if (RFAutobuyerActivated(71)) g = g.sub(225000)
        if (RFAutobuyerActivated(72)) g = g.sub(900000)
        if (RFAutobuyerActivated(73)) g = g.sub(1500000)
        if (RFAutobuyerActivated(74)) g = g.sub(4500000)
        if (RFAutobuyerActivated(75)) g = g.sub(7500000)

        if (RFAutobuyerActivated(10001)) g = g.sub(66)
        if (RFAutobuyerActivated(10002)) g = g.sub(66)
        if (RFAutobuyerActivated(10003)) g = g.sub(66)
        if (RFAutobuyerActivated(10004)) g = g.sub(1440)
        if (RFAutobuyerActivated(10005)) g = g.sub(1440)
        if (RFAutobuyerActivated(10011)) g = g.sub(1440)
        if (RFAutobuyerActivated(10012)) g = g.sub(1800)
        if (RFAutobuyerActivated(10013)) g = g.sub(1800)
        if (RFAutobuyerActivated(10014)) g = g.sub(2400)
        if (RFAutobuyerActivated(10015)) g = g.sub(2160)
        if (RFAutobuyerActivated(10021)) g = g.sub(2160)
        if (RFAutobuyerActivated(10022)) g = g.sub(4320)
        if (RFAutobuyerActivated(10023)) g = g.sub(4320)
        if (RFAutobuyerActivated(10024)) g = g.sub(81920)
        if (RFAutobuyerActivated(10025)) g = g.sub(100000)
        if (RFAutobuyerActivated(10031)) g = g.sub(200000)
        if (RFAutobuyerActivated(10032)) g = g.sub(350000)
        if (RFAutobuyerActivated(10033)) g = g.sub(700000)
        if (RFAutobuyerActivated(10034)) g = g.sub(1200000)

        if (fuelID() == 10005) g = g.sub(51200)

        if (RFAutobuyerActivated(20001)) g = g.sub(1000000)
        return g
    },
    gainExp() { // Calculate the exponent on main currency from bonuses
        e = d(1)
        return e
    },
    layerShown() { return hasNormalAchievement(33) },// If any layer in the array is unlocked, it will returns true. Otherwise it will return false.


    doReset(resettingLayer) {
        return undefined
    },

    upgrades: {
        11: {
            title: "太阳能板：青铜改良",
            description: "RF发电速度x3",
            currencyInternalName: "points",
            currencyDisplayName: "青铜锭",
            currencyLayer: bronze,
            cost() { return new ExpantaNum(4) },
            unlocked() { return hasNormalAchievement(37) },
        },
        12: {
            title: "煤炭矿机",
            description: "解锁自动挖掘煤炭",
            currencyInternalName: "points",
            currencyDisplayName: "青铜锭",
            currencyLayer: bronze,
            cost() { return new ExpantaNum(12) },
            unlocked() { return hasNormalAchievement(37) },
        },
        13: {
            title: "太阳能板：铁矿石改良",
            description: "RF发电速度x3",
            currencyInternalName: "ore",
            currencyDisplayName: "铁矿石",
            currencyLayer: iron,
            cost() { return new ExpantaNum(3) },
            unlocked() { return hasNormalAchievement(46) },
        },
        14: {
            title: "锡矿石矿机",
            description: "解锁自动挖掘锡矿石",
            currencyInternalName: "ore",
            currencyDisplayName: "铁矿石",
            currencyLayer: iron,
            cost() { return new ExpantaNum(5) },
            unlocked() { return hasNormalAchievement(46) },
        },
        15: {
            title: "丛林树场",
            description: "解锁自动砍伐丛林原木",
            cost() { return new ExpantaNum(1e8) },
            unlocked() { return hasCraftingItem(121) },
        },
        21: {
            title: "虚空熔炼铜锭",
            description: "解锁自动熔炼铜矿石",
            currencyInternalName: "ore",
            currencyDisplayName: "铁矿石",
            currencyLayer: iron,
            cost() { return new ExpantaNum(20) },
            unlocked() { return hasCraftingItem(112) },
        },
        22: {
            title: "虚空熔炼锡锭",
            description: "解锁自动熔炼锡矿石",
            currencyInternalName: "ore",
            currencyDisplayName: "铁矿石",
            currencyLayer: iron,
            cost() { return new ExpantaNum(20) },
            unlocked() { return hasCraftingItem(112) },
        },
        23: {
            title: "虚空熔炼木炭",
            description: "解锁自动熔炼木炭",
            currencyInternalName: "ore",
            currencyDisplayName: "铁矿石",
            currencyLayer: iron,
            cost() { return new ExpantaNum(20) },
            unlocked() { return hasCraftingItem(112) },
        },
        24: {
            title: "虚空熔炼铁锭",
            description: "解锁自动熔炼铁锭",
            currencyInternalName: "points",
            currencyDisplayName: "康铜锭",
            currencyLayer: constantan,
            cost() { return new ExpantaNum(1e40) },
            unlocked() { return hasUpgrade(constantan, 35) },
        },
        25: {
            title: "虚空熔炼镍锭",
            description: "解锁自动熔炼镍锭",
            currencyInternalName: "points",
            currencyDisplayName: "康铜锭",
            currencyLayer: constantan,
            cost() { return new ExpantaNum(1e40) },
            unlocked() { return hasUpgrade(constantan, 35) },
        },
        31: {
            title: "铁矿石矿机",
            description: "解锁自动挖掘铁矿石",
            currencyInternalName: "ore",
            currencyDisplayName: "铝矿石",
            currencyLayer: aluminum,
            cost() { return new ExpantaNum(999) },
            unlocked() { return hasCraftingItem(162) },
        },
        32: {
            title: "虚空合金青铜锭",
            description: "解锁自动合金青铜锭",
            currencyInternalName: "ore",
            currencyDisplayName: "铅矿石",
            currencyLayer: lead,
            cost() { return new ExpantaNum(1) },
            unlocked() { return hasCraftingItem(162) },
        },
        33: {
            title: "镍矿石矿机",
            description: "解锁自动挖掘镍矿石",
            currencyInternalName: "points",
            currencyDisplayName: "铅锭",
            currencyLayer: lead,
            cost() { return new ExpantaNum(25) },
            unlocked() { return hasCraftingItem(171) },
        },
        34: {
            title: "铝矿石矿机",
            description: "解锁自动挖掘铝矿石",
            currencyInternalName: "points",
            currencyDisplayName: "康铜锭",
            currencyLayer: constantan,
            cost() { return new ExpantaNum(1e40) },
            unlocked() { return hasUpgrade(constantan, 35) },
        },
        35: {
            title: "铅矿石矿机",
            description: "解锁自动挖掘铅矿石",
            currencyInternalName: "points",
            currencyDisplayName: "康铜锭",
            currencyLayer: constantan,
            cost() { return new ExpantaNum(1e40) },
            unlocked() { return hasUpgrade(constantan, 35) },
        },
        41: {
            title: "金合欢树场",
            description: "解锁自动砍伐金合欢原木",
            currencyInternalName: "acacia",
            currencyDisplayName: "金合欢原木",
            currencyLayer: wood,
            cost() { return new ExpantaNum(77777) },
            unlocked() { return hasCraftingItem(212) },
        },
        42: {
            title: "深色橡木树场",
            description: "解锁自动砍伐深色橡木原木",
            currencyInternalName: "darkOak",
            currencyDisplayName: "深色橡木原木",
            currencyLayer: wood,
            cost() { return new ExpantaNum(1e94) },
            unlocked() { return hasCraftingItem(411) },
        },
        51: {
            title: "自动蓄水",
            description: "需求：拥有蓄水器<br>解锁蓄水器蓄水",
            currencyInternalName: "water",
            currencyDisplayName: "mB 水",
            currencyLayer: iron,
            canAfford() { return hasCraftingItem(232) },
            cost() { return new ExpantaNum(300000000) },
            unlocked() { return hasCraftingItem(212) },
        },
        52: {
            title: "高温熔炼熔岩",
            description: "需求：拥有熔岩炉<br>解锁熔岩炉熔炼熔岩",
            currencyInternalName: "lava",
            currencyDisplayName: "mB 熔岩",
            currencyLayer: iron,
            canAfford() { return hasCraftingItem(241) },
            cost() { return new ExpantaNum(300000000) },
            unlocked() { return hasCraftingItem(212) },
        },
        53: {
            title: "虚空熔炼铝锭",
            description: "解锁自动熔炼铝锭",
            currencyInternalName: "energy",
            currencyDisplayName: "殷钢能量",
            currencyLayer: invar,
            cost() { return new ExpantaNum(1e125) },
            unlocked() { return hasMilestone(invar, 4) },
        },
        54: {
            title: "虚空熔炼铅锭",
            description: "解锁自动熔炼铅锭",
            currencyInternalName: "energy",
            currencyDisplayName: "殷钢能量",
            currencyLayer: invar,
            cost() { return new ExpantaNum(1e140) },
            unlocked() { return hasMilestone(invar, 4) },
        },
        55: {
            title: "虚空合金康铜锭",
            description: "解锁自动合金康铜锭",
            currencyInternalName: "energy",
            currencyDisplayName: "殷钢能量",
            currencyLayer: invar,
            cost() { return new ExpantaNum('6.6666e666') },
            unlocked() { return hasUpgrade(alumbrass, 15) },
        },
        61: {
            title: "虚空合金殷钢锭",
            description: "解锁自动合金殷钢锭",
            currencyInternalName: "energy",
            currencyDisplayName: "殷钢能量",
            currencyLayer: invar,
            cost() { return new ExpantaNum('1e2260') },
            unlocked() { return hasMilestone(brass, 0) },
        },
        62: {
            title: "虚空合金铝黄铜锭",
            description: "解锁自动合金铝黄铜锭",
            currencyInternalName: "points",
            currencyDisplayName: "黄铜锭",
            currencyLayer: invar,
            cost() { return new ExpantaNum(700) },
            unlocked() { return hasMilestone(brass, 0) },
        },
        63: {
            title: "锌矿石矿机",
            description: "解锁自动挖掘锌矿石",
            currencyInternalName: "points",
            currencyDisplayName: "黄铜锭",
            currencyLayer: brass,
            cost() { return new ExpantaNum(0) },
            unlocked() { return hasMilestone(brass, 1) },
        },
        64: {
            title: "虚空熔炼锌锭",
            description: "解锁自动熔炼锌锭",
            currencyInternalName: "points",
            currencyDisplayName: "黄铜锭",
            currencyLayer: brass,
            cost() { return new ExpantaNum(0) },
            unlocked() { return hasMilestone(brass, 1) },
        },
        65: {
            title: "虚空合金黄铜锭",
            description: "解锁自动合金黄铜锭",
            currencyInternalName: "points",
            currencyDisplayName: "黄铜锭",
            currencyLayer: brass,
            cost() { return new ExpantaNum(0) },
            unlocked() { return hasMilestone(brass, 1) },
        },
        71: {
            title: "自动化钢锭生产",
            description: "解锁自动化钢锭生产",
            currencyInternalName: "points",
            currencyDisplayName: "钢锭",
            currencyLayer: steel,
            cost() { return new ExpantaNum(1.25e27) },
            unlocked() { return hasCraftingItem(331) },
        },
        72: {
            title: "银矿石矿机",
            description: "需求：二阶等级1<br>解锁自动挖掘银矿石",
            currencyInternalName: "points",
            currencyDisplayName: "银锭",
            currencyLayer: silver,
            canAfford() { return player.tiers[0].gte(1) },
            cost() { return new ExpantaNum(1e85) },
            unlocked() { return hasCraftingItem(331) },
        },
        73: {
            title: "虚空熔炼银锭",
            description: "需求：二阶等级1<br>解锁自动熔炼银锭",
            currencyInternalName: "points",
            currencyDisplayName: "金锭",
            currencyLayer: gold,
            canAfford() { return player.tiers[0].gte(1) },
            cost() { return new ExpantaNum(1e32) },
            unlocked() { return hasCraftingItem(331) },
        },
        74: {
            title: "金矿石矿机",
            description: "解锁自动挖掘金矿石",
            currencyInternalName: "points",
            currencyDisplayName: "红石粉",
            currencyLayer: redstone,
            cost() { return new ExpantaNum(1e239) },
            unlocked() { return hasCraftingItem(361) },
        },
        75: {
            title: "虚空熔炼金锭",
            description: "解锁自动熔炼金锭",
            currencyInternalName: "points",
            currencyDisplayName: "红石粉",
            currencyLayer: redstone,
            cost() { return new ExpantaNum(1e239) },
            unlocked() { return hasCraftingItem(361) },
        },
        81: {
            title: "红石矿石矿机",
            description: "解锁自动挖掘红石矿石（可同时产生红石矿石和红石粉）",
            currencyInternalName: "ore",
            currencyDisplayName: "铂矿石",
            currencyLayer: platinum,
            cost() { return new ExpantaNum(10) },
            unlocked() { return hasCraftingItem(401) },
        },
        82: {
            title: "红石矿石矿机 +1",
            description: "红石矿石矿机现在还能被动获取不稳红石络合物",
            currencyInternalName: "points",
            currencyDisplayName: "钻石",
            currencyLayer: diamond,
            cost() { return new ExpantaNum(5) },
            unlocked() { return hasCraftingItem(411) },
        },
        83: {
            title: "虚空熔炼琥珀金锭",
            description: "解锁自动熔炼琥珀金锭",
            currencyInternalName: "points",
            currencyDisplayName: "琥珀金锭",
            currencyLayer: electrum,
            cost() { return new ExpantaNum('7.7777e777') },
            unlocked() { return hasCraftingItem(411) },
        },
        84: {
            title: "虚空熔炼红石琥珀金锭",
            description: "解锁自动熔炼红石琥珀金锭",
            currencyInternalName: "points",
            currencyDisplayName: "红石琥珀金锭",
            currencyLayer: red_ele,
            cost() { return new ExpantaNum('1e4200') },
            unlocked() { return hasCraftingItem(361) },
        },
        85: {
            title: "铂矿石矿机",
            description: "解锁自动挖掘铂矿石",
            currencyInternalName: "points",
            currencyDisplayName: "绿宝石",
            currencyLayer: emerald,
            cost() { return new ExpantaNum(3) },
            unlocked() { return hasCraftingItem(411) },
        },
        91: {
            title: "黑曜石粉",
            description() { return `需求：拥有磨粉机<br>解锁${this.title}的磨粉机配方` },
            canAfford() { return hasCraftingItem(451) },
            currencyInternalName: "points",
            currencyDisplayName: "黑曜石",
            currencyLayer: obsidian,
            cost() { return new ExpantaNum(2025) },
            unlocked() { return hasCraftingItem(411) },
        },
        92: {
            title: "木屑",
            description() { return `解锁${this.title}的磨粉机配方` },
            currencyInternalName: "points",
            currencyDisplayName: "绿宝石",
            currencyLayer: emerald,
            cost() { return new ExpantaNum(1e30) },
            unlocked() { return hasUpgrade(emerald, 33) },
        },
        101: {
            title: "虚空熔炼铂锭",
            description: "解锁自动熔炼铂锭",
            currencyInternalName: "points",
            currencyDisplayName: "绿宝石",
            currencyLayer: emerald,
            cost() { return new ExpantaNum(3) },
            unlocked() { return hasCraftingItem(361) },
        },
        102: {
            title: "红石矿石矿机 +2",
            description: "红石矿石矿机现在还能被动获取不稳红石矿石",
            currencyInternalName: "points",
            currencyDisplayName: "绿宝石",
            currencyLayer: emerald,
            cost() { return new ExpantaNum(100000) },
            unlocked() { return hasCraftingItem(411) },
        },
        103: {
            title: "钻石矿石矿机",
            description: "解锁自动挖掘钻石矿石（可同时产生钻石矿石和钻石）",
            currencyInternalName: "points",
            currencyDisplayName: "绿宝石",
            currencyLayer: emerald,
            cost() { return new ExpantaNum(100000) },
            unlocked() { return hasCraftingItem(411) },
        },
        104: {
            title: "钻石矿石矿机 +1",
            description: "解锁自动挖掘无暇钻石矿石（每秒产生相当于挖掘四阶无暇钻石获取）",
            currencyInternalName: "points",
            currencyDisplayName: "绿宝石",
            currencyLayer: emerald,
            cost() { return new ExpantaNum(1e42) },
            unlocked() { return hasCraftingItem(462) },
        },
        105: {
            title: "黑曜石矿机",
            description: "解锁自动挖掘黑曜石",
            currencyInternalName: "points",
            currencyDisplayName: "绿宝石",
            currencyLayer: emerald,
            cost() { return new ExpantaNum(1e42) },
            unlocked() { return hasCraftingItem(462) },
        },
        111: {
            title: "玄武岩矿机",
            description: "解锁自动挖掘玄武岩",
            currencyInternalName: "points",
            currencyDisplayName: "绿宝石",
            currencyLayer: emerald,
            cost() { return new ExpantaNum(1e42) },
            unlocked() { return hasCraftingItem(462) },
        },
    },

    clickables: {
        11: {
            title() {
                let t = "自动树场-木头"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：3 RF/t<br>
                效果：每秒自动获取一次撸树的木头的100%<br><br>
                状态：${onoff}`
                return d
            },
            cost() {
                return d(3)
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id)) return player.wood.points = player.wood.points.add(tmp.wood.gainMult.times(diffout))
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return tmp.rf.layerShown },
            styleClass: "automation-clickables",
            style() {
                return {
                    'background-color': '#b8945e',
                }
            },
        },
        12: {
            title() {
                let t = "自动树场-橡木原木"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：3 RF/t<br>
                效果：每秒自动获取一次撸树的橡木原木的100%<br><br>
                状态：${onoff}`
                return d
            },
            cost() {
                return d(3)
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id)) return player.wood.oak = player.wood.oak.add(tmp.wood.logGain.oak.times(diffout))
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return tmp.rf.layerShown },
            styleClass: "automation-clickables",
            style() {
                return {
                    'background-color': '#b8945e',
                }
            },
        },
        13: {
            title() {
                let t = "自动树场-云杉原木"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：3 RF/t<br>
                效果：每秒自动获取一次撸树的云杉原木的100%<br><br>
                状态：${onoff}`
                return d
            },
            cost() {
                return d(3)
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id)) return player.wood.spruce = player.wood.spruce.add(tmp.wood.logGain.spruce.times(diffout))
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return tmp.rf.layerShown },
            styleClass: "automation-clickables",
            style() {
                return {
                    'background-color': '#826038',
                }
            },
        },
        14: {
            title() {
                let t = "自动树场-白桦原木"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：3 RF/t<br>
                效果：每秒自动获取一次撸树的白桦原木的100%<br><br>
                状态：${onoff}`
                return d
            },
            cost() {
                return d(3)
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id)) return player.wood.birch = player.wood.birch.add(tmp.wood.logGain.birch.times(diffout))
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return tmp.rf.layerShown },
            styleClass: "automation-clickables",
            style() {
                return {
                    'background-color': '#ceb77c',
                }
            },
        },
        15: {
            title() {
                let t = "自动树场-丛林原木"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：300 RF/t<br>
                效果：每秒自动获取一次撸树的丛林原木的100%<br><br>
                状态：${onoff}`
                return d
            },
            cost() {
                return d(300)
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id)) return player.wood.jungle = player.wood.jungle.add(tmp.wood.logGain.jungle.times(diffout))
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return hasUpgrade(rf, 15) },
            styleClass: "automation-clickables",
            style() {
                return {
                    'background-color': '#9f844d',
                }
            },
        },
        21: {
            title() {
                let t = "刷石机"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：8 RF/t<br>
                效果：每秒自动获取一次挖掘石头的100%<br><br>
                状态：${onoff}`
                return d
            },
            cost() {
                return d(8)
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id)) return player.stone.points = player.stone.points.add(tmp.stone.gainMult.times(diffout))
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return hasNormalAchievement(37) },
            styleClass: "automation-clickables",
            style() {
                return {
                    'background-color': '#4a4a4a',
                }
            },
        },
        22: {
            title() {
                let t = "自动矿机-泥土"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：8 RF/t<br>
                效果：每秒自动获取一次挖掘石头的泥土的100%<br><br>
                状态：${onoff}`
                return d
            },
            cost() {
                return d(8)
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id)) return player.stone.dirt = player.stone.dirt.add(tmp.stone.otherGain.dirt.times(diffout))
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return hasNormalAchievement(37) },
            styleClass: "automation-clickables",
            style() {
                return {
                    'background-color': '#5f452f',
                }
            },
        },
        23: {
            title() {
                let t = "自动矿机-沙子"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：8 RF/t<br>
                效果：每秒自动获取一次挖掘石头的沙子的100%<br><br>
                状态：${onoff}`
                return d
            },
            cost() {
                return d(8)
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id)) return player.stone.sand = player.stone.sand.add(tmp.stone.otherGain.sand.times(diffout))
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return hasNormalAchievement(37) },
            styleClass: "automation-clickables",
            style() {
                return {
                    'background-color': '#d6cf97',
                }
            },
        },
        24: {
            title() {
                let t = "自动矿机-煤炭"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：16 RF/t<br>
                效果：每秒自动获取一次挖掘石头的煤炭的100%<br><br>
                状态：${onoff}`
                return d
            },
            cost() {
                return d(16)
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id)) return player.stone.coal = player.stone.coal.add(tmp.stone.otherGain.coal.times(diffout))
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return hasUpgrade(rf, 12) },
            styleClass: "automation-clickables",
            style() {
                return {
                    'background-color': '#1e1e1e',
                    color: 'white',
                }
            },
        },
        31: {
            title() {
                let t = "自动矿机-铜矿石"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：128 RF/t<br>
                效果：每秒自动获取一次挖掘铜矿石的10%<br><br>
                状态：${onoff}`
                return d
            },
            cost() {
                return d(128)
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id)) return player.copper.ore = player.copper.ore.add(tmp.copper.gainMult.div(10).times(diffout))
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return hasCraftingItem(92) },
            styleClass: "automation-clickables",
            style() {
                return {
                    "background": "linear-gradient(45deg, #ea8601 0%, #ffb53c 100%)",
                }
            },
        },
        32: {
            title() {
                let t = "自动矿机-锡矿石"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：192 RF/t<br>
                效果：每秒自动获取一次挖掘锡矿石的10%<br><br>
                状态：${onoff}`
                return d
            },
            cost() {
                return d(192)
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id)) return player.tin.ore = player.tin.ore.add(tmp.tin.gainMult.div(10).times(diffout))
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return hasUpgrade(rf, 14) },
            styleClass: "automation-clickables",
            style() {
                return {
                    "background": "linear-gradient(45deg, #c4dce1 0%, #d3e4e4 100%)",
                }
            },
        },
        33: {
            title() {
                let t = "自动矿机-铁矿石"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：768 RF/t<br>
                效果：每秒自动获取一次挖掘铁矿石的100%<br><br>
                状态：${onoff}`
                return d
            },
            cost() {
                return d(768)
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id)) return player.iron.ore = player.iron.ore.add(tmp.iron.gainMult.times(diffout))
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return hasUpgrade(rf, 31) },
            styleClass: "automation-clickables",
            style() {
                return {
                    "background": "linear-gradient(45deg, #d8d8d8 0%, #d8d8d8 50%, #a8a8a8 70%, #5e5e5e 90%)",
                }
            },
        },
        34: {
            title() {
                let t = "自动矿机-镍矿石"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：1080 RF/t<br>
                效果：每秒自动获取一次挖掘镍矿石的100%<br><br>
                状态：${onoff}`
                return d
            },
            cost() {
                return d(1080)
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id)) return player.nickel.ore = player.nickel.ore.add(tmp.nickel.gainMult.times(diffout))
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return hasUpgrade(rf, 33) },
            styleClass: "automation-clickables",
            style() {
                return {
                    "background": "linear-gradient(45deg, #fffcc0 0%, #f5f5d7 25%, #fffcc0 50%, #e3df94 75%, #8b8566 100%)",
                }
            },
        },
        35: {
            title() {
                let t = "自动矿机-铝矿石"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：1080 RF/t<br>
                效果：每秒自动获取一次挖掘铝矿石的100%<br><br>
                状态：${onoff}`
                return d
            },
            cost() {
                return d(1080)
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id)) return player.aluminum.ore = player.aluminum.ore.add(tmp.aluminum.gainMult.times(diffout))
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return hasUpgrade(rf, 34) },
            styleClass: "automation-clickables",
            style() {
                return {
                    "background": "linear-gradient(45deg, #e2e3ee 0%, #d4d5e4 50%, #a0a2ac 100%)"
                }
            },
        },
        41: {
            title() {
                let t = "自动矿机-铅矿石"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：1080 RF/t<br>
                效果：每秒自动获取一次挖掘铅矿石的100%<br><br>
                状态：${onoff}`
                return d
            },
            cost() {
                return d(1080)
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id)) return player.lead.ore = player.lead.ore.add(tmp.lead.gainMult.times(diffout))
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return hasUpgrade(rf, 35) },
            styleClass: "automation-clickables",
            style() {
                return {
                    "background": "linear-gradient(45deg, #667397 0%, #acc0ff 20%, #97a9e0 50%, #6a7392 80%, #333848 100%)",
                }
            },
        },
        51: {
            title() {
                let t = "自动树场-金合欢原木"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：600 RF/t<br>
                效果：每秒自动获取一次撸树的金合欢原木的100%<br><br>
                状态：${onoff}`
                return d
            },
            cost() {
                return d(600)
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id)) return player.wood.acacia = player.wood.acacia.add(tmp.wood.logGain.acacia.times(diffout))
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return hasUpgrade(rf, 41) },
            styleClass: "automation-clickables",
            style() {
                return {
                    'background-color': '#ba5d3b',
                }
            },
        },
        52: {
            title() {
                let t = "自动树场-深色橡木原木"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：${f(600000)} RF/t<br>
                效果：每秒自动获取一次撸树的深色橡木原木的100%<br><br>
                状态：${onoff}`
                return d
            },
            cost() {
                return d(600000)
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id)) return player.wood.darkOak = player.wood.darkOak.add(tmp.wood.logGain.darkOak.times(diffout))
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return hasUpgrade(rf, 42) },
            styleClass: "automation-clickables",
            style() {
                return {
                    'background-color': '#5b4830',
                }
            },
        },
        61: {
            title() {
                let t = "蓄水器-自动蓄水"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：800 RF/t<br>
                效果：每秒自动蓄水获得${formatPercent(this.mult())}的水<br><br>
                状态：${onoff}<br>
                当前效率：${f(this.gain())}/秒`
                return d
            },
            cost() {
                return d(800)
            },
            baseGain() {
                return tmp.iron.fluidPerBucket.times(player.crafting_table.items[122])
            },
            mult() {
                let m = d(1)
                if (hasCraftingItem(242)) m = m.times(10)
                if (player[ct].items[452].gte(1)) m = m.times(2000)
                if (hasUpgrade(obsidian, 23)) m = m.times(upgradeEffect(obsidian, 23))
                return m
            },
            gain() {
                return this.baseGain().times(this.mult())
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id)) return player.iron.water = player.iron.water.add(this.gain().times(diffout))
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return hasUpgrade(rf, 51) },
            styleClass: "automation-clickables",
            style() {
                return {
                    'background-color': '#2b3cf4',
                }
            },
        },
        62: {
            title() {
                let t = "熔岩炉-熔炼熔岩"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：12,800 RF/t<br>
                效果：每秒自动熔炼获得${formatPercent(this.mult())}的熔岩<br><br>
                状态：${onoff}<br>
                当前效率：${f(this.gain())}/秒`
                return d
            },
            cost() {
                return d(12800)
            },
            baseGain() {
                return tmp.iron.fluidPerBucket.times(player.crafting_table.items[122])
            },
            mult() {
                let m = d(1)
                if (player[ct].items[242].gte(3)) m = m.times(10)
                if (player[ct].items[452].gte(5)) m = m.times(2000)
                if (hasUpgrade(obsidian, 24)) m = m.times(upgradeEffect(obsidian, 24))
                return m
            },
            gain() {
                return this.baseGain().times(this.mult())
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id)) return player.iron.lava = player.iron.lava.add(this.gain().times(diffout))
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return hasUpgrade(rf, 51) },
            styleClass: "automation-clickables",
            style() {
                return {
                    'background-color': '#d76013',
                }
            },
        },
        63: {
            title() {
                let t = "自动矿机-锌矿石"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：3240 RF/t<br>
                效果：每秒自动获取一次挖掘锌矿石获取期望的100%<br><br>
                状态：${onoff}`
                return d
            },
            cost() {
                return d(3240)
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id)) return player.zinc.ore = player.zinc.ore.add(tmp.zinc.chainExpectation.times(diffout))
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return hasUpgrade(rf, 63) },
            styleClass: "automation-clickables",
            style() {
                return {
                    "background": "linear-gradient(45deg, #a3be9e 0%, #fcfcfc 10%, #b7e6bf 40%, #b7e6bf 60%, #d3fcd9 80%, #4f6c62 100%)",
                }
            },
        },
        64: {
            title() {
                let t = "自动矿机-银矿石"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：100,000 RF/t<br>
                效果：每秒自动获取一次挖掘银矿石获取期望的100%<br><br>
                状态：${onoff}`
                return d
            },
            cost() {
                return d(100000)
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id)) return player.silver.ore = player.silver.ore.add(tmp.silver.chainExpectation.times(diffout))
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return hasUpgrade(rf, 72) },
            styleClass: "automation-clickables",
            style() {
                return {
                    "background": "linear-gradient(45deg, #65696b 0%, #bbc7ce 20%, #ddf2f5 40%, #9cc1ca 70%, #5ca0a6 100%)",
                }
            },
        },
        65: {
            title() {
                let t = "自动矿机-金矿石"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：${f(150000)} RF/t<br>
                效果：每秒自动获取一次挖掘金矿石获取期望的100%<br><br>
                状态：${onoff}`
                return d
            },
            cost() {
                return d(150000)
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id)) return player.gold.ore = player.gold.ore.add(tmp.gold.chainExpectation.times(diffout))
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return hasUpgrade(rf, 74) },
            styleClass: "automation-clickables",
            style() {
                return {
                    "background": "linear-gradient(45deg, #b26411 0%, #fdf55f 10%, #fffde0 20%, #fdf55f 30%, #fdf55f 80%, #752802 100%)",
                }
            },
        },
        71: {
            title() {
                let t = "自动矿机-红石矿石"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：${f(225000)} RF/t<br>
                效果：每秒自动获取一次挖掘红石矿石和红石粉期望的100%${hasUpgrade(rf, 82) ? "，挖掘一个不稳红石矿石获得的不稳红石络合物的100%" : ""}${hasUpgrade(rf, 102) ? "，自动挖掘尽可能多的不稳红石矿石" : ""}<br><br>
                状态：${onoff}`
                return d
            },
            cost() {
                return d(225000)
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id)) {
                    player.redstone.ore = player.redstone.ore.add(tmp.redstone.gainMult.times(diffout))
                    player.redstone.points = player.redstone.points.add(tmp.redstone.minimumGainT.add(tmp.redstone.maximumGainT).div(2).times(diffout))
                    if (hasUpgrade(rf, 82)) player.redstone.destabilized_clathrate = player.redstone.destabilized_clathrate.add(tmp.redstone.clathrate_in_ore.times(diffout))
                    if (hasUpgrade(rf, 102)) {
                        if (tmp.redstone.destabilized_pending.gte(1)) player.redstone.destabilized = tmp.redstone.destabilized_gain
                    }
                }
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return hasUpgrade(rf, 81) },
            styleClass: "automation-clickables",
            style() {
                return {
                    "background": "#fc0000",
                }
            },
        },
        72: {
            title() {
                let t = "自动矿机-铂矿石"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：${f(900000)} RF/t<br>
                效果：每秒自动获取一次挖掘铂矿石获取期望的100%<br><br>
                状态：${onoff}`
                return d
            },
            cost() {
                return d(900000)
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id)) {
                    player.platinum.ore = player.platinum.ore.add(tmp.platinum.chainExpectation.times(diffout))
                }
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return hasUpgrade(rf, 85) },
            styleClass: "automation-clickables",
            style() {
                return {
                    "background": "linear-gradient(45deg, #62d1f3 0%, #c8fbff 30%, #ffffff 50%, #aae3ff 80%, #476fbe 100%)",
                }
            },
        },
        73: {
            title() {
                let t = "自动矿机-钻石矿石"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：${f(1500000)} RF/t<br>
                效果：每秒自动获取一次挖掘钻石矿石和钻石期望的100%${hasUpgrade(rf, 104) ? "，挖掘一个四阶无暇钻石的获取的100%" : ""}<br><br>
                状态：${onoff}`
                return d
            },
            cost() {
                return d(1500000)
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id)) {
                    player.diamond.ore = player.diamond.ore.add(tmp.diamond.gainMult.times(diffout))
                    player.diamond.points = player.diamond.points.add(tmp.diamond.minimumGainT.add(tmp.diamond.maximumGainT).div(2).times(diffout))
                    if (hasUpgrade(rf, 104)) player.diamond.flawless = player.diamond.flawless.add(tmp.diamond.flawlessMult[4].times(diffout))
                }
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return hasUpgrade(rf, 103) },
            styleClass: "automation-clickables",
            style() {
                return {
                    "background": "#a2fbea",
                }
            },
        },
        74: {
            title() {
                let t = "自动矿机-黑曜石"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：${f(4500000)} RF/t<br>
                效果：每秒自动获取一次挖掘黑曜石的100%<br><br>
                状态：${onoff}`
                return d
            },
            cost() {
                return d(4500000)
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id)) {
                    player.obsidian.points = player.obsidian.points.add(tmp.obsidian.gainMult.times(diffout))
                }
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return hasUpgrade(rf, 105) },
            styleClass: "automation-clickables",
            style() {
                return {
                    "background": "#392a50",
                    color: "white",
                }
            },
        },
        75: {
            title() {
                let t = "自动矿机-玄武岩"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：${f(7500000)} RF/t<br>
                效果：每秒自动获取一次挖掘石头获得的玄武岩的100%<br><br>
                状态：${onoff}`
                return d
            },
            cost() {
                return d(7500000)
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id)) {
                    player.stone.basalt = player.stone.basalt.add(tmp.stone.otherGain.basalt.times(diffout))
                }
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return hasUpgrade(rf, 111) },
            styleClass: "automation-clickables",
            style() {
                return {
                    "background": "#5b5b5b",
                    color: "white",
                }
            },
        },
        //自动熔炼
        10001: {
            title() {
                let t = "虚空熔炼-铜锭"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：66 RF/t<br>
                效果：每个游戏刻（tick）自动熔炼一次当前拥有的铜矿石的0.5%，且不消耗铜矿石，但不能超过当前铜矿石总量<br><br>
                状态：${onoff}`
                return d
            },
            cost() {
                return d(66)
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id) && player.copper.points.lt(player.copper.ore)) return player.copper.points = player.copper.points.add(player.copper.ore.div(10).times(diffout))
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return hasUpgrade(rf, 21) },
            styleClass: "automation-clickables",
            style() {
                return {
                    "background": "linear-gradient(45deg, #ea8601 0%, #ffb53c 100%)",
                }
            },
        },
        10002: {
            title() {
                let t = "虚空熔炼-锡锭"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：66 RF/t<br>
                效果：每个游戏刻（tick）自动熔炼一次当前拥有的锡矿石的0.5%，且不消耗锡矿石，但不能超过当前锡矿石总量<br><br>
                状态：${onoff}`
                return d
            },
            cost() {
                return d(66)
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id) && player.tin.points.lt(player.tin.ore)) return player.tin.points = player.tin.points.add(player.tin.ore.div(10).times(diffout))
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return hasUpgrade(rf, 22) },
            styleClass: "automation-clickables",
            style() {
                return {
                    "background": "linear-gradient(45deg, #c4dce1 0%, #d3e4e4 100%)",
                }
            },
        },
        10003: {
            title() {
                let t = "虚空熔炼-木炭"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：66 RF/t<br>
                效果：每个游戏刻（tick/50ms，若游戏刻变慢，按实际毫秒数计算倍率）自动熔炼获得${fw(this.mult())}木炭（即${fw(this.mult().times(20))}每秒），且不消耗木头<br><br>
                状态：${onoff}`
                return d
            },
            mult() {
                let m = d(100)
                if (hasCraftingItem(302)) m = m.times(clickableEffect(ct, 302))
                return m
            },
            cost() {
                return d(66)
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id)) return player.furnace.charcoal = player.furnace.charcoal.add(this.mult().times(20).times(diffout))
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return hasUpgrade(rf, 23) },
            styleClass: "automation-clickables",
            style() {
                return {
                    'background-color': '#2b261d',
                    'color': 'white',
                }
            },
        },
        10004: {
            title() {
                let t = "虚空合金-青铜锭"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：1440 RF/t<br>
                效果：每个游戏刻（tick）自动合金能够合金数量的0.5%的青铜锭，且不消耗原材料，但不能超过锡锭的4倍，铜锭的4/3倍<br><br>
                状态：${onoff}`
                return d
            },
            cost() {
                return d(1440)
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                let alloyPsec = player.copper.points.max(0).div(3).floor().min(player.tin.points).times(4).div(10)
                let alloyCap = player.copper.points.max(0).times(4 / 3).min(player.tin.points.times(4))
                if (player.bronze.points.gte(alloyCap)) alloyPsec = d(0)
                if (RFAutobuyerActivated(this.id)) return player.bronze.points = player.bronze.points.add(alloyPsec.times(diffout))
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return hasUpgrade(rf, 32) },
            styleClass: "automation-clickables",
            style() {
                return {
                    "background": "linear-gradient(45deg, #b77b2f 0%, #ffd7a1 80%, #ffeed8 100%)",
                }
            },
        },
        10005: {
            title() {
                let t = "虚空熔炼-铁锭"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：1440 RF/t<br>
                效果：每个游戏刻（tick）自动熔炼一次当前拥有的铁矿石的0.5%，且不消耗铁矿石，但不能超过当前铁矿石总量<br><br>
                状态：${onoff}`
                return d
            },
            cost() {
                return d(1440)
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id) && player.iron.points.lt(player.iron.ore)) return player.iron.points = player.iron.points.add(player.iron.ore.div(10).times(diffout))
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return hasUpgrade(rf, 24) },
            styleClass: "automation-clickables",
            style() {
                return {
                    "background": "linear-gradient(45deg, #d8d8d8 0%, #d8d8d8 50%, #a8a8a8 70%, #5e5e5e 90%)",
                }
            },
        },
        10011: {
            title() {
                let t = "虚空熔炼-镍锭"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：1440 RF/t<br>
                效果：每个游戏刻（tick）自动熔炼一次当前拥有的镍矿石的0.5%，且不消耗镍矿石，但不能超过当前镍矿石总量<br><br>
                状态：${onoff}`
                return d
            },
            cost() {
                return d(1440)
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id) && player.nickel.points.lt(player.nickel.ore)) return player.nickel.points = player.nickel.points.add(player.nickel.ore.div(10).times(diffout))
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return hasUpgrade(rf, 25) },
            styleClass: "automation-clickables",
            style() {
                return {
                    "background": "linear-gradient(45deg, #fffcc0 0%, #f5f5d7 25%, #fffcc0 50%, #e3df94 75%, #8b8566 100%)",
                }
            },
        },
        10012: {
            title() {
                let t = "虚空熔炼-铝锭"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：1800 RF/t<br>
                效果：每个游戏刻（tick）自动熔炼一次当前拥有的铝矿石的0.5%，且不消耗铝矿石，但不能超过当前铝矿石总量<br><br>
                状态：${onoff}`
                return d
            },
            cost() {
                return d(1800)
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id) && player.aluminum.points.lt(player.aluminum.ore)) return player.aluminum.points = player.aluminum.points.add(player.aluminum.ore.div(10).times(diffout))
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return hasUpgrade(rf, 53) },
            styleClass: "automation-clickables",
            style() {
                return {
                    "background": "linear-gradient(90deg, #e2e3ee 0%, #d4d5e4 50%, #a0a2ac 100%)",
                }
            },
        },
        10013: {
            title() {
                let t = "虚空熔炼-铅锭"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：1800 RF/t<br>
                效果：每个游戏刻（tick）自动熔炼一次当前拥有的铅矿石的0.5%，且不消耗铅矿石，但不能超过当前铅矿石总量<br><br>
                状态：${onoff}`
                return d
            },
            cost() {
                return d(1800)
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id) && player.lead.points.lt(player.lead.ore)) return player.lead.points = player.lead.points.add(player.lead.ore.div(10).times(diffout))
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return hasUpgrade(rf, 54) },
            styleClass: "automation-clickables",
            style() {
                return {
                    "background": "linear-gradient(45deg, #667397 0%, #acc0ff 20%, #97a9e0 50%, #6a7392 80%, #333848 100%)",
                }
            },
        },
        10014: {
            title() {
                let t = "虚空熔炼-康铜锭"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：2400 RF/t<br>
                效果：每个游戏刻（tick）自动合金一次康铜锭合金倍率的5%，且不消耗原材料<br><br>
                状态：${onoff}`
                return d
            },
            cost() {
                return d(2400)
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id)) return player.constantan.points = player.constantan.points.add(tmp.alloy_s.clickables[12].mult.times(diffout))
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return hasUpgrade(rf, 55) },
            styleClass: "automation-clickables",
            style() {
                return {
                    "background": "linear-gradient(45deg, #d39f49 0%, #ffd37c 30%, #eeba4f 80%, #7d6233 100%)",
                }
            },
        },
        10015: {
            title() {
                let t = "虚空熔炼-殷钢锭"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：2160 RF/t<br>
                效果：每个游戏刻（tick）自动合金一次殷钢锭合金倍率的5%，且不消耗原材料<br><br>
                状态：${onoff}`
                return d
            },
            cost() {
                return d(2160)
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id)) return player.invar.points = player.invar.points.add(tmp.alloy_s.clickables[13].mult.times(diffout))
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return hasUpgrade(rf, 61) },
            styleClass: "automation-clickables",
            style() {
                return {
                    "background": "linear-gradient(45deg, #979a90 0%, #bcc4ba 20%, #e2e7e5 75%, #95a7a1 90%, #697672 100%)",
                }
            },
        },
        10021: {
            title() {
                let t = "虚空熔炼-铝黄铜锭"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：2160 RF/t<br>
                效果：每个游戏刻（tick）自动合金一次铝黄铜合金倍率的5%，且不消耗原材料<br><br>
                状态：${onoff}`
                return d
            },
            cost() {
                return d(2160)
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id)) return player.alumbrass.points = player.alumbrass.points.add(tmp.alloy_s.clickables[14].mult.times(diffout))
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return hasUpgrade(rf, 62) },
            styleClass: "automation-clickables",
            style() {
                return {
                    "background": "linear-gradient(45deg, #e6c34b 0%, #f0d467 30%, #e6c34b 75%, #ab7d1b 100%)",
                }
            },
        },
        10022: {
            title() {
                let t = "虚空熔炼-锌锭"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：4320 RF/t<br>
                效果：每个游戏刻（tick）自动熔炼一次当前拥有的锌矿石的0.5%，且不消耗锌矿石，但不能超过当前锌矿石总量<br><br>
                状态：${onoff}`
                return d
            },
            cost() {
                return d(4320)
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id) && player.zinc.points.lt(player.zinc.ore)) return player.zinc.points = player.zinc.points.add(player.zinc.ore.div(10).times(diffout))
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return hasUpgrade(rf, 64) },
            styleClass: "automation-clickables",
            style() {
                return {
                    "background": "linear-gradient(45deg, #a3be9e 0%, #fcfcfc 10%, #b7e6bf 40%, #b7e6bf 60%, #d3fcd9 80%, #4f6c62 100%)",
                }
            },
        },
        10023: {
            title() {
                let t = "虚空熔炼-黄铜锭"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：4320 RF/t<br>
                效果：每个游戏刻（tick）自动合金一次黄铜合金倍率的0.5%，且不消耗原材料<br><br>
                状态：${onoff}`
                return d
            },
            cost() {
                return d(4320)
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id)) return player.brass.points = player.brass.points.add(tmp.alloy_s.clickables[15].mult.div(10).times(diffout))
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return hasUpgrade(rf, 65) },
            styleClass: "automation-clickables",
            style() {
                return {
                    "background": "linear-gradient(45deg, #fce892 0%, #fce892 30%,  #f8ac67 60%, #f8ac67 80%, #75452c 100%)",
                }
            },
        },
        10024: {
            title() {
                let t = "高炉自动化生产-钢锭"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：81,920 RF/t<br>
                效果：全自动钢锭的填充和拾取<br><br>
                状态：${onoff}`
                return d
            },
            cost() {
                return d(81920)
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id)) {
                    if (tmp.steel.clickables[11].canClick) return tmp.steel.clickables[11].onClick()
                    if (tmp.steel.clickables[12].canClick) return tmp.steel.clickables[12].onClick()
                }
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return hasUpgrade(rf, 71) },
            styleClass: "automation-clickables",
            style() {
                return {
                    "background": "linear-gradient(45deg, #7a7a7a 0%, #adadad 30%, #adadad 80%, #989898 90%, #414141 100%)",
                }
            },
        },
        10025: {
            title() {
                let t = "虚空熔炼-银锭"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：100,000 RF/t<br>
                效果：每个游戏刻（tick）自动熔炼一次当前拥有的银矿石的0.5%，且不消耗银矿石，但不能超过当前银矿石总量<br><br>
                状态：${onoff}`
                return d
            },
            cost() {
                return d(100000)
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id) && player.silver.points.lt(player.silver.ore)) return player.silver.points = player.silver.points.add(player.silver.ore.div(10).times(diffout))
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return hasUpgrade(rf, 73) },
            styleClass: "automation-clickables",
            style() {
                return {
                    "background": "linear-gradient(45deg, #65696b 0%, #bbc7ce 20%, #ddf2f5 40%, #9cc1ca 70%, #5ca0a6 100%)",
                }
            },
        },
        10031: {
            title() {
                let t = "虚空熔炼-金锭"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：${f(200000)} RF/t<br>
                效果：每个游戏刻（tick）自动熔炼一次当前拥有的金矿石的0.5%，且不消耗金矿石，但不能超过当前金矿石总量<br><br>
                状态：${onoff}`
                return d
            },
            cost() {
                return d(200000)
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id) && player.gold.points.lt(player.gold.ore)) return player.gold.points = player.gold.points.add(player.gold.ore.div(10).times(diffout))
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return hasUpgrade(rf, 75) },
            styleClass: "automation-clickables",
            style() {
                return {
                    "background": "linear-gradient(45deg, #b26411 0%, #fdf55f 10%, #fffde0 20%, #fdf55f 30%, #fdf55f 80%, #752802 100%)",
                }
            },
        },
        10032: {
            title() {
                let t = "虚空熔炼-琥珀金锭"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：${f(350000)} RF/t<br>
                效果：每个游戏刻（tick）自动合金一次琥珀金合金倍率的0.5%，且不消耗原材料<br><br>
                状态：${onoff}`
                return d
            },
            cost() {
                return d(350000)
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id)) return player.electrum.points = player.electrum.points.add(tmp.alloy_s.clickables[21].mult.div(10).times(diffout))
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return hasUpgrade(rf, 83) },
            styleClass: "automation-clickables",
            style() {
                return {
                    "background": "linear-gradient(45deg, #c6ae49 0%, #f8ef85 20%, #ffff98 50%, #fffcbc 70%, #eee155 90%, #6c5e23 100%)",
                }
            },
        },
        10033: {
            title() {
                let t = "虚空熔炼-红石琥珀金锭"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：${f(700000)} RF/t<br>
                效果：每个游戏刻（tick）自动合金一次琥珀金合金倍率的0.5%，且不消耗原材料<br><br>
                状态：${onoff}`
                return d
            },
            cost() {
                return d(700000)
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id)) return player.red_ele.points = player.red_ele.points.add(tmp.alloy_s.clickables[22].mult.div(10).times(diffout))
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return hasUpgrade(rf, 84) },
            styleClass: "automation-clickables",
            style() {
                return {
                    "background": "linear-gradient(45deg, #c6ae49 0%, #f8ef85 20%, #ffff98 50%, #fffcbc 70%, #eee155 90%, #6c5e23 100%)",
                    "border-color": "#fc0000",
                }
            },
        },
        10034: {
            title() {
                let t = "虚空熔炼-铂锭"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：${f(1200000)} RF/t<br>
                效果：每个游戏刻（tick）自动熔炼一次当前拥有的铂矿石的0.5%，且不消耗铂矿石，但不能超过当前铂矿石总量<br><br>
                状态：${onoff}`
                return d
            },
            cost() {
                return d(1200000)
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id) && player.platinum.points.lt(player.platinum.ore)) return player.platinum.points = player.platinum.points.add(player.platinum.ore.div(10).times(diffout))
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            unlocked() { return hasUpgrade(rf, 101) },
            styleClass: "automation-clickables",
            style() {
                return {
                    "background": "linear-gradient(45deg, #62d1f3 0%, #c8fbff 30%, #ffffff 50%, #aae3ff 80%, #476fbe 100%)",
                }
            },
        },
        //功能类机械配方
        20001: {
            title() {
                let t = "磨粉机-黑曜石粉"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：${f(1000000)} RF/t<br>
                效果：每秒自动磨粉产出黑曜石粉<br>
                倍数：${f(this.mult())}<br>
                产出比例：1:4<br><br>
                状态：${onoff}`
                return d
            },
            cost() {
                return d(1000000)
            },
            mult() {
                let m = tmp.rf.pulverizer_efficiency
                return m
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id)) return player.obsidian.dust = player.obsidian.dust.add(this.mult().times(diffout).times(4)),
                    player.obsidian.points = player.obsidian.points.sub(this.mult().times(diffout)).max(0)
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) && player.obsidian.points.gte(1) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false,
                    player.obsidian.points = player.obsidian.points.floor().max(0)
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            autoStop() {
                if (!this.canClick()) player.rf.autobuyer[this.id] = false,
                    player.obsidian.points = player.obsidian.points.floor().max(0)
            },
            unlocked() { return hasUpgrade(rf, 91) },
            styleClass: "automation-clickables",
            style() {
                return {
                    "background": "#392a50",
                    color: "white",
                }
            },
        },
        20002: {
            title() {
                let t = "磨粉机-木屑"
                return t
            },
            display() {
                let onoff = RFAutobuyerActivated(this.id) ? "开" : "关"
                let d = `
                需要耗能：${f(300000)} RF/t<br>
                效果：每秒自动磨粉产出黑曜石粉<br>
                倍数：${f(this.mult())}<br>
                产出比例：1:28<br><br>
                状态：${onoff}`
                return d
            },
            cost() {
                return d(300000)
            },
            mult() {
                let m = tmp.rf.pulverizer_efficiency
                return m
            },
            auto(diff) {
                if (player.rf.autobuyer[this.id] == undefined) return player.rf.autobuyer[this.id] = false
                if (RFAutobuyerActivated(this.id)) return player.wood.chips = player.wood.chips.add(this.mult().times(diffout).times(28)),
                    player.wood.points = player.wood.points.sub(this.mult().times(diffout)).max(0)
            },
            canClick() { return player.rf.points.gte(this.cost().times(20)) && player.wood.points.gte(1) },
            onClick() {
                if (RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = false,
                    player.wood.points = player.wood.points.floor().max(0)
                if (!RFAutobuyerActivated(this.id)) return player.rf.autobuyer[this.id] = true
            },
            autoStop() {
                if (!this.canClick()) player.rf.autobuyer[this.id] = false,
                    player.wood.points = player.wood.points.floor().max(0)
            },
            unlocked() { return hasUpgrade(rf, 92) },
            styleClass: "automation-clickables",
            style() {
                return {
                    "background": "#b8945e",
                }
            },
        },
        //翻页
        200002: {
            display() {
                let d = `<`
                return d
            },
            canClick() { return player.rf.autoCurrencyPage > 1 },
            onClick() {
                player.rf.autoCurrencyPage -= 1
            },
            style() {
                return {
                    'min-height': '50px',
                    'width': '50px',
                    'font-size': '20px',
                }
            },
        },
        200003: {
            display() {
                let d = `${formatWhole(player.rf.autoCurrencyPage)}/${formatWhole(player.rf.maxAutoCurrencyPage)}页`
                return d
            },
            canClick() { return false },
            style() {
                return {
                    'min-height': '50px',
                    'width': '150px',
                    'font-size': '20px',
                    'background-color': '#fc0000',
                    'border-radius': '2.5px',
                }
            },
        },
        200004: {
            display() {
                let d = `>`
                return d
            },
            canClick() { return player.rf.autoCurrencyPage < player.rf.maxAutoCurrencyPage },
            onClick() {
                player.rf.autoCurrencyPage += 1
            },
            style() {
                return {
                    'min-height': '50px',
                    'width': '50px',
                    'font-size': '20px',
                }
            },
        },
    },

    pulverizer_efficiency() {
        let eff = d(0.1)
        if (player[ct].items[452].gte(20)) eff = eff.times(3)
        if (hasCraftingItem(462)) eff = eff.times(3)
        return eff
    },

    update(diff) {
        if (hasCraftingItem(61)) player.rf.points = player.rf.points.add(tmp.rf.netGrowth.times(diff).times(20)) //每tick计算
        if (player.rf.points.lte(tmp.rf.netGrowth.neg())) player.rf.autobuyer = {}
        //最多有
        if (player.rf.points.gte(player.rf.best)) player.rf.best = player.rf.points
        //更新最大页码
        if (tmp.rf.clickables[61].unlocked || tmp.rf.clickables[62].unlocked) player.rf.maxAutoCurrencyPage = 2
    },

    tabFormat: [
        ["display-text", function () { return getPointsDisplay() }],
        "main-display",
        ["display-text", () => `发电速度 ${textStyle_h2(formatWhole(tmp.rf.gainMult), 'fc0000')} RF/t`],
        ["display-text", () => `净增长 ${textStyle_h2(formatWhole(tmp.rf.netGrowth), 'fc0000')} RF/t`],
        "blank",
        ["display-text", () => `你同时最多拥有 ${formatWhole(player.rf.best)} RF`],
        "blank",
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "auto_currency": {
                unlocked() { return tmp.rf.layerShown },
                name() { return '自动资源' },
                content: [
                    ["blank", "15px"],
                    ["clickables", [20000]],
                    "blank",
                    ["clickables", function () {
                        let p = player.rf.autoCurrencyPage
                        return [[p * 5 - 4], [p * 5 - 3], [p * 5 - 2], [p * 5 - 1], [p * 5]]
                    }],
                    "blank",
                    ["display-text", () => `请注意自己的RF发电速度`],
                    ["display-text", () => `若一游戏刻（tick）的耗时超过50ms（比如调整更新频率），实际tick资源生产量会x(耗时/50ms)保持正常生产速度`],
                    ["display-text", () => `若RF能源不足以保持自动化，将强制关闭所有自动化！`],
                    ["display-text", function () { return `自动获取的资源可以无视当前所在的位置直接获取` }],
                ]
            },
            "auto_smelt": {
                unlocked() { return hasCraftingItem(112) },
                name() { return '自动熔炼' },
                content: [
                    ["blank", "15px"],
                    "blank",
                    ["clickables", [1000, 1001, 1002, 1003]],
                    "blank",
                    ["display-text", () => `请注意自己的RF发电速度`],
                    ["display-text", () => `若RF能源不足以保持自动化，将强制关闭所有自动化！`],
                ]
            },
            "pulverizer": {
                unlocked() { return hasCraftingItem(451) },
                name() { return '磨粉机' },
                content: [
                    ["blank", "15px"],
                    "blank",
                    ["clickables", [2000, 2001, 2002, 2003]],
                    "blank",
                    ["display-text", () => `磨粉机基础效率：${f(tmp.rf.pulverizer_efficiency)}`],
                    "blank",
                    ["display-text", () => `请注意自己的RF发电速度`],
                    ["display-text", () => `磨粉机依赖RF来工作`],
                    ["display-text", () => `一般情况下，1矿锭（宝石）相当于1对应粉，除非有特殊标注`],
                    ["display-text", () => `产出物是粉末，因此小数的数量也是合理的`],
                ]
            },
            "unlocks": {
                unlocked() { return tmp.rf.layerShown },
                name() { return '解锁' },
                content: [
                    ["blank", "15px"],
                    "blank",
                    "upgrades",
                    "blank",
                ]
            },
        },
    },
})

//能源层2：魔力

addLayer("mana", {
    componentStyles: {
        "clickable"() {
            return {
                'margin-left': '-7px',
                'margin-right': '-7px',
            }
        }
    },
    name: "mana",
    position: 3003,
    row: 301,
    symbol: '魔力', // This appears on the layer's node. Default is the id with the first letter capitalized
    startData() {
        return {
            unlocked: true,
            points: new ExpantaNum(0),// This actually does nothing, but you have to write this. (Unless you want add something in this layer. #Todo, might change that later.)
        }
    },
    color: "#00bce2",
    type: "none",
    layerType: "energy",
    resource: "魔力",
    baseResource() { return "石头" },
    baseAmount() { return player.stone.points },
    exponent: 0.05,
    requires: d(1414213),
    tooltip() { return false },
    gainMult() { // Calculate the multiplier for main currency from bonuses
        let m = d(0) //就全靠火红莲吗（阿卡纳蔷薇：我**来辣！
        let em = d(0)
        if (player.botania.endoflame.gte(1) && player[ct].items[381].gte(1)) {
            em = em.add(tmp.mana.endoflamePower)
            em = em.times(player.botania.endoflame)
            m = m.add(em)
        }
        let rm = d(0)
        if (player.botania.rosa_arcana.gte(1) && player[ct].items[381].gte(1)) {
            rm = rm.add(tmp.mana.rosa_arcanaPower)
            rm = rm.times(player.botania.rosa_arcana)
            m = m.add(rm)
        }
        m = m.times(player[ct].items[381].div(10))
        return m
    },
    gainExp() { // Calculate the exponent on main currency from bonuses
        e = d(1)
        return e
    },
    layerShown() { return hasNormalAchievement(144) },// If any layer in the array is unlocked, it will returns true. Otherwise it will return false.


    doReset(resettingLayer) {
        return undefined
    },

    upgrades: {
        11: {
            title: "使用魔力",
            description: "解锁一个新区域：世界2，和新层级：魔力钢<br>解锁魔力钢的配方（在魔力池界面）",
            cost() { return new ExpantaNum(3000) },
            unlocked() { return tmp.mana.layerShown },
        },
        12: {
            title: "强力魔力合金",
            description: "解锁泰拉钢的配方（在泰拉凝聚板池界面）",
            cost() { return new ExpantaNum(1e108) },
            unlocked() { return hasUpgrade(manasteel, 35) },
        },
    },

    endoflamePower() {
        let p = d(30)
        if (hasUpgrade(manasteel, 11)) p = p.times(3)
        if (hasUpgrade(manasteel, 12)) p = p.times(upgradeEffect(manasteel, 12))
        if (hasUpgrade(manasteel, 15)) p = p.times(upgradeEffect(manasteel, 15))
        return p
    },

    rosa_arcanaPower() {
        let p = d(1e9)
        if (hasUpgrade(manasteel, 24)) p = p.times(upgradeEffect(manasteel, 24))
        if (hasUpgrade(manasteel, 25)) p = p.times(upgradeEffect(manasteel, 25))
        if (hasUpgrade(manasteel, 32)) p = p.times(upgradeEffect(manasteel, 32))
        return p
    },

    update(diff) {
        if (player.mana.points.gte(player.mana.best)) player.mana.best = player.mana.points

        player.mana.points = player.mana.points.add(tmp.mana.gainMult.times(diff))
    },

    tabFormat: [
        ["display-text", function () { return getPointsDisplay() }],
        ["display-text", () => `你有 ${textStyle_h2(formatWhole(player.mana.points), '00bce2')} 魔力`],
        ["display-text", () => `(+${textStyle_h2(format(tmp.mana.gainMult), '00bce2')}/秒)`],
        ["display-text", function () {
            return `你有 ${textStyle_h2(fw(player.botania.endoflame), 'b87c00')} 火红莲`
        }],
        ["display-text", () => `火红莲的力量为 ${textStyle_h2(formatWhole(tmp.mana.endoflamePower), '00bce2')}/秒`],
        ["display-text", function () {
            if (hasUpgrade(experience, 25)) return `你有 ${textStyle_h2(fw(player.botania.rosa_arcana), 'ff02ff')} 阿卡纳蔷薇`
        }],
        ["display-text", function () {
            if (hasUpgrade(experience, 25)) return `阿卡纳蔷薇的力量为 ${textStyle_h2(formatWhole(tmp.mana.rosa_arcanaPower), '00bce2')}/秒`
        }],
        ["display-text", function () { if (player[ct].items[381].lt(10)) return `由于你的魔力发射器不足10个，你的魔力获取效率为原来的${fp(player[ct].items[381].div(10))}！` }],
        "blank",
        ["display-text", () => `你同时最多拥有 ${formatWhole(player.mana.best)} 魔力`],
        "blank",
        ["microtabs", "stuff"],
        ["blank", "65px"],
    ],
    microtabs: {
        stuff: {
            "upgrades": {
                unlocked() { return tmp.mana.layerShown },
                name() { return '升级' },
                content: [
                    ["blank", "15px"],
                    "upgrades",
                ]
            },
        },
    },
})